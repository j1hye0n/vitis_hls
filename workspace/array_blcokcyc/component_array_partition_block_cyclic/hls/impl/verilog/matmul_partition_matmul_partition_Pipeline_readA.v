// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matmul_partition_matmul_partition_Pipeline_readA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        empty,
        sext_ln46,
        A_15_address0,
        A_15_ce0,
        A_15_we0,
        A_15_d0,
        A_14_address0,
        A_14_ce0,
        A_14_we0,
        A_14_d0,
        A_13_address0,
        A_13_ce0,
        A_13_we0,
        A_13_d0,
        A_12_address0,
        A_12_ce0,
        A_12_we0,
        A_12_d0,
        A_11_address0,
        A_11_ce0,
        A_11_we0,
        A_11_d0,
        A_10_address0,
        A_10_ce0,
        A_10_we0,
        A_10_d0,
        A_9_address0,
        A_9_ce0,
        A_9_we0,
        A_9_d0,
        A_8_address0,
        A_8_ce0,
        A_8_we0,
        A_8_d0,
        A_7_address0,
        A_7_ce0,
        A_7_we0,
        A_7_d0,
        A_6_address0,
        A_6_ce0,
        A_6_we0,
        A_6_d0,
        A_5_address0,
        A_5_ce0,
        A_5_we0,
        A_5_d0,
        A_4_address0,
        A_4_ce0,
        A_4_we0,
        A_4_d0,
        A_3_address0,
        A_3_ce0,
        A_3_we0,
        A_3_d0,
        A_2_address0,
        A_2_ce0,
        A_2_we0,
        A_2_d0,
        A_1_address0,
        A_1_ce0,
        A_1_we0,
        A_1_d0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        dim
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [31:0] m_axi_gmem_0_WDATA;
output  [3:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [31:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [30:0] empty;
input  [61:0] sext_ln46;
output  [3:0] A_15_address0;
output   A_15_ce0;
output   A_15_we0;
output  [31:0] A_15_d0;
output  [3:0] A_14_address0;
output   A_14_ce0;
output   A_14_we0;
output  [31:0] A_14_d0;
output  [3:0] A_13_address0;
output   A_13_ce0;
output   A_13_we0;
output  [31:0] A_13_d0;
output  [3:0] A_12_address0;
output   A_12_ce0;
output   A_12_we0;
output  [31:0] A_12_d0;
output  [3:0] A_11_address0;
output   A_11_ce0;
output   A_11_we0;
output  [31:0] A_11_d0;
output  [3:0] A_10_address0;
output   A_10_ce0;
output   A_10_we0;
output  [31:0] A_10_d0;
output  [3:0] A_9_address0;
output   A_9_ce0;
output   A_9_we0;
output  [31:0] A_9_d0;
output  [3:0] A_8_address0;
output   A_8_ce0;
output   A_8_we0;
output  [31:0] A_8_d0;
output  [3:0] A_7_address0;
output   A_7_ce0;
output   A_7_we0;
output  [31:0] A_7_d0;
output  [3:0] A_6_address0;
output   A_6_ce0;
output   A_6_we0;
output  [31:0] A_6_d0;
output  [3:0] A_5_address0;
output   A_5_ce0;
output   A_5_we0;
output  [31:0] A_5_d0;
output  [3:0] A_4_address0;
output   A_4_ce0;
output   A_4_we0;
output  [31:0] A_4_d0;
output  [3:0] A_3_address0;
output   A_3_ce0;
output   A_3_we0;
output  [31:0] A_3_d0;
output  [3:0] A_2_address0;
output   A_2_ce0;
output   A_2_we0;
output  [31:0] A_2_d0;
output  [3:0] A_1_address0;
output   A_1_ce0;
output   A_1_we0;
output  [31:0] A_1_d0;
output  [3:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] dim;

reg ap_idle;
reg m_axi_gmem_0_RREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln46_fu_389_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0_grp1;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln48_fu_437_p1;
reg   [3:0] trunc_ln48_reg_550;
reg   [31:0] gmem_addr_read_reg_554;
reg   [3:0] lshr_ln_reg_574;
wire   [31:0] j_6_fu_481_p2;
reg   [31:0] j_6_reg_579;
wire   [63:0] zext_ln52_fu_492_p1;
wire    ap_block_pp0_stage0_grp0;
reg   [31:0] j_fu_124;
reg   [31:0] ap_sig_allocacmp_j_load;
wire    ap_loop_init;
reg   [31:0] i_fu_128;
wire   [31:0] i_2_fu_445_p3;
reg   [30:0] itr_fu_132;
wire   [30:0] add_ln46_fu_395_p2;
reg   [30:0] ap_sig_allocacmp_itr_2;
wire    ap_block_pp0_stage0;
reg    A_14_we0_local;
reg    A_14_ce0_local;
reg    A_13_we0_local;
reg    A_13_ce0_local;
reg    A_12_we0_local;
reg    A_12_ce0_local;
reg    A_11_we0_local;
reg    A_11_ce0_local;
reg    A_10_we0_local;
reg    A_10_ce0_local;
reg    A_9_we0_local;
reg    A_9_ce0_local;
reg    A_8_we0_local;
reg    A_8_ce0_local;
reg    A_7_we0_local;
reg    A_7_ce0_local;
reg    A_6_we0_local;
reg    A_6_ce0_local;
reg    A_5_we0_local;
reg    A_5_ce0_local;
reg    A_4_we0_local;
reg    A_4_ce0_local;
reg    A_3_we0_local;
reg    A_3_ce0_local;
reg    A_2_we0_local;
reg    A_2_ce0_local;
reg    A_1_we0_local;
reg    A_1_ce0_local;
reg    A_we0_local;
reg    A_ce0_local;
reg    A_15_we0_local;
reg    A_15_ce0_local;
wire   [0:0] icmp_ln48_fu_418_p2;
wire   [31:0] j_5_fu_429_p3;
wire   [31:0] add_ln50_fu_423_p2;
wire   [3:0] trunc_ln52_fu_453_p1;
wire   [7:0] shl_ln_fu_457_p3;
wire   [7:0] trunc_ln48_1_fu_441_p1;
wire   [7:0] add_ln52_fu_465_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_238;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 j_fu_124 = 32'd0;
#0 i_fu_128 = 32'd0;
#0 itr_fu_132 = 31'd0;
#0 ap_done_reg = 1'b0;
end

matmul_partition_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
            ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_128 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_128 <= i_2_fu_445_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln46_fu_389_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            itr_fu_132 <= add_ln46_fu_395_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            itr_fu_132 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_124 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_124 <= j_6_reg_579;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_554 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_6_reg_579 <= j_6_fu_481_p2;
        lshr_ln_reg_574 <= {{add_ln52_fu_465_p2[7:4]}};
        trunc_ln48_reg_550 <= trunc_ln48_fu_437_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_10_ce0_local = 1'b1;
    end else begin
        A_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd10))) begin
        A_10_we0_local = 1'b1;
    end else begin
        A_10_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_11_ce0_local = 1'b1;
    end else begin
        A_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd11))) begin
        A_11_we0_local = 1'b1;
    end else begin
        A_11_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_12_ce0_local = 1'b1;
    end else begin
        A_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd12))) begin
        A_12_we0_local = 1'b1;
    end else begin
        A_12_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_13_ce0_local = 1'b1;
    end else begin
        A_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd13))) begin
        A_13_we0_local = 1'b1;
    end else begin
        A_13_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_14_ce0_local = 1'b1;
    end else begin
        A_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd14))) begin
        A_14_we0_local = 1'b1;
    end else begin
        A_14_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_15_ce0_local = 1'b1;
    end else begin
        A_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd15))) begin
        A_15_we0_local = 1'b1;
    end else begin
        A_15_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_1_ce0_local = 1'b1;
    end else begin
        A_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd1))) begin
        A_1_we0_local = 1'b1;
    end else begin
        A_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_2_ce0_local = 1'b1;
    end else begin
        A_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd2))) begin
        A_2_we0_local = 1'b1;
    end else begin
        A_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_3_ce0_local = 1'b1;
    end else begin
        A_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd3))) begin
        A_3_we0_local = 1'b1;
    end else begin
        A_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_4_ce0_local = 1'b1;
    end else begin
        A_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd4))) begin
        A_4_we0_local = 1'b1;
    end else begin
        A_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_5_ce0_local = 1'b1;
    end else begin
        A_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd5))) begin
        A_5_we0_local = 1'b1;
    end else begin
        A_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_6_ce0_local = 1'b1;
    end else begin
        A_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd6))) begin
        A_6_we0_local = 1'b1;
    end else begin
        A_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_7_ce0_local = 1'b1;
    end else begin
        A_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd7))) begin
        A_7_we0_local = 1'b1;
    end else begin
        A_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_8_ce0_local = 1'b1;
    end else begin
        A_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd8))) begin
        A_8_we0_local = 1'b1;
    end else begin
        A_8_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_9_ce0_local = 1'b1;
    end else begin
        A_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd9))) begin
        A_9_we0_local = 1'b1;
    end else begin
        A_9_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        A_ce0_local = 1'b1;
    end else begin
        A_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_550 == 4'd0))) begin
        A_we0_local = 1'b1;
    end else begin
        A_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_389_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_itr_2 = 31'd0;
    end else begin
        ap_sig_allocacmp_itr_2 = itr_fu_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_j_load = j_6_reg_579;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_10_address0 = zext_ln52_fu_492_p1;

assign A_10_ce0 = A_10_ce0_local;

assign A_10_d0 = gmem_addr_read_reg_554;

assign A_10_we0 = A_10_we0_local;

assign A_11_address0 = zext_ln52_fu_492_p1;

assign A_11_ce0 = A_11_ce0_local;

assign A_11_d0 = gmem_addr_read_reg_554;

assign A_11_we0 = A_11_we0_local;

assign A_12_address0 = zext_ln52_fu_492_p1;

assign A_12_ce0 = A_12_ce0_local;

assign A_12_d0 = gmem_addr_read_reg_554;

assign A_12_we0 = A_12_we0_local;

assign A_13_address0 = zext_ln52_fu_492_p1;

assign A_13_ce0 = A_13_ce0_local;

assign A_13_d0 = gmem_addr_read_reg_554;

assign A_13_we0 = A_13_we0_local;

assign A_14_address0 = zext_ln52_fu_492_p1;

assign A_14_ce0 = A_14_ce0_local;

assign A_14_d0 = gmem_addr_read_reg_554;

assign A_14_we0 = A_14_we0_local;

assign A_15_address0 = zext_ln52_fu_492_p1;

assign A_15_ce0 = A_15_ce0_local;

assign A_15_d0 = gmem_addr_read_reg_554;

assign A_15_we0 = A_15_we0_local;

assign A_1_address0 = zext_ln52_fu_492_p1;

assign A_1_ce0 = A_1_ce0_local;

assign A_1_d0 = gmem_addr_read_reg_554;

assign A_1_we0 = A_1_we0_local;

assign A_2_address0 = zext_ln52_fu_492_p1;

assign A_2_ce0 = A_2_ce0_local;

assign A_2_d0 = gmem_addr_read_reg_554;

assign A_2_we0 = A_2_we0_local;

assign A_3_address0 = zext_ln52_fu_492_p1;

assign A_3_ce0 = A_3_ce0_local;

assign A_3_d0 = gmem_addr_read_reg_554;

assign A_3_we0 = A_3_we0_local;

assign A_4_address0 = zext_ln52_fu_492_p1;

assign A_4_ce0 = A_4_ce0_local;

assign A_4_d0 = gmem_addr_read_reg_554;

assign A_4_we0 = A_4_we0_local;

assign A_5_address0 = zext_ln52_fu_492_p1;

assign A_5_ce0 = A_5_ce0_local;

assign A_5_d0 = gmem_addr_read_reg_554;

assign A_5_we0 = A_5_we0_local;

assign A_6_address0 = zext_ln52_fu_492_p1;

assign A_6_ce0 = A_6_ce0_local;

assign A_6_d0 = gmem_addr_read_reg_554;

assign A_6_we0 = A_6_we0_local;

assign A_7_address0 = zext_ln52_fu_492_p1;

assign A_7_ce0 = A_7_ce0_local;

assign A_7_d0 = gmem_addr_read_reg_554;

assign A_7_we0 = A_7_we0_local;

assign A_8_address0 = zext_ln52_fu_492_p1;

assign A_8_ce0 = A_8_ce0_local;

assign A_8_d0 = gmem_addr_read_reg_554;

assign A_8_we0 = A_8_we0_local;

assign A_9_address0 = zext_ln52_fu_492_p1;

assign A_9_ce0 = A_9_ce0_local;

assign A_9_d0 = gmem_addr_read_reg_554;

assign A_9_we0 = A_9_we0_local;

assign A_address0 = zext_ln52_fu_492_p1;

assign A_ce0 = A_ce0_local;

assign A_d0 = gmem_addr_read_reg_554;

assign A_we0 = A_we0_local;

assign add_ln46_fu_395_p2 = (ap_sig_allocacmp_itr_2 + 31'd1);

assign add_ln50_fu_423_p2 = (i_fu_128 + 32'd1);

assign add_ln52_fu_465_p2 = (shl_ln_fu_457_p3 + trunc_ln48_1_fu_441_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_238 = ((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_2_fu_445_p3 = ((icmp_ln48_fu_418_p2[0:0] == 1'b1) ? add_ln50_fu_423_p2 : i_fu_128);

assign icmp_ln46_fu_389_p2 = ((ap_sig_allocacmp_itr_2 == empty) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_418_p2 = ((ap_sig_allocacmp_j_load == dim) ? 1'b1 : 1'b0);

assign j_5_fu_429_p3 = ((icmp_ln48_fu_418_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_j_load);

assign j_6_fu_481_p2 = (j_5_fu_429_p3 + 32'd1);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 32'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 4'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

assign shl_ln_fu_457_p3 = {{trunc_ln52_fu_453_p1}, {4'd0}};

assign trunc_ln48_1_fu_441_p1 = j_5_fu_429_p3[7:0];

assign trunc_ln48_fu_437_p1 = j_5_fu_429_p3[3:0];

assign trunc_ln52_fu_453_p1 = i_2_fu_445_p3[3:0];

assign zext_ln52_fu_492_p1 = lshr_ln_reg_574;

endmodule //matmul_partition_matmul_partition_Pipeline_readA
