// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matmul_partition_matmul_partition_Pipeline_loop2_lreorder1_lreorder2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dim,
        bound6,
        bound,
        A_address0,
        A_ce0,
        A_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0,
        A_4_address0,
        A_4_ce0,
        A_4_q0,
        A_5_address0,
        A_5_ce0,
        A_5_q0,
        A_6_address0,
        A_6_ce0,
        A_6_q0,
        A_7_address0,
        A_7_ce0,
        A_7_q0,
        A_8_address0,
        A_8_ce0,
        A_8_q0,
        A_9_address0,
        A_9_ce0,
        A_9_q0,
        A_10_address0,
        A_10_ce0,
        A_10_q0,
        A_11_address0,
        A_11_ce0,
        A_11_q0,
        A_12_address0,
        A_12_ce0,
        A_12_q0,
        A_13_address0,
        A_13_ce0,
        A_13_q0,
        A_14_address0,
        A_14_ce0,
        A_14_q0,
        A_15_address0,
        A_15_ce0,
        A_15_q0,
        B_address0,
        B_ce0,
        B_q0,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        B_2_address0,
        B_2_ce0,
        B_2_q0,
        B_3_address0,
        B_3_ce0,
        B_3_q0,
        B_4_address0,
        B_4_ce0,
        B_4_q0,
        B_5_address0,
        B_5_ce0,
        B_5_q0,
        B_6_address0,
        B_6_ce0,
        B_6_q0,
        B_7_address0,
        B_7_ce0,
        B_7_q0,
        B_8_address0,
        B_8_ce0,
        B_8_q0,
        B_9_address0,
        B_9_ce0,
        B_9_q0,
        B_10_address0,
        B_10_ce0,
        B_10_q0,
        B_11_address0,
        B_11_ce0,
        B_11_q0,
        B_12_address0,
        B_12_ce0,
        B_12_q0,
        B_13_address0,
        B_13_ce0,
        B_13_q0,
        B_14_address0,
        B_14_ce0,
        B_14_q0,
        B_15_address0,
        B_15_ce0,
        B_15_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        grp_fu_367_p_din0,
        grp_fu_367_p_din1,
        grp_fu_367_p_dout0,
        grp_fu_367_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] dim;
input  [93:0] bound6;
input  [62:0] bound;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [3:0] A_2_address0;
output   A_2_ce0;
input  [31:0] A_2_q0;
output  [3:0] A_3_address0;
output   A_3_ce0;
input  [31:0] A_3_q0;
output  [3:0] A_4_address0;
output   A_4_ce0;
input  [31:0] A_4_q0;
output  [3:0] A_5_address0;
output   A_5_ce0;
input  [31:0] A_5_q0;
output  [3:0] A_6_address0;
output   A_6_ce0;
input  [31:0] A_6_q0;
output  [3:0] A_7_address0;
output   A_7_ce0;
input  [31:0] A_7_q0;
output  [3:0] A_8_address0;
output   A_8_ce0;
input  [31:0] A_8_q0;
output  [3:0] A_9_address0;
output   A_9_ce0;
input  [31:0] A_9_q0;
output  [3:0] A_10_address0;
output   A_10_ce0;
input  [31:0] A_10_q0;
output  [3:0] A_11_address0;
output   A_11_ce0;
input  [31:0] A_11_q0;
output  [3:0] A_12_address0;
output   A_12_ce0;
input  [31:0] A_12_q0;
output  [3:0] A_13_address0;
output   A_13_ce0;
input  [31:0] A_13_q0;
output  [3:0] A_14_address0;
output   A_14_ce0;
input  [31:0] A_14_q0;
output  [3:0] A_15_address0;
output   A_15_ce0;
input  [31:0] A_15_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] B_1_address0;
output   B_1_ce0;
input  [31:0] B_1_q0;
output  [3:0] B_2_address0;
output   B_2_ce0;
input  [31:0] B_2_q0;
output  [3:0] B_3_address0;
output   B_3_ce0;
input  [31:0] B_3_q0;
output  [3:0] B_4_address0;
output   B_4_ce0;
input  [31:0] B_4_q0;
output  [3:0] B_5_address0;
output   B_5_ce0;
input  [31:0] B_5_q0;
output  [3:0] B_6_address0;
output   B_6_ce0;
input  [31:0] B_6_q0;
output  [3:0] B_7_address0;
output   B_7_ce0;
input  [31:0] B_7_q0;
output  [3:0] B_8_address0;
output   B_8_ce0;
input  [31:0] B_8_q0;
output  [3:0] B_9_address0;
output   B_9_ce0;
input  [31:0] B_9_q0;
output  [3:0] B_10_address0;
output   B_10_ce0;
input  [31:0] B_10_q0;
output  [3:0] B_11_address0;
output   B_11_ce0;
input  [31:0] B_11_q0;
output  [3:0] B_12_address0;
output   B_12_ce0;
input  [31:0] B_12_q0;
output  [3:0] B_13_address0;
output   B_13_ce0;
input  [31:0] B_13_q0;
output  [3:0] B_14_address0;
output   B_14_ce0;
input  [31:0] B_14_q0;
output  [3:0] B_15_address0;
output   B_15_ce0;
input  [31:0] B_15_q0;
output  [7:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
output  [31:0] grp_fu_367_p_din0;
output  [31:0] grp_fu_367_p_din1;
input  [31:0] grp_fu_367_p_dout0;
output   grp_fu_367_p_ce;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln67_fu_770_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] bound_cast_fu_743_p1;
reg   [63:0] bound_cast_reg_1678;
reg   [0:0] icmp_ln67_reg_1683;
reg   [0:0] icmp_ln67_reg_1683_pp0_iter2_reg;
wire   [93:0] add_ln67_fu_775_p2;
reg   [93:0] add_ln67_reg_1687;
wire   [0:0] icmp_ln70_fu_784_p2;
reg   [0:0] icmp_ln70_reg_1692;
wire   [63:0] zext_ln70_fu_873_p1;
reg   [63:0] zext_ln70_reg_1699;
wire   [63:0] p_cast24_fu_901_p1;
reg   [63:0] p_cast24_reg_1735;
reg   [1:0] indvars_iv32_udiv_cast2_reg_1751;
reg   [2:0] indvars_iv32_udiv_cast3_reg_1757;
reg   [2:0] indvars_iv32_udiv_cast3_reg_1757_pp0_iter4_reg;
reg   [3:0] indvars_iv32_udiv_cast_reg_1765;
reg   [3:0] indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg;
wire   [0:0] icmp_ln81_fu_949_p2;
reg   [0:0] icmp_ln81_reg_1797;
wire   [7:0] add_ln83_fu_955_p2;
reg   [7:0] add_ln83_reg_1802;
reg   [7:0] add_ln83_reg_1802_pp0_iter4_reg;
reg   [7:0] add_ln83_reg_1802_pp0_iter5_reg;
reg   [7:0] add_ln83_reg_1802_pp0_iter6_reg;
reg   [7:0] add_ln83_reg_1802_pp0_iter7_reg;
reg   [7:0] add_ln83_reg_1802_pp0_iter8_reg;
reg   [7:0] add_ln83_reg_1802_pp0_iter9_reg;
wire   [30:0] add_ln75_fu_961_p2;
reg   [30:0] add_ln75_reg_1807;
reg  signed [31:0] A_12_load_reg_1872;
reg  signed [31:0] A_13_load_reg_1877;
reg  signed [31:0] A_14_load_reg_1882;
reg  signed [31:0] A_15_load_reg_1887;
reg   [31:0] B_12_load_reg_1952;
reg   [31:0] B_13_load_reg_1968;
reg   [31:0] B_14_load_reg_1984;
reg  signed [31:0] B_15_load_reg_2000;
wire  signed [31:0] tmp_11_fu_972_p11;
reg  signed [31:0] tmp_11_reg_2017;
wire  signed [31:0] tmp_12_fu_995_p9;
reg  signed [31:0] tmp_12_reg_2022;
wire  signed [31:0] select_ln81_fu_1014_p3;
reg  signed [31:0] select_ln81_reg_2027;
reg  signed [31:0] A_load_reg_2032;
reg  signed [31:0] A_1_load_reg_2037;
reg  signed [31:0] A_2_load_reg_2042;
reg  signed [31:0] A_3_load_reg_2047;
reg  signed [31:0] A_4_load_reg_2052;
reg  signed [31:0] A_5_load_reg_2057;
reg  signed [31:0] A_6_load_reg_2062;
reg  signed [31:0] A_7_load_reg_2067;
reg  signed [31:0] A_8_load_reg_2072;
reg  signed [31:0] A_9_load_reg_2077;
reg  signed [31:0] A_10_load_reg_2082;
reg  signed [31:0] A_11_load_reg_2087;
wire  signed [31:0] tmp_fu_1025_p35;
reg  signed [31:0] tmp_reg_2092;
wire  signed [31:0] tmp_1_fu_1092_p33;
reg  signed [31:0] tmp_1_reg_2097;
wire  signed [31:0] tmp_2_fu_1155_p31;
reg  signed [31:0] tmp_2_reg_2102;
wire  signed [31:0] tmp_3_fu_1214_p29;
reg  signed [31:0] tmp_3_reg_2107;
wire  signed [31:0] tmp_4_fu_1269_p27;
reg  signed [31:0] tmp_4_reg_2112;
wire  signed [31:0] tmp_5_fu_1320_p25;
reg  signed [31:0] tmp_5_reg_2117;
wire  signed [31:0] tmp_6_fu_1367_p23;
reg  signed [31:0] tmp_6_reg_2122;
wire  signed [31:0] tmp_7_fu_1410_p21;
reg  signed [31:0] tmp_7_reg_2127;
wire  signed [31:0] tmp_8_fu_1449_p19;
reg  signed [31:0] tmp_8_reg_2132;
wire  signed [31:0] tmp_9_fu_1484_p17;
reg  signed [31:0] tmp_9_reg_2137;
wire  signed [31:0] tmp_s_fu_1515_p15;
reg  signed [31:0] tmp_s_reg_2142;
wire  signed [31:0] tmp_10_fu_1542_p13;
reg  signed [31:0] tmp_10_reg_2147;
reg   [31:0] mul_ln81_6_reg_2152;
wire   [31:0] grp_fu_683_p2;
reg   [31:0] mul_ln81_10_reg_2157;
wire   [31:0] grp_fu_687_p2;
reg   [31:0] mul_ln81_13_reg_2162;
wire   [31:0] grp_fu_691_p2;
reg   [31:0] mul_ln81_15_reg_2167;
wire   [31:0] grp_fu_695_p2;
reg   [31:0] mul_ln81_reg_2172;
wire   [31:0] grp_fu_699_p2;
reg   [31:0] mul_ln81_1_reg_2177;
wire   [31:0] grp_fu_703_p2;
reg   [31:0] mul_ln81_2_reg_2182;
wire   [31:0] grp_fu_707_p2;
reg   [31:0] mul_ln81_3_reg_2187;
wire   [31:0] grp_fu_711_p2;
reg   [31:0] mul_ln81_4_reg_2192;
wire   [31:0] grp_fu_715_p2;
reg   [31:0] mul_ln81_5_reg_2197;
wire   [31:0] grp_fu_719_p2;
reg   [31:0] mul_ln81_7_reg_2202;
wire   [31:0] grp_fu_723_p2;
reg   [31:0] mul_ln81_8_reg_2207;
wire   [31:0] grp_fu_727_p2;
reg   [31:0] mul_ln81_9_reg_2212;
wire   [31:0] grp_fu_731_p2;
reg   [31:0] mul_ln81_11_reg_2217;
wire   [31:0] grp_fu_735_p2;
reg   [31:0] mul_ln81_12_reg_2222;
wire   [31:0] grp_fu_739_p2;
reg   [31:0] mul_ln81_14_reg_2227;
wire   [31:0] add_ln81_12_fu_1573_p2;
reg   [31:0] add_ln81_12_reg_2232;
wire   [31:0] add_ln81_2_fu_1587_p2;
reg   [31:0] add_ln81_2_reg_2237;
wire   [31:0] add_ln81_5_fu_1601_p2;
reg   [31:0] add_ln81_5_reg_2242;
wire   [31:0] add_ln81_13_fu_1621_p2;
reg   [31:0] add_ln81_13_reg_2247;
wire   [31:0] result_fu_1630_p2;
reg   [31:0] result_reg_2252;
reg    ap_condition_exit_pp0_iter3_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln83_fu_1635_p1;
reg   [30:0] j_fu_216;
reg   [30:0] ap_sig_allocacmp_j_7;
wire    ap_loop_init;
reg   [30:0] i_fu_220;
wire   [30:0] select_ln70_1_fu_865_p3;
reg   [63:0] indvar_flatten_fu_224;
wire   [63:0] select_ln70_2_fu_795_p3;
reg   [93:0] indvar_flatten17_fu_228;
reg   [93:0] ap_sig_allocacmp_indvar_flatten17_load;
reg    A_12_ce0_local;
reg    A_13_ce0_local;
reg    A_14_ce0_local;
reg    A_15_ce0_local;
reg    B_12_ce0_local;
reg    B_13_ce0_local;
reg    B_14_ce0_local;
reg    B_15_ce0_local;
reg    A_ce0_local;
reg    A_1_ce0_local;
reg    A_2_ce0_local;
reg    A_3_ce0_local;
reg    A_4_ce0_local;
reg    A_5_ce0_local;
reg    A_6_ce0_local;
reg    A_7_ce0_local;
reg    A_8_ce0_local;
reg    A_9_ce0_local;
reg    A_10_ce0_local;
reg    A_11_ce0_local;
reg    B_ce0_local;
reg    B_1_ce0_local;
reg    B_2_ce0_local;
reg    B_3_ce0_local;
reg    B_4_ce0_local;
reg    B_5_ce0_local;
reg    B_6_ce0_local;
reg    B_7_ce0_local;
reg    B_8_ce0_local;
reg    B_9_ce0_local;
reg    B_10_ce0_local;
reg    B_11_ce0_local;
reg    C_we0_local;
reg    C_ce0_local;
wire   [63:0] add_ln70_1_fu_789_p2;
wire   [31:0] zext_ln75_fu_815_p1;
wire   [0:0] icmp_ln75_1_fu_834_p2;
wire   [0:0] icmp_ln75_fu_819_p2;
wire   [30:0] select_ln67_fu_827_p3;
wire   [0:0] select_ln67_1_fu_839_p3;
wire   [0:0] or_ln70_fu_852_p2;
wire   [30:0] add_ln70_fu_846_p2;
wire   [3:0] empty_fu_881_p1;
wire   [30:0] select_ln70_fu_857_p3;
wire   [3:0] trunc_ln75_1_fu_897_p1;
wire   [26:0] indvars_iv32_udiv_cast1_fu_909_p4;
wire   [7:0] trunc_ln75_fu_893_p1;
wire   [7:0] tmp_13_fu_885_p3;
wire   [31:0] tmp_11_fu_972_p9;
wire   [31:0] tmp_12_fu_995_p7;
wire  signed [31:0] select_ln81_fu_1014_p1;
wire   [31:0] tmp_fu_1025_p33;
wire   [31:0] tmp_1_fu_1092_p31;
wire   [31:0] tmp_2_fu_1155_p29;
wire   [31:0] tmp_3_fu_1214_p27;
wire   [31:0] tmp_4_fu_1269_p25;
wire   [31:0] tmp_5_fu_1320_p23;
wire   [31:0] tmp_6_fu_1367_p21;
wire   [31:0] tmp_7_fu_1410_p19;
wire   [31:0] tmp_8_fu_1449_p17;
wire   [31:0] tmp_9_fu_1484_p15;
wire   [31:0] tmp_s_fu_1515_p13;
wire   [31:0] tmp_10_fu_1542_p11;
wire   [31:0] add_ln81_11_fu_1569_p2;
wire   [31:0] add_ln81_10_fu_1565_p2;
wire   [31:0] add_ln81_1_fu_1583_p2;
wire   [31:0] add_ln81_fu_1579_p2;
wire   [31:0] add_ln81_4_fu_1597_p2;
wire   [31:0] add_ln81_3_fu_1593_p2;
wire   [31:0] add_ln81_8_fu_1611_p2;
wire   [31:0] add_ln81_7_fu_1607_p2;
wire   [31:0] add_ln81_9_fu_1615_p2;
wire   [31:0] add_ln81_6_fu_1626_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_11_fu_972_p1;
wire   [1:0] tmp_11_fu_972_p3;
wire  signed [1:0] tmp_11_fu_972_p5;
wire  signed [1:0] tmp_11_fu_972_p7;
wire   [1:0] tmp_12_fu_995_p1;
wire   [1:0] tmp_12_fu_995_p3;
wire  signed [1:0] tmp_12_fu_995_p5;
wire   [3:0] tmp_fu_1025_p1;
wire   [3:0] tmp_fu_1025_p3;
wire   [3:0] tmp_fu_1025_p5;
wire   [3:0] tmp_fu_1025_p7;
wire   [3:0] tmp_fu_1025_p9;
wire   [3:0] tmp_fu_1025_p11;
wire   [3:0] tmp_fu_1025_p13;
wire   [3:0] tmp_fu_1025_p15;
wire  signed [3:0] tmp_fu_1025_p17;
wire  signed [3:0] tmp_fu_1025_p19;
wire  signed [3:0] tmp_fu_1025_p21;
wire  signed [3:0] tmp_fu_1025_p23;
wire  signed [3:0] tmp_fu_1025_p25;
wire  signed [3:0] tmp_fu_1025_p27;
wire  signed [3:0] tmp_fu_1025_p29;
wire  signed [3:0] tmp_fu_1025_p31;
wire   [3:0] tmp_1_fu_1092_p1;
wire   [3:0] tmp_1_fu_1092_p3;
wire   [3:0] tmp_1_fu_1092_p5;
wire   [3:0] tmp_1_fu_1092_p7;
wire   [3:0] tmp_1_fu_1092_p9;
wire   [3:0] tmp_1_fu_1092_p11;
wire   [3:0] tmp_1_fu_1092_p13;
wire   [3:0] tmp_1_fu_1092_p15;
wire  signed [3:0] tmp_1_fu_1092_p17;
wire  signed [3:0] tmp_1_fu_1092_p19;
wire  signed [3:0] tmp_1_fu_1092_p21;
wire  signed [3:0] tmp_1_fu_1092_p23;
wire  signed [3:0] tmp_1_fu_1092_p25;
wire  signed [3:0] tmp_1_fu_1092_p27;
wire  signed [3:0] tmp_1_fu_1092_p29;
wire   [3:0] tmp_2_fu_1155_p1;
wire   [3:0] tmp_2_fu_1155_p3;
wire   [3:0] tmp_2_fu_1155_p5;
wire   [3:0] tmp_2_fu_1155_p7;
wire   [3:0] tmp_2_fu_1155_p9;
wire   [3:0] tmp_2_fu_1155_p11;
wire   [3:0] tmp_2_fu_1155_p13;
wire   [3:0] tmp_2_fu_1155_p15;
wire  signed [3:0] tmp_2_fu_1155_p17;
wire  signed [3:0] tmp_2_fu_1155_p19;
wire  signed [3:0] tmp_2_fu_1155_p21;
wire  signed [3:0] tmp_2_fu_1155_p23;
wire  signed [3:0] tmp_2_fu_1155_p25;
wire  signed [3:0] tmp_2_fu_1155_p27;
wire   [3:0] tmp_3_fu_1214_p1;
wire   [3:0] tmp_3_fu_1214_p3;
wire   [3:0] tmp_3_fu_1214_p5;
wire   [3:0] tmp_3_fu_1214_p7;
wire   [3:0] tmp_3_fu_1214_p9;
wire   [3:0] tmp_3_fu_1214_p11;
wire   [3:0] tmp_3_fu_1214_p13;
wire   [3:0] tmp_3_fu_1214_p15;
wire  signed [3:0] tmp_3_fu_1214_p17;
wire  signed [3:0] tmp_3_fu_1214_p19;
wire  signed [3:0] tmp_3_fu_1214_p21;
wire  signed [3:0] tmp_3_fu_1214_p23;
wire  signed [3:0] tmp_3_fu_1214_p25;
wire   [3:0] tmp_4_fu_1269_p1;
wire   [3:0] tmp_4_fu_1269_p3;
wire   [3:0] tmp_4_fu_1269_p5;
wire   [3:0] tmp_4_fu_1269_p7;
wire   [3:0] tmp_4_fu_1269_p9;
wire   [3:0] tmp_4_fu_1269_p11;
wire   [3:0] tmp_4_fu_1269_p13;
wire   [3:0] tmp_4_fu_1269_p15;
wire  signed [3:0] tmp_4_fu_1269_p17;
wire  signed [3:0] tmp_4_fu_1269_p19;
wire  signed [3:0] tmp_4_fu_1269_p21;
wire  signed [3:0] tmp_4_fu_1269_p23;
wire   [3:0] tmp_5_fu_1320_p1;
wire   [3:0] tmp_5_fu_1320_p3;
wire   [3:0] tmp_5_fu_1320_p5;
wire   [3:0] tmp_5_fu_1320_p7;
wire   [3:0] tmp_5_fu_1320_p9;
wire   [3:0] tmp_5_fu_1320_p11;
wire   [3:0] tmp_5_fu_1320_p13;
wire   [3:0] tmp_5_fu_1320_p15;
wire  signed [3:0] tmp_5_fu_1320_p17;
wire  signed [3:0] tmp_5_fu_1320_p19;
wire  signed [3:0] tmp_5_fu_1320_p21;
wire   [3:0] tmp_6_fu_1367_p1;
wire   [3:0] tmp_6_fu_1367_p3;
wire   [3:0] tmp_6_fu_1367_p5;
wire   [3:0] tmp_6_fu_1367_p7;
wire   [3:0] tmp_6_fu_1367_p9;
wire   [3:0] tmp_6_fu_1367_p11;
wire   [3:0] tmp_6_fu_1367_p13;
wire   [3:0] tmp_6_fu_1367_p15;
wire  signed [3:0] tmp_6_fu_1367_p17;
wire  signed [3:0] tmp_6_fu_1367_p19;
wire   [3:0] tmp_7_fu_1410_p1;
wire   [3:0] tmp_7_fu_1410_p3;
wire   [3:0] tmp_7_fu_1410_p5;
wire   [3:0] tmp_7_fu_1410_p7;
wire   [3:0] tmp_7_fu_1410_p9;
wire   [3:0] tmp_7_fu_1410_p11;
wire   [3:0] tmp_7_fu_1410_p13;
wire   [3:0] tmp_7_fu_1410_p15;
wire  signed [3:0] tmp_7_fu_1410_p17;
wire   [2:0] tmp_8_fu_1449_p1;
wire   [2:0] tmp_8_fu_1449_p3;
wire   [2:0] tmp_8_fu_1449_p5;
wire   [2:0] tmp_8_fu_1449_p7;
wire  signed [2:0] tmp_8_fu_1449_p9;
wire  signed [2:0] tmp_8_fu_1449_p11;
wire  signed [2:0] tmp_8_fu_1449_p13;
wire  signed [2:0] tmp_8_fu_1449_p15;
wire   [2:0] tmp_9_fu_1484_p1;
wire   [2:0] tmp_9_fu_1484_p3;
wire   [2:0] tmp_9_fu_1484_p5;
wire   [2:0] tmp_9_fu_1484_p7;
wire  signed [2:0] tmp_9_fu_1484_p9;
wire  signed [2:0] tmp_9_fu_1484_p11;
wire  signed [2:0] tmp_9_fu_1484_p13;
wire   [2:0] tmp_s_fu_1515_p1;
wire   [2:0] tmp_s_fu_1515_p3;
wire   [2:0] tmp_s_fu_1515_p5;
wire   [2:0] tmp_s_fu_1515_p7;
wire  signed [2:0] tmp_s_fu_1515_p9;
wire  signed [2:0] tmp_s_fu_1515_p11;
wire   [2:0] tmp_10_fu_1542_p1;
wire   [2:0] tmp_10_fu_1542_p3;
wire   [2:0] tmp_10_fu_1542_p5;
wire   [2:0] tmp_10_fu_1542_p7;
wire  signed [2:0] tmp_10_fu_1542_p9;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 j_fu_216 = 31'd0;
#0 i_fu_220 = 31'd0;
#0 indvar_flatten_fu_224 = 64'd0;
#0 indvar_flatten17_fu_228 = 94'd0;
#0 ap_done_reg = 1'b0;
end

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_13_load_reg_1877),
    .din1(tmp_12_reg_2022),
    .ce(1'b1),
    .dout(grp_fu_683_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_14_load_reg_1882),
    .din1(select_ln81_reg_2027),
    .ce(1'b1),
    .dout(grp_fu_687_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_15_load_reg_2000),
    .din1(A_15_load_reg_1887),
    .ce(1'b1),
    .dout(grp_fu_691_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_7_load_reg_2067),
    .din1(tmp_7_reg_2127),
    .ce(1'b1),
    .dout(grp_fu_695_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_11_load_reg_2087),
    .din1(tmp_10_reg_2147),
    .ce(1'b1),
    .dout(grp_fu_699_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_8_load_reg_2072),
    .din1(tmp_8_reg_2132),
    .ce(1'b1),
    .dout(grp_fu_703_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_2_load_reg_2042),
    .din1(tmp_2_reg_2102),
    .ce(1'b1),
    .dout(grp_fu_707_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_load_reg_2037),
    .din1(tmp_1_reg_2097),
    .ce(1'b1),
    .dout(grp_fu_711_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_5_load_reg_2057),
    .din1(tmp_5_reg_2117),
    .ce(1'b1),
    .dout(grp_fu_715_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_3_load_reg_2047),
    .din1(tmp_3_reg_2107),
    .ce(1'b1),
    .dout(grp_fu_719_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_10_load_reg_2082),
    .din1(tmp_s_reg_2142),
    .ce(1'b1),
    .dout(grp_fu_723_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_4_load_reg_2052),
    .din1(tmp_4_reg_2112),
    .ce(1'b1),
    .dout(grp_fu_727_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_6_load_reg_2062),
    .din1(tmp_6_reg_2122),
    .ce(1'b1),
    .dout(grp_fu_731_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_2032),
    .din1(tmp_reg_2092),
    .ce(1'b1),
    .dout(grp_fu_735_p2)
);

matmul_partition_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_9_load_reg_2077),
    .din1(tmp_9_reg_2137),
    .ce(1'b1),
    .dout(grp_fu_739_p2)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U57(
    .din0(B_12_q0),
    .din1(B_13_q0),
    .din2(B_14_q0),
    .din3(B_15_q0),
    .def(tmp_11_fu_972_p9),
    .sel(indvars_iv32_udiv_cast2_reg_1751),
    .dout(tmp_11_fu_972_p11)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_7_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_U58(
    .din0(B_13_q0),
    .din1(B_14_q0),
    .din2(B_15_q0),
    .def(tmp_12_fu_995_p7),
    .sel(indvars_iv32_udiv_cast2_reg_1751),
    .dout(tmp_12_fu_995_p9)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U59(
    .din0(B_q0),
    .din1(B_1_q0),
    .din2(B_2_q0),
    .din3(B_3_q0),
    .din4(B_4_q0),
    .din5(B_5_q0),
    .din6(B_6_q0),
    .din7(B_7_q0),
    .din8(B_8_q0),
    .din9(B_9_q0),
    .din10(B_10_q0),
    .din11(B_11_q0),
    .din12(B_12_load_reg_1952),
    .din13(B_13_load_reg_1968),
    .din14(B_14_load_reg_1984),
    .din15(B_15_load_reg_2000),
    .def(tmp_fu_1025_p33),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_fu_1025_p35)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_31_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_31_4_32_1_1_U60(
    .din0(B_1_q0),
    .din1(B_2_q0),
    .din2(B_3_q0),
    .din3(B_4_q0),
    .din4(B_5_q0),
    .din5(B_6_q0),
    .din6(B_7_q0),
    .din7(B_8_q0),
    .din8(B_9_q0),
    .din9(B_10_q0),
    .din10(B_11_q0),
    .din11(B_12_load_reg_1952),
    .din12(B_13_load_reg_1968),
    .din13(B_14_load_reg_1984),
    .din14(B_15_load_reg_2000),
    .def(tmp_1_fu_1092_p31),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_1_fu_1092_p33)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_29_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_29_4_32_1_1_U61(
    .din0(B_2_q0),
    .din1(B_3_q0),
    .din2(B_4_q0),
    .din3(B_5_q0),
    .din4(B_6_q0),
    .din5(B_7_q0),
    .din6(B_8_q0),
    .din7(B_9_q0),
    .din8(B_10_q0),
    .din9(B_11_q0),
    .din10(B_12_load_reg_1952),
    .din11(B_13_load_reg_1968),
    .din12(B_14_load_reg_1984),
    .din13(B_15_load_reg_2000),
    .def(tmp_2_fu_1155_p29),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_2_fu_1155_p31)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_27_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_27_4_32_1_1_U62(
    .din0(B_3_q0),
    .din1(B_4_q0),
    .din2(B_5_q0),
    .din3(B_6_q0),
    .din4(B_7_q0),
    .din5(B_8_q0),
    .din6(B_9_q0),
    .din7(B_10_q0),
    .din8(B_11_q0),
    .din9(B_12_load_reg_1952),
    .din10(B_13_load_reg_1968),
    .din11(B_14_load_reg_1984),
    .din12(B_15_load_reg_2000),
    .def(tmp_3_fu_1214_p27),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_3_fu_1214_p29)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_25_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_25_4_32_1_1_U63(
    .din0(B_4_q0),
    .din1(B_5_q0),
    .din2(B_6_q0),
    .din3(B_7_q0),
    .din4(B_8_q0),
    .din5(B_9_q0),
    .din6(B_10_q0),
    .din7(B_11_q0),
    .din8(B_12_load_reg_1952),
    .din9(B_13_load_reg_1968),
    .din10(B_14_load_reg_1984),
    .din11(B_15_load_reg_2000),
    .def(tmp_4_fu_1269_p25),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_4_fu_1269_p27)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_23_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_23_4_32_1_1_U64(
    .din0(B_5_q0),
    .din1(B_6_q0),
    .din2(B_7_q0),
    .din3(B_8_q0),
    .din4(B_9_q0),
    .din5(B_10_q0),
    .din6(B_11_q0),
    .din7(B_12_load_reg_1952),
    .din8(B_13_load_reg_1968),
    .din9(B_14_load_reg_1984),
    .din10(B_15_load_reg_2000),
    .def(tmp_5_fu_1320_p23),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_5_fu_1320_p25)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_21_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_21_4_32_1_1_U65(
    .din0(B_6_q0),
    .din1(B_7_q0),
    .din2(B_8_q0),
    .din3(B_9_q0),
    .din4(B_10_q0),
    .din5(B_11_q0),
    .din6(B_12_load_reg_1952),
    .din7(B_13_load_reg_1968),
    .din8(B_14_load_reg_1984),
    .din9(B_15_load_reg_2000),
    .def(tmp_6_fu_1367_p21),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_6_fu_1367_p23)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_19_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_19_4_32_1_1_U66(
    .din0(B_7_q0),
    .din1(B_8_q0),
    .din2(B_9_q0),
    .din3(B_10_q0),
    .din4(B_11_q0),
    .din5(B_12_load_reg_1952),
    .din6(B_13_load_reg_1968),
    .din7(B_14_load_reg_1984),
    .din8(B_15_load_reg_2000),
    .def(tmp_7_fu_1410_p19),
    .sel(indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg),
    .dout(tmp_7_fu_1410_p21)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_17_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_17_3_32_1_1_U67(
    .din0(B_8_q0),
    .din1(B_9_q0),
    .din2(B_10_q0),
    .din3(B_11_q0),
    .din4(B_12_load_reg_1952),
    .din5(B_13_load_reg_1968),
    .din6(B_14_load_reg_1984),
    .din7(B_15_load_reg_2000),
    .def(tmp_8_fu_1449_p17),
    .sel(indvars_iv32_udiv_cast3_reg_1757_pp0_iter4_reg),
    .dout(tmp_8_fu_1449_p19)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_15_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_15_3_32_1_1_U68(
    .din0(B_9_q0),
    .din1(B_10_q0),
    .din2(B_11_q0),
    .din3(B_12_load_reg_1952),
    .din4(B_13_load_reg_1968),
    .din5(B_14_load_reg_1984),
    .din6(B_15_load_reg_2000),
    .def(tmp_9_fu_1484_p15),
    .sel(indvars_iv32_udiv_cast3_reg_1757_pp0_iter4_reg),
    .dout(tmp_9_fu_1484_p17)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_13_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_13_3_32_1_1_U69(
    .din0(B_10_q0),
    .din1(B_11_q0),
    .din2(B_12_load_reg_1952),
    .din3(B_13_load_reg_1968),
    .din4(B_14_load_reg_1984),
    .din5(B_15_load_reg_2000),
    .def(tmp_s_fu_1515_p13),
    .sel(indvars_iv32_udiv_cast3_reg_1757_pp0_iter4_reg),
    .dout(tmp_s_fu_1515_p15)
);

(* dissolve_hierarchy = "yes" *) matmul_partition_sparsemux_11_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_11_3_32_1_1_U70(
    .din0(B_11_q0),
    .din1(B_12_load_reg_1952),
    .din2(B_13_load_reg_1968),
    .din3(B_14_load_reg_1984),
    .din4(B_15_load_reg_2000),
    .def(tmp_10_fu_1542_p11),
    .sel(indvars_iv32_udiv_cast3_reg_1757_pp0_iter4_reg),
    .dout(tmp_10_fu_1542_p13)
);

matmul_partition_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_220 <= 31'd0;
        end else if (((icmp_ln67_reg_1683_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            i_fu_220 <= select_ln70_1_fu_865_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten17_fu_228 <= 94'd0;
        end else if (((icmp_ln67_reg_1683 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            indvar_flatten17_fu_228 <= add_ln67_reg_1687;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten_fu_224 <= 64'd0;
        end else if (((icmp_ln67_reg_1683 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            indvar_flatten_fu_224 <= select_ln70_2_fu_795_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_216 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            j_fu_216 <= add_ln75_reg_1807;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        A_10_load_reg_2082 <= A_10_q0;
        A_11_load_reg_2087 <= A_11_q0;
        A_12_load_reg_1872 <= A_12_q0;
        A_13_load_reg_1877 <= A_13_q0;
        A_14_load_reg_1882 <= A_14_q0;
        A_15_load_reg_1887 <= A_15_q0;
        A_1_load_reg_2037 <= A_1_q0;
        A_2_load_reg_2042 <= A_2_q0;
        A_3_load_reg_2047 <= A_3_q0;
        A_4_load_reg_2052 <= A_4_q0;
        A_5_load_reg_2057 <= A_5_q0;
        A_6_load_reg_2062 <= A_6_q0;
        A_7_load_reg_2067 <= A_7_q0;
        A_8_load_reg_2072 <= A_8_q0;
        A_9_load_reg_2077 <= A_9_q0;
        A_load_reg_2032 <= A_q0;
        B_12_load_reg_1952 <= B_12_q0;
        B_13_load_reg_1968 <= B_13_q0;
        B_14_load_reg_1984 <= B_14_q0;
        B_15_load_reg_2000 <= B_15_q0;
        add_ln75_reg_1807 <= add_ln75_fu_961_p2;
        add_ln81_12_reg_2232 <= add_ln81_12_fu_1573_p2;
        add_ln81_13_reg_2247 <= add_ln81_13_fu_1621_p2;
        add_ln81_2_reg_2237 <= add_ln81_2_fu_1587_p2;
        add_ln81_5_reg_2242 <= add_ln81_5_fu_1601_p2;
        add_ln83_reg_1802 <= add_ln83_fu_955_p2;
        add_ln83_reg_1802_pp0_iter4_reg <= add_ln83_reg_1802;
        add_ln83_reg_1802_pp0_iter5_reg <= add_ln83_reg_1802_pp0_iter4_reg;
        add_ln83_reg_1802_pp0_iter6_reg <= add_ln83_reg_1802_pp0_iter5_reg;
        add_ln83_reg_1802_pp0_iter7_reg <= add_ln83_reg_1802_pp0_iter6_reg;
        add_ln83_reg_1802_pp0_iter8_reg <= add_ln83_reg_1802_pp0_iter7_reg;
        add_ln83_reg_1802_pp0_iter9_reg <= add_ln83_reg_1802_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln67_reg_1683_pp0_iter2_reg <= icmp_ln67_reg_1683;
        icmp_ln70_reg_1692 <= icmp_ln70_fu_784_p2;
        icmp_ln81_reg_1797 <= icmp_ln81_fu_949_p2;
        indvars_iv32_udiv_cast2_reg_1751 <= {{select_ln70_fu_857_p3[5:4]}};
        indvars_iv32_udiv_cast3_reg_1757 <= {{select_ln70_fu_857_p3[6:4]}};
        indvars_iv32_udiv_cast3_reg_1757_pp0_iter4_reg <= indvars_iv32_udiv_cast3_reg_1757;
        indvars_iv32_udiv_cast_reg_1765 <= {{select_ln70_fu_857_p3[7:4]}};
        indvars_iv32_udiv_cast_reg_1765_pp0_iter4_reg <= indvars_iv32_udiv_cast_reg_1765;
        mul_ln81_10_reg_2157 <= grp_fu_683_p2;
        mul_ln81_11_reg_2217 <= grp_fu_731_p2;
        mul_ln81_12_reg_2222 <= grp_fu_735_p2;
        mul_ln81_13_reg_2162 <= grp_fu_687_p2;
        mul_ln81_14_reg_2227 <= grp_fu_739_p2;
        mul_ln81_15_reg_2167 <= grp_fu_691_p2;
        mul_ln81_1_reg_2177 <= grp_fu_699_p2;
        mul_ln81_2_reg_2182 <= grp_fu_703_p2;
        mul_ln81_3_reg_2187 <= grp_fu_707_p2;
        mul_ln81_4_reg_2192 <= grp_fu_711_p2;
        mul_ln81_5_reg_2197 <= grp_fu_715_p2;
        mul_ln81_6_reg_2152 <= grp_fu_367_p_dout0;
        mul_ln81_7_reg_2202 <= grp_fu_719_p2;
        mul_ln81_8_reg_2207 <= grp_fu_723_p2;
        mul_ln81_9_reg_2212 <= grp_fu_727_p2;
        mul_ln81_reg_2172 <= grp_fu_695_p2;
        p_cast24_reg_1735[3 : 0] <= p_cast24_fu_901_p1[3 : 0];
        result_reg_2252 <= result_fu_1630_p2;
        select_ln81_reg_2027 <= select_ln81_fu_1014_p3;
        tmp_10_reg_2147 <= tmp_10_fu_1542_p13;
        tmp_11_reg_2017 <= tmp_11_fu_972_p11;
        tmp_12_reg_2022 <= tmp_12_fu_995_p9;
        tmp_1_reg_2097 <= tmp_1_fu_1092_p33;
        tmp_2_reg_2102 <= tmp_2_fu_1155_p31;
        tmp_3_reg_2107 <= tmp_3_fu_1214_p29;
        tmp_4_reg_2112 <= tmp_4_fu_1269_p27;
        tmp_5_reg_2117 <= tmp_5_fu_1320_p25;
        tmp_6_reg_2122 <= tmp_6_fu_1367_p23;
        tmp_7_reg_2127 <= tmp_7_fu_1410_p21;
        tmp_8_reg_2132 <= tmp_8_fu_1449_p19;
        tmp_9_reg_2137 <= tmp_9_fu_1484_p17;
        tmp_reg_2092 <= tmp_fu_1025_p35;
        tmp_s_reg_2142 <= tmp_s_fu_1515_p15;
        zext_ln70_reg_1699[30 : 0] <= zext_ln70_fu_873_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln67_reg_1687 <= add_ln67_fu_775_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bound_cast_reg_1678[62 : 0] <= bound_cast_fu_743_p1[62 : 0];
        icmp_ln67_reg_1683 <= icmp_ln67_fu_770_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_10_ce0_local = 1'b1;
    end else begin
        A_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_11_ce0_local = 1'b1;
    end else begin
        A_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_12_ce0_local = 1'b1;
    end else begin
        A_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_13_ce0_local = 1'b1;
    end else begin
        A_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_14_ce0_local = 1'b1;
    end else begin
        A_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_15_ce0_local = 1'b1;
    end else begin
        A_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_1_ce0_local = 1'b1;
    end else begin
        A_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_2_ce0_local = 1'b1;
    end else begin
        A_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_3_ce0_local = 1'b1;
    end else begin
        A_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_4_ce0_local = 1'b1;
    end else begin
        A_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_5_ce0_local = 1'b1;
    end else begin
        A_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_6_ce0_local = 1'b1;
    end else begin
        A_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_7_ce0_local = 1'b1;
    end else begin
        A_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_8_ce0_local = 1'b1;
    end else begin
        A_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_9_ce0_local = 1'b1;
    end else begin
        A_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        A_ce0_local = 1'b1;
    end else begin
        A_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_10_ce0_local = 1'b1;
    end else begin
        B_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_11_ce0_local = 1'b1;
    end else begin
        B_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        B_12_ce0_local = 1'b1;
    end else begin
        B_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        B_13_ce0_local = 1'b1;
    end else begin
        B_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        B_14_ce0_local = 1'b1;
    end else begin
        B_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        B_15_ce0_local = 1'b1;
    end else begin
        B_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_1_ce0_local = 1'b1;
    end else begin
        B_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_2_ce0_local = 1'b1;
    end else begin
        B_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_3_ce0_local = 1'b1;
    end else begin
        B_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_4_ce0_local = 1'b1;
    end else begin
        B_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_5_ce0_local = 1'b1;
    end else begin
        B_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_6_ce0_local = 1'b1;
    end else begin
        B_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_7_ce0_local = 1'b1;
    end else begin
        B_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_8_ce0_local = 1'b1;
    end else begin
        B_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_9_ce0_local = 1'b1;
    end else begin
        B_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        B_ce0_local = 1'b1;
    end else begin
        B_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        C_ce0_local = 1'b1;
    end else begin
        C_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        C_we0_local = 1'b1;
    end else begin
        C_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_770_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln67_reg_1683_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln67_reg_1683 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten17_load = add_ln67_reg_1687;
    end else begin
        ap_sig_allocacmp_indvar_flatten17_load = indvar_flatten17_fu_228;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_j_7 = add_ln75_reg_1807;
    end else begin
        ap_sig_allocacmp_j_7 = j_fu_216;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_10_address0 = zext_ln70_reg_1699;

assign A_10_ce0 = A_10_ce0_local;

assign A_11_address0 = zext_ln70_reg_1699;

assign A_11_ce0 = A_11_ce0_local;

assign A_12_address0 = zext_ln70_fu_873_p1;

assign A_12_ce0 = A_12_ce0_local;

assign A_13_address0 = zext_ln70_fu_873_p1;

assign A_13_ce0 = A_13_ce0_local;

assign A_14_address0 = zext_ln70_fu_873_p1;

assign A_14_ce0 = A_14_ce0_local;

assign A_15_address0 = zext_ln70_fu_873_p1;

assign A_15_ce0 = A_15_ce0_local;

assign A_1_address0 = zext_ln70_reg_1699;

assign A_1_ce0 = A_1_ce0_local;

assign A_2_address0 = zext_ln70_reg_1699;

assign A_2_ce0 = A_2_ce0_local;

assign A_3_address0 = zext_ln70_reg_1699;

assign A_3_ce0 = A_3_ce0_local;

assign A_4_address0 = zext_ln70_reg_1699;

assign A_4_ce0 = A_4_ce0_local;

assign A_5_address0 = zext_ln70_reg_1699;

assign A_5_ce0 = A_5_ce0_local;

assign A_6_address0 = zext_ln70_reg_1699;

assign A_6_ce0 = A_6_ce0_local;

assign A_7_address0 = zext_ln70_reg_1699;

assign A_7_ce0 = A_7_ce0_local;

assign A_8_address0 = zext_ln70_reg_1699;

assign A_8_ce0 = A_8_ce0_local;

assign A_9_address0 = zext_ln70_reg_1699;

assign A_9_ce0 = A_9_ce0_local;

assign A_address0 = zext_ln70_reg_1699;

assign A_ce0 = A_ce0_local;

assign B_10_address0 = p_cast24_reg_1735;

assign B_10_ce0 = B_10_ce0_local;

assign B_11_address0 = p_cast24_reg_1735;

assign B_11_ce0 = B_11_ce0_local;

assign B_12_address0 = p_cast24_fu_901_p1;

assign B_12_ce0 = B_12_ce0_local;

assign B_13_address0 = p_cast24_fu_901_p1;

assign B_13_ce0 = B_13_ce0_local;

assign B_14_address0 = p_cast24_fu_901_p1;

assign B_14_ce0 = B_14_ce0_local;

assign B_15_address0 = p_cast24_fu_901_p1;

assign B_15_ce0 = B_15_ce0_local;

assign B_1_address0 = p_cast24_reg_1735;

assign B_1_ce0 = B_1_ce0_local;

assign B_2_address0 = p_cast24_reg_1735;

assign B_2_ce0 = B_2_ce0_local;

assign B_3_address0 = p_cast24_reg_1735;

assign B_3_ce0 = B_3_ce0_local;

assign B_4_address0 = p_cast24_reg_1735;

assign B_4_ce0 = B_4_ce0_local;

assign B_5_address0 = p_cast24_reg_1735;

assign B_5_ce0 = B_5_ce0_local;

assign B_6_address0 = p_cast24_reg_1735;

assign B_6_ce0 = B_6_ce0_local;

assign B_7_address0 = p_cast24_reg_1735;

assign B_7_ce0 = B_7_ce0_local;

assign B_8_address0 = p_cast24_reg_1735;

assign B_8_ce0 = B_8_ce0_local;

assign B_9_address0 = p_cast24_reg_1735;

assign B_9_ce0 = B_9_ce0_local;

assign B_address0 = p_cast24_reg_1735;

assign B_ce0 = B_ce0_local;

assign C_address0 = zext_ln83_fu_1635_p1;

assign C_ce0 = C_ce0_local;

assign C_d0 = result_reg_2252;

assign C_we0 = C_we0_local;

assign add_ln67_fu_775_p2 = (ap_sig_allocacmp_indvar_flatten17_load + 94'd1);

assign add_ln70_1_fu_789_p2 = (indvar_flatten_fu_224 + 64'd1);

assign add_ln70_fu_846_p2 = (select_ln67_fu_827_p3 + 31'd1);

assign add_ln75_fu_961_p2 = (select_ln70_fu_857_p3 + 31'd1);

assign add_ln81_10_fu_1565_p2 = (mul_ln81_6_reg_2152 + mul_ln81_10_reg_2157);

assign add_ln81_11_fu_1569_p2 = (mul_ln81_13_reg_2162 + mul_ln81_15_reg_2167);

assign add_ln81_12_fu_1573_p2 = (add_ln81_11_fu_1569_p2 + add_ln81_10_fu_1565_p2);

assign add_ln81_13_fu_1621_p2 = (add_ln81_12_reg_2232 + add_ln81_9_fu_1615_p2);

assign add_ln81_1_fu_1583_p2 = (mul_ln81_3_reg_2187 + mul_ln81_7_reg_2202);

assign add_ln81_2_fu_1587_p2 = (add_ln81_1_fu_1583_p2 + add_ln81_fu_1579_p2);

assign add_ln81_3_fu_1593_p2 = (mul_ln81_9_reg_2212 + mul_ln81_5_reg_2197);

assign add_ln81_4_fu_1597_p2 = (mul_ln81_11_reg_2217 + mul_ln81_reg_2172);

assign add_ln81_5_fu_1601_p2 = (add_ln81_4_fu_1597_p2 + add_ln81_3_fu_1593_p2);

assign add_ln81_6_fu_1626_p2 = (add_ln81_5_reg_2242 + add_ln81_2_reg_2237);

assign add_ln81_7_fu_1607_p2 = (mul_ln81_2_reg_2182 + mul_ln81_14_reg_2227);

assign add_ln81_8_fu_1611_p2 = (mul_ln81_8_reg_2207 + mul_ln81_1_reg_2177);

assign add_ln81_9_fu_1615_p2 = (add_ln81_8_fu_1611_p2 + add_ln81_7_fu_1607_p2);

assign add_ln81_fu_1579_p2 = (mul_ln81_4_reg_2192 + mul_ln81_12_reg_2222);

assign add_ln83_fu_955_p2 = (trunc_ln75_fu_893_p1 + tmp_13_fu_885_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign bound_cast_fu_743_p1 = bound;

assign empty_fu_881_p1 = select_ln70_1_fu_865_p3[3:0];

assign grp_fu_367_p_ce = 1'b1;

assign grp_fu_367_p_din0 = A_12_load_reg_1872;

assign grp_fu_367_p_din1 = tmp_11_reg_2017;

assign icmp_ln67_fu_770_p2 = ((ap_sig_allocacmp_indvar_flatten17_load == bound6) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_784_p2 = ((indvar_flatten_fu_224 == bound_cast_reg_1678) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_834_p2 = ((dim == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_819_p2 = ((zext_ln75_fu_815_p1 == dim) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_949_p2 = ((indvars_iv32_udiv_cast1_fu_909_p4 == 27'd1) ? 1'b1 : 1'b0);

assign indvars_iv32_udiv_cast1_fu_909_p4 = {{select_ln70_fu_857_p3[30:4]}};

assign or_ln70_fu_852_p2 = (select_ln67_1_fu_839_p3 | icmp_ln70_reg_1692);

assign p_cast24_fu_901_p1 = trunc_ln75_1_fu_897_p1;

assign result_fu_1630_p2 = (add_ln81_13_reg_2247 + add_ln81_6_fu_1626_p2);

assign select_ln67_1_fu_839_p3 = ((icmp_ln70_reg_1692[0:0] == 1'b1) ? icmp_ln75_1_fu_834_p2 : icmp_ln75_fu_819_p2);

assign select_ln67_fu_827_p3 = ((icmp_ln70_reg_1692[0:0] == 1'b1) ? 31'd0 : i_fu_220);

assign select_ln70_1_fu_865_p3 = ((select_ln67_1_fu_839_p3[0:0] == 1'b1) ? add_ln70_fu_846_p2 : select_ln67_fu_827_p3);

assign select_ln70_2_fu_795_p3 = ((icmp_ln70_fu_784_p2[0:0] == 1'b1) ? 64'd1 : add_ln70_1_fu_789_p2);

assign select_ln70_fu_857_p3 = ((or_ln70_fu_852_p2[0:0] == 1'b1) ? 31'd0 : ap_sig_allocacmp_j_7);

assign select_ln81_fu_1014_p1 = B_15_q0;

assign select_ln81_fu_1014_p3 = ((icmp_ln81_reg_1797[0:0] == 1'b1) ? select_ln81_fu_1014_p1 : B_14_q0);

assign tmp_10_fu_1542_p11 = 'bx;

assign tmp_11_fu_972_p9 = 'bx;

assign tmp_12_fu_995_p7 = 'bx;

assign tmp_13_fu_885_p3 = {{empty_fu_881_p1}, {4'd0}};

assign tmp_1_fu_1092_p31 = 'bx;

assign tmp_2_fu_1155_p29 = 'bx;

assign tmp_3_fu_1214_p27 = 'bx;

assign tmp_4_fu_1269_p25 = 'bx;

assign tmp_5_fu_1320_p23 = 'bx;

assign tmp_6_fu_1367_p21 = 'bx;

assign tmp_7_fu_1410_p19 = 'bx;

assign tmp_8_fu_1449_p17 = 'bx;

assign tmp_9_fu_1484_p15 = 'bx;

assign tmp_fu_1025_p33 = 'bx;

assign tmp_s_fu_1515_p13 = 'bx;

assign trunc_ln75_1_fu_897_p1 = select_ln70_fu_857_p3[3:0];

assign trunc_ln75_fu_893_p1 = select_ln70_fu_857_p3[7:0];

assign zext_ln70_fu_873_p1 = select_ln70_1_fu_865_p3;

assign zext_ln75_fu_815_p1 = ap_sig_allocacmp_j_7;

assign zext_ln83_fu_1635_p1 = add_ln83_reg_1802_pp0_iter9_reg;

always @ (posedge ap_clk) begin
    bound_cast_reg_1678[63] <= 1'b0;
    zext_ln70_reg_1699[63:31] <= 33'b000000000000000000000000000000000;
    p_cast24_reg_1735[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matmul_partition_matmul_partition_Pipeline_loop2_lreorder1_lreorder2
