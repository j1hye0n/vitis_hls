// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_word_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_4_address0,
        s_4_ce0,
        s_4_we0,
        s_4_d0,
        s_4_address1,
        s_4_ce1,
        s_4_q1,
        s_3_address0,
        s_3_ce0,
        s_3_we0,
        s_3_d0,
        s_3_address1,
        s_3_ce1,
        s_3_q1,
        s_2_address0,
        s_2_ce0,
        s_2_we0,
        s_2_d0,
        s_2_address1,
        s_2_ce1,
        s_2_q1,
        s_1_address0,
        s_1_ce0,
        s_1_we0,
        s_1_d0,
        s_1_address1,
        s_1_ce1,
        s_1_q1,
        s_0_address0,
        s_0_ce0,
        s_0_we0,
        s_0_d0,
        s_0_address1,
        s_0_ce1,
        s_0_q1,
        empty,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] s_4_address0;
output   s_4_ce0;
output   s_4_we0;
output  [63:0] s_4_d0;
output  [2:0] s_4_address1;
output   s_4_ce1;
input  [63:0] s_4_q1;
output  [2:0] s_3_address0;
output   s_3_ce0;
output   s_3_we0;
output  [63:0] s_3_d0;
output  [2:0] s_3_address1;
output   s_3_ce1;
input  [63:0] s_3_q1;
output  [2:0] s_2_address0;
output   s_2_ce0;
output   s_2_we0;
output  [63:0] s_2_d0;
output  [2:0] s_2_address1;
output   s_2_ce1;
input  [63:0] s_2_q1;
output  [2:0] s_1_address0;
output   s_1_ce0;
output   s_1_we0;
output  [63:0] s_1_d0;
output  [2:0] s_1_address1;
output   s_1_ce1;
input  [63:0] s_1_q1;
output  [2:0] s_0_address0;
output   s_0_ce0;
output   s_0_we0;
output  [63:0] s_0_d0;
output  [2:0] s_0_address1;
output   s_0_ce1;
input  [63:0] s_0_q1;
input  [10:0] empty;
output  [10:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [10:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln281_reg_606;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
wire   [0:0] icmp_ln281_fu_302_p2;
wire    ap_block_pp0_stage0_11001;
reg   [8:0] tmp_4_reg_620;
reg   [7:0] tmp_7_reg_626;
reg   [0:0] tmp_5_reg_634;
reg   [2:0] s_0_addr_reg_639;
reg   [2:0] s_1_addr_reg_645;
reg   [2:0] s_2_addr_reg_651;
reg   [2:0] s_3_addr_reg_657;
reg   [2:0] s_4_addr_reg_663;
wire   [2:0] trunc_ln281_fu_429_p1;
reg   [2:0] trunc_ln281_reg_669;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] in_r_load_reg_673;
reg   [7:0] in_r_load_1_reg_678;
wire   [63:0] tmp_fu_457_p13;
reg   [63:0] tmp_reg_693;
reg   [7:0] in_r_load_2_reg_698;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] in_r_load_3_reg_703;
reg   [7:0] in_r_load_4_reg_718;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] in_r_load_5_reg_723;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln27_fu_360_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln27_1_fu_383_p1;
wire   [63:0] zext_ln281_fu_333_p1;
wire   [63:0] zext_ln27_2_fu_440_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln27_3_fu_452_p1;
wire   [63:0] zext_ln27_4_fu_517_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln27_5_fu_532_p1;
wire   [63:0] zext_ln27_6_fu_544_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln27_7_fu_556_p1;
reg   [4:0] phi_urem9_fu_108;
wire   [4:0] select_ln281_fu_497_p3;
wire    ap_loop_init;
reg   [9:0] phi_mul7_fu_112;
wire   [9:0] add_ln281_1_fu_317_p2;
reg   [9:0] ap_sig_allocacmp_phi_mul7_load;
reg   [4:0] i_1_fu_116;
wire   [4:0] add_ln281_fu_308_p2;
reg   [4:0] ap_sig_allocacmp_i;
reg    in_r_ce1_local;
reg   [10:0] in_r_address1_local;
reg    in_r_ce0_local;
reg   [10:0] in_r_address0_local;
reg    s_0_ce1_local;
reg    s_0_we0_local;
wire   [63:0] xor_ln283_fu_575_p2;
reg    s_0_ce0_local;
reg    s_1_ce1_local;
reg    s_1_we0_local;
reg    s_1_ce0_local;
reg    s_2_ce1_local;
reg    s_2_we0_local;
reg    s_2_ce0_local;
reg    s_3_ce1_local;
reg    s_3_we0_local;
reg    s_3_ce0_local;
reg    s_4_ce1_local;
reg    s_4_we0_local;
reg    s_4_ce0_local;
wire   [1:0] tmp_2_fu_323_p4;
wire   [7:0] shl_ln_fu_342_p3;
wire   [10:0] zext_ln283_fu_350_p1;
wire   [10:0] add_ln283_fu_354_p2;
wire   [9:0] tmp_3_fu_365_p4;
wire   [10:0] or_ln_fu_375_p3;
wire   [10:0] or_ln27_1_fu_433_p3;
wire   [10:0] or_ln27_2_fu_445_p3;
wire   [63:0] tmp_fu_457_p11;
wire   [2:0] tmp_fu_457_p12;
wire   [0:0] icmp_ln281_1_fu_491_p2;
wire   [4:0] add_ln281_2_fu_485_p2;
wire   [10:0] or_ln27_3_fu_510_p3;
wire   [10:0] or_ln27_4_fu_522_p5;
wire   [10:0] or_ln27_5_fu_537_p3;
wire   [10:0] or_ln27_6_fu_549_p3;
wire   [63:0] or_ln283_6_fu_561_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_fu_457_p1;
wire   [2:0] tmp_fu_457_p3;
wire   [2:0] tmp_fu_457_p5;
wire   [2:0] tmp_fu_457_p7;
wire  signed [2:0] tmp_fu_457_p9;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 phi_urem9_fu_108 = 5'd0;
#0 phi_mul7_fu_112 = 10'd0;
#0 i_1_fu_116 = 5'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) sha3_256_hls_sparsemux_11_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_11_3_64_1_1_U6(
    .din0(s_0_q1),
    .din1(s_1_q1),
    .din2(s_2_q1),
    .din3(s_3_q1),
    .din4(s_4_q1),
    .def(tmp_fu_457_p11),
    .sel(tmp_fu_457_p12),
    .dout(tmp_fu_457_p13)
);

sha3_256_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln281_fu_302_p2 == 1'd0))) begin
            i_1_fu_116 <= add_ln281_fu_308_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_116 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln281_fu_302_p2 == 1'd0))) begin
            phi_mul7_fu_112 <= add_ln281_1_fu_317_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul7_fu_112 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_urem9_fu_108 <= 5'd0;
    end else if (((icmp_ln281_reg_606 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_urem9_fu_108 <= select_ln281_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln281_reg_606 <= icmp_ln281_fu_302_p2;
        s_0_addr_reg_639[1 : 0] <= zext_ln281_fu_333_p1[1 : 0];
        s_1_addr_reg_645[1 : 0] <= zext_ln281_fu_333_p1[1 : 0];
        s_2_addr_reg_651[1 : 0] <= zext_ln281_fu_333_p1[1 : 0];
        s_3_addr_reg_657[1 : 0] <= zext_ln281_fu_333_p1[1 : 0];
        s_4_addr_reg_663[1 : 0] <= zext_ln281_fu_333_p1[1 : 0];
        tmp_4_reg_620 <= {{add_ln283_fu_354_p2[10:2]}};
        tmp_5_reg_634 <= add_ln283_fu_354_p2[32'd1];
        tmp_7_reg_626 <= {{add_ln283_fu_354_p2[10:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_r_load_1_reg_678 <= in_r_q0;
        in_r_load_reg_673 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in_r_load_2_reg_698 <= in_r_q1;
        in_r_load_3_reg_703 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        in_r_load_4_reg_718 <= in_r_q1;
        in_r_load_5_reg_723 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_reg_693 <= tmp_fu_457_p13;
        trunc_ln281_reg_669 <= trunc_ln281_fu_429_p1;
    end
end

always @ (*) begin
    if (((icmp_ln281_reg_606 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_phi_mul7_load = 10'd0;
    end else begin
        ap_sig_allocacmp_phi_mul7_load = phi_mul7_fu_112;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        in_r_address0_local = zext_ln27_7_fu_556_p1;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in_r_address0_local = zext_ln27_5_fu_532_p1;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_r_address0_local = zext_ln27_3_fu_452_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_address0_local = zext_ln27_1_fu_383_p1;
    end else begin
        in_r_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        in_r_address1_local = zext_ln27_6_fu_544_p1;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in_r_address1_local = zext_ln27_4_fu_517_p1;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_r_address1_local = zext_ln27_2_fu_440_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_address1_local = zext_ln27_fu_360_p1;
    end else begin
        in_r_address1_local = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_r_ce0_local = 1'b1;
    end else begin
        in_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_r_ce1_local = 1'b1;
    end else begin
        in_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_0_ce0_local = 1'b1;
    end else begin
        s_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_0_ce1_local = 1'b1;
    end else begin
        s_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln281_reg_669 == 3'd0))) begin
        s_0_we0_local = 1'b1;
    end else begin
        s_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_1_ce0_local = 1'b1;
    end else begin
        s_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_1_ce1_local = 1'b1;
    end else begin
        s_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln281_reg_669 == 3'd1))) begin
        s_1_we0_local = 1'b1;
    end else begin
        s_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_2_ce0_local = 1'b1;
    end else begin
        s_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_2_ce1_local = 1'b1;
    end else begin
        s_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln281_reg_669 == 3'd2))) begin
        s_2_we0_local = 1'b1;
    end else begin
        s_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_3_ce0_local = 1'b1;
    end else begin
        s_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_3_ce1_local = 1'b1;
    end else begin
        s_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln281_reg_669 == 3'd3))) begin
        s_3_we0_local = 1'b1;
    end else begin
        s_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_4_ce0_local = 1'b1;
    end else begin
        s_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_4_ce1_local = 1'b1;
    end else begin
        s_4_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln281_reg_669 == 3'd3) & ~(trunc_ln281_reg_669 == 3'd2) & ~(trunc_ln281_reg_669 == 3'd1) & ~(trunc_ln281_reg_669 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_4_we0_local = 1'b1;
    end else begin
        s_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln281_1_fu_317_p2 = (ap_sig_allocacmp_phi_mul7_load + 10'd52);

assign add_ln281_2_fu_485_p2 = (phi_urem9_fu_108 + 5'd1);

assign add_ln281_fu_308_p2 = (ap_sig_allocacmp_i + 5'd1);

assign add_ln283_fu_354_p2 = (zext_ln283_fu_350_p1 + empty);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln281_1_fu_491_p2 = ((phi_urem9_fu_108 == 5'd4) ? 1'b1 : 1'b0);

assign icmp_ln281_fu_302_p2 = ((ap_sig_allocacmp_i == 5'd17) ? 1'b1 : 1'b0);

assign in_r_address0 = in_r_address0_local;

assign in_r_address1 = in_r_address1_local;

assign in_r_ce0 = in_r_ce0_local;

assign in_r_ce1 = in_r_ce1_local;

assign or_ln27_1_fu_433_p3 = {{tmp_4_reg_620}, {2'd2}};

assign or_ln27_2_fu_445_p3 = {{tmp_4_reg_620}, {2'd3}};

assign or_ln27_3_fu_510_p3 = {{tmp_7_reg_626}, {3'd4}};

assign or_ln27_4_fu_522_p5 = {{{{tmp_7_reg_626}, {1'd1}}, {tmp_5_reg_634}}, {1'd1}};

assign or_ln27_5_fu_537_p3 = {{tmp_7_reg_626}, {3'd6}};

assign or_ln27_6_fu_549_p3 = {{tmp_7_reg_626}, {3'd7}};

assign or_ln283_6_fu_561_p9 = {{{{{{{{in_r_q0}, {in_r_q1}}, {in_r_load_5_reg_723}}, {in_r_load_4_reg_718}}, {in_r_load_3_reg_703}}, {in_r_load_2_reg_698}}, {in_r_load_1_reg_678}}, {in_r_load_reg_673}};

assign or_ln_fu_375_p3 = {{tmp_3_fu_365_p4}, {1'd1}};

assign s_0_address0 = s_0_addr_reg_639;

assign s_0_address1 = zext_ln281_fu_333_p1;

assign s_0_ce0 = s_0_ce0_local;

assign s_0_ce1 = s_0_ce1_local;

assign s_0_d0 = xor_ln283_fu_575_p2;

assign s_0_we0 = s_0_we0_local;

assign s_1_address0 = s_1_addr_reg_645;

assign s_1_address1 = zext_ln281_fu_333_p1;

assign s_1_ce0 = s_1_ce0_local;

assign s_1_ce1 = s_1_ce1_local;

assign s_1_d0 = xor_ln283_fu_575_p2;

assign s_1_we0 = s_1_we0_local;

assign s_2_address0 = s_2_addr_reg_651;

assign s_2_address1 = zext_ln281_fu_333_p1;

assign s_2_ce0 = s_2_ce0_local;

assign s_2_ce1 = s_2_ce1_local;

assign s_2_d0 = xor_ln283_fu_575_p2;

assign s_2_we0 = s_2_we0_local;

assign s_3_address0 = s_3_addr_reg_657;

assign s_3_address1 = zext_ln281_fu_333_p1;

assign s_3_ce0 = s_3_ce0_local;

assign s_3_ce1 = s_3_ce1_local;

assign s_3_d0 = xor_ln283_fu_575_p2;

assign s_3_we0 = s_3_we0_local;

assign s_4_address0 = s_4_addr_reg_663;

assign s_4_address1 = zext_ln281_fu_333_p1;

assign s_4_ce0 = s_4_ce0_local;

assign s_4_ce1 = s_4_ce1_local;

assign s_4_d0 = xor_ln283_fu_575_p2;

assign s_4_we0 = s_4_we0_local;

assign select_ln281_fu_497_p3 = ((icmp_ln281_1_fu_491_p2[0:0] == 1'b1) ? 5'd0 : add_ln281_2_fu_485_p2);

assign shl_ln_fu_342_p3 = {{ap_sig_allocacmp_i}, {3'd0}};

assign tmp_2_fu_323_p4 = {{ap_sig_allocacmp_phi_mul7_load[9:8]}};

assign tmp_3_fu_365_p4 = {{add_ln283_fu_354_p2[10:1]}};

assign tmp_fu_457_p11 = 'bx;

assign tmp_fu_457_p12 = phi_urem9_fu_108[2:0];

assign trunc_ln281_fu_429_p1 = phi_urem9_fu_108[2:0];

assign xor_ln283_fu_575_p2 = (tmp_reg_693 ^ or_ln283_6_fu_561_p9);

assign zext_ln27_1_fu_383_p1 = or_ln_fu_375_p3;

assign zext_ln27_2_fu_440_p1 = or_ln27_1_fu_433_p3;

assign zext_ln27_3_fu_452_p1 = or_ln27_2_fu_445_p3;

assign zext_ln27_4_fu_517_p1 = or_ln27_3_fu_510_p3;

assign zext_ln27_5_fu_532_p1 = or_ln27_4_fu_522_p5;

assign zext_ln27_6_fu_544_p1 = or_ln27_5_fu_537_p3;

assign zext_ln27_7_fu_556_p1 = or_ln27_6_fu_549_p3;

assign zext_ln27_fu_360_p1 = add_ln283_fu_354_p2;

assign zext_ln281_fu_333_p1 = tmp_2_fu_323_p4;

assign zext_ln283_fu_350_p1 = shl_ln_fu_342_p3;

always @ (posedge ap_clk) begin
    s_0_addr_reg_639[2] <= 1'b0;
    s_1_addr_reg_645[2] <= 1'b0;
    s_2_addr_reg_651[2] <= 1'b0;
    s_3_addr_reg_657[2] <= 1'b0;
    s_4_addr_reg_663[2] <= 1'b0;
end

endmodule //sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_word_loop
