-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_word_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_4_ce0 : OUT STD_LOGIC;
    s_4_we0 : OUT STD_LOGIC;
    s_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_4_ce1 : OUT STD_LOGIC;
    s_4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_3_ce0 : OUT STD_LOGIC;
    s_3_we0 : OUT STD_LOGIC;
    s_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_3_ce1 : OUT STD_LOGIC;
    s_3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_2_ce0 : OUT STD_LOGIC;
    s_2_we0 : OUT STD_LOGIC;
    s_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_2_ce1 : OUT STD_LOGIC;
    s_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_1_ce0 : OUT STD_LOGIC;
    s_1_we0 : OUT STD_LOGIC;
    s_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_1_ce1 : OUT STD_LOGIC;
    s_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_0_ce0 : OUT STD_LOGIC;
    s_0_we0 : OUT STD_LOGIC;
    s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_0_ce1 : OUT STD_LOGIC;
    s_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (10 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_word_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_34 : STD_LOGIC_VECTOR (9 downto 0) := "0000110100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln281_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln281_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_4_reg_620 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_0_addr_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_645 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_651 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_657 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_663 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln281_fu_429_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln281_reg_669 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal in_r_load_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_r_load_1_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_457_p13 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_693 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r_load_2_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal in_r_load_3_reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_r_load_4_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal in_r_load_5_reg_723 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln27_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln27_1_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln281_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln27_3_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_4_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln27_5_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_6_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln27_7_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem9_fu_108 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln281_fu_497_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul7_fu_112 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln281_1_fu_317_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_phi_mul7_load : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_fu_116 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln281_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal in_r_ce1_local : STD_LOGIC;
    signal in_r_address1_local : STD_LOGIC_VECTOR (10 downto 0);
    signal in_r_ce0_local : STD_LOGIC;
    signal in_r_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal s_0_ce1_local : STD_LOGIC;
    signal s_0_we0_local : STD_LOGIC;
    signal xor_ln283_fu_575_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_ce0_local : STD_LOGIC;
    signal s_1_ce1_local : STD_LOGIC;
    signal s_1_we0_local : STD_LOGIC;
    signal s_1_ce0_local : STD_LOGIC;
    signal s_2_ce1_local : STD_LOGIC;
    signal s_2_we0_local : STD_LOGIC;
    signal s_2_ce0_local : STD_LOGIC;
    signal s_3_ce1_local : STD_LOGIC;
    signal s_3_we0_local : STD_LOGIC;
    signal s_3_ce0_local : STD_LOGIC;
    signal s_4_ce1_local : STD_LOGIC;
    signal s_4_we0_local : STD_LOGIC;
    signal s_4_ce0_local : STD_LOGIC;
    signal tmp_2_fu_323_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln283_fu_350_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln283_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_365_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_fu_375_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_1_fu_433_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_2_fu_445_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_457_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_457_p12 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln281_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln281_2_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_3_fu_510_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_4_fu_522_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_5_fu_537_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_6_fu_549_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln283_6_fu_561_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_457_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_457_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_457_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_457_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_457_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hls_sparsemux_11_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_11_3_64_1_1_U6 : component sha3_256_hls_sparsemux_11_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => s_0_q1,
        din1 => s_1_q1,
        din2 => s_2_q1,
        din3 => s_3_q1,
        din4 => s_4_q1,
        def => tmp_fu_457_p11,
        sel => tmp_fu_457_p12,
        dout => tmp_fu_457_p13);

    flow_control_loop_pipe_sequential_init_U : component sha3_256_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln281_fu_302_p2 = ap_const_lv1_0))) then 
                    i_1_fu_116 <= add_ln281_fu_308_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_116 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul7_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln281_fu_302_p2 = ap_const_lv1_0))) then 
                    phi_mul7_fu_112 <= add_ln281_1_fu_317_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul7_fu_112 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    phi_urem9_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_urem9_fu_108 <= ap_const_lv5_0;
            elsif (((icmp_ln281_reg_606 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                phi_urem9_fu_108 <= select_ln281_fu_497_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln281_reg_606 <= icmp_ln281_fu_302_p2;
                    s_0_addr_reg_639(1 downto 0) <= zext_ln281_fu_333_p1(3 - 1 downto 0)(1 downto 0);
                    s_1_addr_reg_645(1 downto 0) <= zext_ln281_fu_333_p1(3 - 1 downto 0)(1 downto 0);
                    s_2_addr_reg_651(1 downto 0) <= zext_ln281_fu_333_p1(3 - 1 downto 0)(1 downto 0);
                    s_3_addr_reg_657(1 downto 0) <= zext_ln281_fu_333_p1(3 - 1 downto 0)(1 downto 0);
                    s_4_addr_reg_663(1 downto 0) <= zext_ln281_fu_333_p1(3 - 1 downto 0)(1 downto 0);
                tmp_4_reg_620 <= add_ln283_fu_354_p2(10 downto 2);
                tmp_5_reg_634 <= add_ln283_fu_354_p2(1 downto 1);
                tmp_7_reg_626 <= add_ln283_fu_354_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                in_r_load_1_reg_678 <= in_r_q0;
                in_r_load_reg_673 <= in_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                in_r_load_2_reg_698 <= in_r_q1;
                in_r_load_3_reg_703 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                in_r_load_4_reg_718 <= in_r_q1;
                in_r_load_5_reg_723 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_reg_693 <= tmp_fu_457_p13;
                trunc_ln281_reg_669 <= trunc_ln281_fu_429_p1;
            end if;
        end if;
    end process;
    s_0_addr_reg_639(2) <= '0';
    s_1_addr_reg_645(2) <= '0';
    s_2_addr_reg_651(2) <= '0';
    s_3_addr_reg_657(2) <= '0';
    s_4_addr_reg_663(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln281_1_fu_317_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul7_load) + unsigned(ap_const_lv10_34));
    add_ln281_2_fu_485_p2 <= std_logic_vector(unsigned(phi_urem9_fu_108) + unsigned(ap_const_lv5_1));
    add_ln281_fu_308_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_1));
    add_ln283_fu_354_p2 <= std_logic_vector(unsigned(zext_ln283_fu_350_p1) + unsigned(empty));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln281_reg_606)
    begin
        if (((icmp_ln281_reg_606 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, phi_mul7_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_phi_mul7_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_phi_mul7_load <= phi_mul7_fu_112;
        end if; 
    end process;

    icmp_ln281_1_fu_491_p2 <= "1" when (phi_urem9_fu_108 = ap_const_lv5_4) else "0";
    icmp_ln281_fu_302_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv5_11) else "0";
    in_r_address0 <= in_r_address0_local;

    in_r_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln27_1_fu_383_p1, ap_block_pp0_stage1, zext_ln27_3_fu_452_p1, ap_block_pp0_stage2, zext_ln27_5_fu_532_p1, ap_block_pp0_stage3, zext_ln27_7_fu_556_p1)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            in_r_address0_local <= zext_ln27_7_fu_556_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            in_r_address0_local <= zext_ln27_5_fu_532_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_r_address0_local <= zext_ln27_3_fu_452_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_address0_local <= zext_ln27_1_fu_383_p1(11 - 1 downto 0);
        else 
            in_r_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    in_r_address1 <= in_r_address1_local;

    in_r_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, zext_ln27_fu_360_p1, ap_block_pp0_stage0, zext_ln27_2_fu_440_p1, ap_block_pp0_stage1, zext_ln27_4_fu_517_p1, ap_block_pp0_stage2, zext_ln27_6_fu_544_p1, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            in_r_address1_local <= zext_ln27_6_fu_544_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            in_r_address1_local <= zext_ln27_4_fu_517_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_r_address1_local <= zext_ln27_2_fu_440_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_address1_local <= zext_ln27_fu_360_p1(11 - 1 downto 0);
        else 
            in_r_address1_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    in_r_ce0 <= in_r_ce0_local;

    in_r_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_ce0_local <= ap_const_logic_1;
        else 
            in_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_r_ce1 <= in_r_ce1_local;

    in_r_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_ce1_local <= ap_const_logic_1;
        else 
            in_r_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_1_fu_433_p3 <= (tmp_4_reg_620 & ap_const_lv2_2);
    or_ln27_2_fu_445_p3 <= (tmp_4_reg_620 & ap_const_lv2_3);
    or_ln27_3_fu_510_p3 <= (tmp_7_reg_626 & ap_const_lv3_4);
    or_ln27_4_fu_522_p5 <= (((tmp_7_reg_626 & ap_const_lv1_1) & tmp_5_reg_634) & ap_const_lv1_1);
    or_ln27_5_fu_537_p3 <= (tmp_7_reg_626 & ap_const_lv3_6);
    or_ln27_6_fu_549_p3 <= (tmp_7_reg_626 & ap_const_lv3_7);
    or_ln283_6_fu_561_p9 <= (((((((in_r_q0 & in_r_q1) & in_r_load_5_reg_723) & in_r_load_4_reg_718) & in_r_load_3_reg_703) & in_r_load_2_reg_698) & in_r_load_1_reg_678) & in_r_load_reg_673);
    or_ln_fu_375_p3 <= (tmp_3_fu_365_p4 & ap_const_lv1_1);
    s_0_address0 <= s_0_addr_reg_639;
    s_0_address1 <= zext_ln281_fu_333_p1(3 - 1 downto 0);
    s_0_ce0 <= s_0_ce0_local;

    s_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_0_ce0_local <= ap_const_logic_1;
        else 
            s_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_0_ce1 <= s_0_ce1_local;

    s_0_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_0_ce1_local <= ap_const_logic_1;
        else 
            s_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    s_0_d0 <= xor_ln283_fu_575_p2;
    s_0_we0 <= s_0_we0_local;

    s_0_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln281_reg_669)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln281_reg_669 = ap_const_lv3_0))) then 
            s_0_we0_local <= ap_const_logic_1;
        else 
            s_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_1_address0 <= s_1_addr_reg_645;
    s_1_address1 <= zext_ln281_fu_333_p1(3 - 1 downto 0);
    s_1_ce0 <= s_1_ce0_local;

    s_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_1_ce0_local <= ap_const_logic_1;
        else 
            s_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_1_ce1 <= s_1_ce1_local;

    s_1_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_1_ce1_local <= ap_const_logic_1;
        else 
            s_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    s_1_d0 <= xor_ln283_fu_575_p2;
    s_1_we0 <= s_1_we0_local;

    s_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln281_reg_669)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln281_reg_669 = ap_const_lv3_1))) then 
            s_1_we0_local <= ap_const_logic_1;
        else 
            s_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_2_address0 <= s_2_addr_reg_651;
    s_2_address1 <= zext_ln281_fu_333_p1(3 - 1 downto 0);
    s_2_ce0 <= s_2_ce0_local;

    s_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_2_ce0_local <= ap_const_logic_1;
        else 
            s_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_2_ce1 <= s_2_ce1_local;

    s_2_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_2_ce1_local <= ap_const_logic_1;
        else 
            s_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    s_2_d0 <= xor_ln283_fu_575_p2;
    s_2_we0 <= s_2_we0_local;

    s_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln281_reg_669)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln281_reg_669 = ap_const_lv3_2))) then 
            s_2_we0_local <= ap_const_logic_1;
        else 
            s_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_3_address0 <= s_3_addr_reg_657;
    s_3_address1 <= zext_ln281_fu_333_p1(3 - 1 downto 0);
    s_3_ce0 <= s_3_ce0_local;

    s_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_3_ce0_local <= ap_const_logic_1;
        else 
            s_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_3_ce1 <= s_3_ce1_local;

    s_3_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_3_ce1_local <= ap_const_logic_1;
        else 
            s_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    s_3_d0 <= xor_ln283_fu_575_p2;
    s_3_we0 <= s_3_we0_local;

    s_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln281_reg_669)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln281_reg_669 = ap_const_lv3_3))) then 
            s_3_we0_local <= ap_const_logic_1;
        else 
            s_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_4_address0 <= s_4_addr_reg_663;
    s_4_address1 <= zext_ln281_fu_333_p1(3 - 1 downto 0);
    s_4_ce0 <= s_4_ce0_local;

    s_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_4_ce0_local <= ap_const_logic_1;
        else 
            s_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_4_ce1 <= s_4_ce1_local;

    s_4_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_4_ce1_local <= ap_const_logic_1;
        else 
            s_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    s_4_d0 <= xor_ln283_fu_575_p2;
    s_4_we0 <= s_4_we0_local;

    s_4_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln281_reg_669)
    begin
        if ((not((trunc_ln281_reg_669 = ap_const_lv3_3)) and not((trunc_ln281_reg_669 = ap_const_lv3_2)) and not((trunc_ln281_reg_669 = ap_const_lv3_1)) and not((trunc_ln281_reg_669 = ap_const_lv3_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_4_we0_local <= ap_const_logic_1;
        else 
            s_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln281_fu_497_p3 <= 
        ap_const_lv5_0 when (icmp_ln281_1_fu_491_p2(0) = '1') else 
        add_ln281_2_fu_485_p2;
    shl_ln_fu_342_p3 <= (ap_sig_allocacmp_i & ap_const_lv3_0);
    tmp_2_fu_323_p4 <= ap_sig_allocacmp_phi_mul7_load(9 downto 8);
    tmp_3_fu_365_p4 <= add_ln283_fu_354_p2(10 downto 1);
    tmp_fu_457_p11 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_457_p12 <= phi_urem9_fu_108(3 - 1 downto 0);
    trunc_ln281_fu_429_p1 <= phi_urem9_fu_108(3 - 1 downto 0);
    xor_ln283_fu_575_p2 <= (tmp_reg_693 xor or_ln283_6_fu_561_p9);
    zext_ln27_1_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_375_p3),64));
    zext_ln27_2_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_1_fu_433_p3),64));
    zext_ln27_3_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_2_fu_445_p3),64));
    zext_ln27_4_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_3_fu_510_p3),64));
    zext_ln27_5_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_4_fu_522_p5),64));
    zext_ln27_6_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_5_fu_537_p3),64));
    zext_ln27_7_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_6_fu_549_p3),64));
    zext_ln27_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln283_fu_354_p2),64));
    zext_ln281_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_323_p4),64));
    zext_ln283_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_342_p3),11));
end behav;
