-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hls_keccak_absorb_once_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_0_ce0 : OUT STD_LOGIC;
    s_0_we0 : OUT STD_LOGIC;
    s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_0_ce1 : OUT STD_LOGIC;
    s_0_we1 : OUT STD_LOGIC;
    s_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_1_ce0 : OUT STD_LOGIC;
    s_1_we0 : OUT STD_LOGIC;
    s_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_1_ce1 : OUT STD_LOGIC;
    s_1_we1 : OUT STD_LOGIC;
    s_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_2_ce0 : OUT STD_LOGIC;
    s_2_we0 : OUT STD_LOGIC;
    s_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_2_ce1 : OUT STD_LOGIC;
    s_2_we1 : OUT STD_LOGIC;
    s_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_3_ce0 : OUT STD_LOGIC;
    s_3_we0 : OUT STD_LOGIC;
    s_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_3_ce1 : OUT STD_LOGIC;
    s_3_we1 : OUT STD_LOGIC;
    s_3_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_4_ce0 : OUT STD_LOGIC;
    s_4_we0 : OUT STD_LOGIC;
    s_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_4_ce1 : OUT STD_LOGIC;
    s_4_we1 : OUT STD_LOGIC;
    s_4_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    inlen : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sha3_256_hls_keccak_absorb_once_hls is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (141 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (141 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (141 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (141 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (141 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (141 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (141 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (141 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (141 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (141 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv123_3333333333333334 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011001100110100";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv61_5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv59_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln277_fu_268_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln277_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal urem_ln277_reg_508 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_ln277_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal sub_ln277_fu_285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln277_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln262_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln262_reg_523 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_0_lcssa_sel_fu_317_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal pos_0_lcssa_sel_reg_533 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal trunc_ln298_fu_325_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln298_reg_538 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5_fu_328_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln277_fu_351_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln277_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal s_0_addr_reg_558 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal s_1_addr_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_573 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln298_1_fu_386_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln298_1_reg_583 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal tmp_1_fu_390_p13 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_587 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start_reg : STD_LOGIC := '0';
    signal s_4_we0_out : STD_LOGIC;
    signal s_3_we0_out : STD_LOGIC;
    signal s_2_we0_out : STD_LOGIC;
    signal s_1_we0_out : STD_LOGIC;
    signal s_0_we0_out : STD_LOGIC;
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln277_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal zext_ln298_2_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_assign_1_fu_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln287_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_fu_106 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln286_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_ce0_local : STD_LOGIC;
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal s_0_we0_local : STD_LOGIC;
    signal xor_ln298_fu_439_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_ce0_local : STD_LOGIC;
    signal s_1_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_we0_local : STD_LOGIC;
    signal s_1_d0_local : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal xor_ln_fu_467_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_ce0_local : STD_LOGIC;
    signal s_2_we0_local : STD_LOGIC;
    signal s_3_ce0_local : STD_LOGIC;
    signal s_3_we0_local : STD_LOGIC;
    signal s_4_ce0_local : STD_LOGIC;
    signal s_4_we0_local : STD_LOGIC;
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln292_fu_314_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (122 downto 0);
    signal tmp_fu_367_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_390_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_390_p12 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_418_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln298_fu_425_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln298_fu_429_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln298_1_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_449_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln299_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln299_fu_463_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_247_ce : STD_LOGIC;
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_fu_274_ap_start : STD_LOGIC;
    signal grp_fu_274_ap_done : STD_LOGIC;
    signal grp_fu_274_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_342_ap_start : STD_LOGIC;
    signal grp_fu_342_ap_done : STD_LOGIC;
    signal grp_fu_342_ce : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (141 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal grp_fu_247_p00 : STD_LOGIC_VECTOR (122 downto 0);
    signal tmp_1_fu_390_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_390_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_390_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_390_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_390_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hls_keccak_absorb_once_hls_Pipeline_init_state IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_4_ce0 : OUT STD_LOGIC;
        s_4_we0 : OUT STD_LOGIC;
        s_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_3_ce0 : OUT STD_LOGIC;
        s_3_we0 : OUT STD_LOGIC;
        s_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_2_ce0 : OUT STD_LOGIC;
        s_2_we0 : OUT STD_LOGIC;
        s_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_1_ce0 : OUT STD_LOGIC;
        s_1_we0 : OUT STD_LOGIC;
        s_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_0_ce0 : OUT STD_LOGIC;
        s_0_we0 : OUT STD_LOGIC;
        s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_remaining IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_ln262 : IN STD_LOGIC_VECTOR (63 downto 0);
        pos_0_lcssa_sel : IN STD_LOGIC_VECTOR (10 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        s_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_0_ce0 : OUT STD_LOGIC;
        s_0_we0 : OUT STD_LOGIC;
        s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_1_ce0 : OUT STD_LOGIC;
        s_1_we0 : OUT STD_LOGIC;
        s_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_2_ce0 : OUT STD_LOGIC;
        s_2_we0 : OUT STD_LOGIC;
        s_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_3_ce0 : OUT STD_LOGIC;
        s_3_we0 : OUT STD_LOGIC;
        s_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_4_ce0 : OUT STD_LOGIC;
        s_4_we0 : OUT STD_LOGIC;
        s_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_word_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_4_ce0 : OUT STD_LOGIC;
        s_4_we0 : OUT STD_LOGIC;
        s_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_4_ce1 : OUT STD_LOGIC;
        s_4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_3_ce0 : OUT STD_LOGIC;
        s_3_we0 : OUT STD_LOGIC;
        s_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_3_ce1 : OUT STD_LOGIC;
        s_3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_2_ce0 : OUT STD_LOGIC;
        s_2_we0 : OUT STD_LOGIC;
        s_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_2_ce1 : OUT STD_LOGIC;
        s_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_1_ce0 : OUT STD_LOGIC;
        s_1_we0 : OUT STD_LOGIC;
        s_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_1_ce1 : OUT STD_LOGIC;
        s_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_0_ce0 : OUT STD_LOGIC;
        s_0_we0 : OUT STD_LOGIC;
        s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_0_ce1 : OUT STD_LOGIC;
        s_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        empty : IN STD_LOGIC_VECTOR (10 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha3_256_hls_KeccakF1600_StatePermute_HLS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_0_ce0 : OUT STD_LOGIC;
        state_0_we0 : OUT STD_LOGIC;
        state_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_0_ce1 : OUT STD_LOGIC;
        state_0_we1 : OUT STD_LOGIC;
        state_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_1_ce0 : OUT STD_LOGIC;
        state_1_we0 : OUT STD_LOGIC;
        state_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_1_ce1 : OUT STD_LOGIC;
        state_1_we1 : OUT STD_LOGIC;
        state_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_2_ce0 : OUT STD_LOGIC;
        state_2_we0 : OUT STD_LOGIC;
        state_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_2_ce1 : OUT STD_LOGIC;
        state_2_we1 : OUT STD_LOGIC;
        state_2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_3_ce0 : OUT STD_LOGIC;
        state_3_we0 : OUT STD_LOGIC;
        state_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_3_ce1 : OUT STD_LOGIC;
        state_3_we1 : OUT STD_LOGIC;
        state_3_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_4_ce0 : OUT STD_LOGIC;
        state_4_we0 : OUT STD_LOGIC;
        state_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_4_ce1 : OUT STD_LOGIC;
        state_4_we1 : OUT STD_LOGIC;
        state_4_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_4_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_mul_61ns_63ns_123_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (60 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (122 downto 0) );
    end component;


    component sha3_256_hls_urem_64ns_9ns_64_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_urem_61ns_4ns_3_65_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (60 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component sha3_256_hls_sparsemux_11_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184 : component sha3_256_hls_keccak_absorb_once_hls_Pipeline_init_state
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start,
        ap_done => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done,
        ap_idle => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_idle,
        ap_ready => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_ready,
        s_4_address0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_address0,
        s_4_ce0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_ce0,
        s_4_we0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_we0,
        s_4_d0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_d0,
        s_3_address0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_address0,
        s_3_ce0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_ce0,
        s_3_we0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_we0,
        s_3_d0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_d0,
        s_2_address0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_address0,
        s_2_ce0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_ce0,
        s_2_we0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_we0,
        s_2_d0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_d0,
        s_1_address0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_address0,
        s_1_ce0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_ce0,
        s_1_we0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_we0,
        s_1_d0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_d0,
        s_0_address0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_address0,
        s_0_ce0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_ce0,
        s_0_we0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_we0,
        s_0_d0 => grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_d0);

    grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198 : component sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_remaining
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start,
        ap_done => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done,
        ap_idle => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_idle,
        ap_ready => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_ready,
        sub_ln262 => sub_ln262_reg_523,
        pos_0_lcssa_sel => pos_0_lcssa_sel_reg_533,
        in_r_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_address0,
        in_r_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_ce0,
        in_r_q0 => in_r_q0,
        s_0_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_address0,
        s_0_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_ce0,
        s_0_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_we0,
        s_0_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_d0,
        s_0_q0 => s_0_q0,
        s_1_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_address0,
        s_1_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_ce0,
        s_1_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_we0,
        s_1_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_d0,
        s_1_q0 => s_1_q0,
        s_2_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_address0,
        s_2_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_ce0,
        s_2_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_we0,
        s_2_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_d0,
        s_2_q0 => s_2_q0,
        s_3_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_address0,
        s_3_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_ce0,
        s_3_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_we0,
        s_3_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_d0,
        s_3_q0 => s_3_q0,
        s_4_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_address0,
        s_4_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_ce0,
        s_4_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_we0,
        s_4_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_d0,
        s_4_q0 => s_4_q0);

    grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216 : component sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_word_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start,
        ap_done => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_done,
        ap_idle => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_idle,
        ap_ready => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_ready,
        s_4_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address0,
        s_4_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce0,
        s_4_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_we0,
        s_4_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_d0,
        s_4_address1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address1,
        s_4_ce1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce1,
        s_4_q1 => s_4_q1,
        s_3_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address0,
        s_3_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce0,
        s_3_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_we0,
        s_3_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_d0,
        s_3_address1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address1,
        s_3_ce1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce1,
        s_3_q1 => s_3_q1,
        s_2_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address0,
        s_2_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce0,
        s_2_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_we0,
        s_2_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_d0,
        s_2_address1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address1,
        s_2_ce1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce1,
        s_2_q1 => s_2_q1,
        s_1_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address0,
        s_1_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce0,
        s_1_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_we0,
        s_1_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_d0,
        s_1_address1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address1,
        s_1_ce1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce1,
        s_1_q1 => s_1_q1,
        s_0_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address0,
        s_0_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce0,
        s_0_we0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_we0,
        s_0_d0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_d0,
        s_0_address1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address1,
        s_0_ce1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce1,
        s_0_q1 => s_0_q1,
        empty => trunc_ln277_reg_553,
        in_r_address0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address0,
        in_r_ce0 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce0,
        in_r_q0 => in_r_q0,
        in_r_address1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address1,
        in_r_ce1 => grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce1,
        in_r_q1 => in_r_q1);

    grp_KeccakF1600_StatePermute_HLS_fu_233 : component sha3_256_hls_KeccakF1600_StatePermute_HLS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_HLS_fu_233_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_HLS_fu_233_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_HLS_fu_233_ap_ready,
        state_0_address0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address0,
        state_0_ce0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce0,
        state_0_we0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we0,
        state_0_d0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d0,
        state_0_q0 => s_0_q0,
        state_0_address1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address1,
        state_0_ce1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce1,
        state_0_we1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we1,
        state_0_d1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d1,
        state_0_q1 => s_0_q1,
        state_1_address0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address0,
        state_1_ce0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce0,
        state_1_we0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we0,
        state_1_d0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d0,
        state_1_q0 => s_1_q0,
        state_1_address1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address1,
        state_1_ce1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce1,
        state_1_we1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we1,
        state_1_d1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d1,
        state_1_q1 => s_1_q1,
        state_2_address0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address0,
        state_2_ce0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce0,
        state_2_we0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we0,
        state_2_d0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d0,
        state_2_q0 => s_2_q0,
        state_2_address1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address1,
        state_2_ce1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce1,
        state_2_we1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we1,
        state_2_d1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d1,
        state_2_q1 => s_2_q1,
        state_3_address0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address0,
        state_3_ce0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce0,
        state_3_we0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we0,
        state_3_d0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d0,
        state_3_q0 => s_3_q0,
        state_3_address1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address1,
        state_3_ce1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce1,
        state_3_we1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we1,
        state_3_d1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d1,
        state_3_q1 => s_3_q1,
        state_4_address0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address0,
        state_4_ce0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce0,
        state_4_we0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we0,
        state_4_d0 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d0,
        state_4_q0 => s_4_q0,
        state_4_address1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address1,
        state_4_ce1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce1,
        state_4_we1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we1,
        state_4_d1 => grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d1,
        state_4_q1 => s_4_q1);

    mul_61ns_63ns_123_5_1_U87 : component sha3_256_hls_mul_61ns_63ns_123_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 61,
        din1_WIDTH => 63,
        dout_WIDTH => 123)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => grp_fu_247_p1,
        ce => grp_fu_247_ce,
        dout => grp_fu_247_p2);

    urem_64ns_9ns_64_68_seq_1_U88 : component sha3_256_hls_urem_64ns_9ns_64_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 9,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_274_ap_start,
        done => grp_fu_274_ap_done,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        ce => grp_fu_274_ce,
        dout => grp_fu_274_p2);

    urem_61ns_4ns_3_65_seq_1_U89 : component sha3_256_hls_urem_61ns_4ns_3_65_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 65,
        din0_WIDTH => 61,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_342_ap_start,
        done => grp_fu_342_ap_done,
        din0 => grp_fu_342_p0,
        din1 => grp_fu_342_p1,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p2);

    sparsemux_11_3_64_1_1_U90 : component sha3_256_hls_sparsemux_11_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => s_0_q0,
        din1 => s_1_q0,
        din2 => s_2_q0,
        din3 => s_3_q0,
        din4 => s_4_q0,
        def => tmp_1_fu_390_p11,
        sel => tmp_1_fu_390_p12,
        dout => tmp_1_fu_390_p13);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                    grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_HLS_fu_233_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln277_1_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                    grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inlen_assign_1_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                inlen_assign_1_fu_102 <= inlen;
            elsif (((icmp_ln277_1_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                inlen_assign_1_fu_102 <= add_ln287_fu_303_p2;
            end if; 
        end if;
    end process;

    pos_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pos_fu_106 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                pos_fu_106 <= add_ln286_fu_356_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_497 <= empty_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                icmp_ln277_reg_513 <= icmp_ln277_fu_280_p2;
                sub_ln262_reg_523 <= sub_ln262_fu_289_p2;
                sub_ln277_reg_518 <= sub_ln277_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                pos_0_lcssa_sel_reg_533 <= pos_0_lcssa_sel_fu_317_p3;
                trunc_ln298_reg_538 <= trunc_ln298_fu_325_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                s_0_addr_reg_558 <= zext_ln298_2_fu_377_p1(3 - 1 downto 0);
                s_1_addr_reg_563 <= zext_ln298_2_fu_377_p1(3 - 1 downto 0);
                s_2_addr_reg_568 <= zext_ln298_2_fu_377_p1(3 - 1 downto 0);
                s_3_addr_reg_573 <= zext_ln298_2_fu_377_p1(3 - 1 downto 0);
                s_4_addr_reg_578 <= zext_ln298_2_fu_377_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln277_reg_502 <= select_ln277_fu_268_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state139)) then
                tmp_1_reg_587 <= tmp_1_fu_390_p13;
                trunc_ln298_1_reg_583 <= trunc_ln298_1_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                trunc_ln277_reg_553 <= trunc_ln277_fu_351_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                urem_ln277_reg_508 <= grp_fu_274_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state71, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_done, grp_KeccakF1600_StatePermute_HLS_fu_233_ap_done, icmp_ln277_1_fu_297_p2, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((icmp_ln277_1_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((grp_KeccakF1600_StatePermute_HLS_fu_233_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln286_fu_356_p2 <= std_logic_vector(unsigned(pos_fu_106) + unsigned(ap_const_lv64_88));
    add_ln287_fu_303_p2 <= std_logic_vector(unsigned(inlen_assign_1_fu_102) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done)
    begin
        if ((grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_done)
    begin
        if ((grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state74_blk <= ap_const_logic_0;

    ap_ST_fsm_state75_blk_assign_proc : process(grp_KeccakF1600_StatePermute_HLS_fu_233_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_HLS_fu_233_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state75_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state75_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state76_blk_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done)
    begin
        if ((grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state142)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state142) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state142)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel_fu_449_p3 <= s_1_q0(63 downto 63);
    empty_fu_252_p2 <= "1" when (unsigned(inlen) < unsigned(ap_const_lv64_87)) else "0";
    grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start <= grp_KeccakF1600_StatePermute_HLS_fu_233_ap_start_reg;

    grp_fu_247_ce_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state79, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state71) or ((grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            grp_fu_247_ce <= ap_const_logic_1;
        else 
            grp_fu_247_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_p0 <= grp_fu_247_p00(61 - 1 downto 0);
    grp_fu_247_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln5_fu_328_p4),123));
    grp_fu_247_p1 <= ap_const_lv123_3333333333333334(63 - 1 downto 0);

    grp_fu_274_ap_start_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done)
    begin
        if (((grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_274_ap_start <= ap_const_logic_1;
        else 
            grp_fu_274_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_274_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state69, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 
    = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 
    = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_274_ce <= ap_const_logic_1;
        else 
            grp_fu_274_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_274_p0 <= 
        ap_const_lv64_87 when (empty_reg_497(0) = '1') else 
        inlen;
    grp_fu_274_p1 <= ap_const_lv64_88(9 - 1 downto 0);

    grp_fu_342_ap_start_assign_proc : process(ap_CS_fsm_state71, icmp_ln277_1_fu_297_p2)
    begin
        if (((icmp_ln277_1_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_fu_342_ap_start <= ap_const_logic_1;
        else 
            grp_fu_342_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_342_ce_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state79, ap_CS_fsm_state139, ap_CS_fsm_state76, ap_CS_fsm_state138, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) 
    or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) 
    or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            grp_fu_342_ce <= ap_const_logic_1;
        else 
            grp_fu_342_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_342_p0 <= sub_ln262_reg_523(63 downto 3);
    grp_fu_342_p1 <= ap_const_lv61_5(4 - 1 downto 0);
    grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_ap_start_reg;
    grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_ap_start_reg;
    grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_ap_start_reg;
    icmp_ln277_1_fu_297_p2 <= "1" when (unsigned(inlen_assign_1_fu_102) > unsigned(ap_const_lv64_87)) else "0";
    icmp_ln277_fu_280_p2 <= "1" when (unsigned(inlen) > unsigned(ap_const_lv64_87)) else "0";

    in_r_address0_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address0, ap_CS_fsm_state76, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            in_r_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            in_r_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_address0;
        else 
            in_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    in_r_address1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_address1;

    in_r_ce0_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce0, ap_CS_fsm_state76, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            in_r_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            in_r_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_in_r_ce0;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce1, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            in_r_ce1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_in_r_ce1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pos_0_lcssa_sel_fu_317_p3 <= 
        trunc_ln292_fu_314_p1 when (icmp_ln277_reg_513(0) = '1') else 
        ap_const_lv11_0;

    s_0_address0_assign_proc : process(ap_CS_fsm_state2, s_0_addr_reg_558, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_address0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_0_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_0_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_0_address0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_address0;
        else 
            s_0_address0 <= s_0_addr_reg_558;
        end if; 
    end process;


    s_0_address1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_address1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_0_address1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_address1;
        else 
            s_0_address1 <= "XXX";
        end if; 
    end process;


    s_0_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_0_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_ce0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_0_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_0_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_0_ce0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_ce0;
        else 
            s_0_ce0 <= s_0_ce0_local;
        end if; 
    end process;


    s_0_ce0_local_assign_proc : process(ap_CS_fsm_state140, ap_CS_fsm_state138)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_0_ce0_local <= ap_const_logic_1;
        else 
            s_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_0_ce1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_ce1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_0_ce1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_ce1;
        else 
            s_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_0_d0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_d0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, xor_ln298_fu_439_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_d0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_0_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_0_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_0_d0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_d0;
        else 
            s_0_d0 <= xor_ln298_fu_439_p2;
        end if; 
    end process;

    s_0_d1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_d1;

    s_0_we0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_we0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we0, s_0_we0_out, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_we0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_0_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_0_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_0_we0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_0_we0;
        else 
            s_0_we0 <= (s_0_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_0_we0_local_assign_proc : process(trunc_ln298_1_reg_583, ap_CS_fsm_state140)
    begin
        if (((trunc_ln298_1_reg_583 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_0_we0_local <= ap_const_logic_1;
        else 
            s_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_0_we0_out <= s_0_we0_local;

    s_0_we1_assign_proc : process(grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we1, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_0_we1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_0_we1;
        else 
            s_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_1_address0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_1_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_address0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_1_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_1_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_1_address0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_address0;
        else 
            s_1_address0 <= s_1_address0_local;
        end if; 
    end process;


    s_1_address0_local_assign_proc : process(s_1_addr_reg_563, ap_CS_fsm_state140, ap_CS_fsm_state138, ap_CS_fsm_state141, ap_CS_fsm_state142)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state141))) then 
            s_1_address0_local <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_1_address0_local <= s_1_addr_reg_563;
        else 
            s_1_address0_local <= "XXX";
        end if; 
    end process;


    s_1_address1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_address1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_1_address1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_address1;
        else 
            s_1_address1 <= "XXX";
        end if; 
    end process;


    s_1_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_1_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_ce0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_1_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_1_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_1_ce0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_ce0;
        else 
            s_1_ce0 <= s_1_ce0_local;
        end if; 
    end process;


    s_1_ce0_local_assign_proc : process(ap_CS_fsm_state140, ap_CS_fsm_state138, ap_CS_fsm_state141, ap_CS_fsm_state142)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_1_ce0_local <= ap_const_logic_1;
        else 
            s_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_1_ce1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_ce1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_1_ce1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_ce1;
        else 
            s_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_1_d0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_d0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_1_d0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_d0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_1_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_1_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_1_d0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_d0;
        else 
            s_1_d0 <= s_1_d0_local;
        end if; 
    end process;


    s_1_d0_local_assign_proc : process(ap_CS_fsm_state140, xor_ln298_fu_439_p2, ap_CS_fsm_state142, xor_ln_fu_467_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            s_1_d0_local <= xor_ln_fu_467_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            s_1_d0_local <= xor_ln298_fu_439_p2;
        else 
            s_1_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_1_d1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_d1;

    s_1_we0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_we0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we0, s_1_we0_out, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_we0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_1_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_1_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_1_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_1_we0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_1_we0;
        else 
            s_1_we0 <= (s_1_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_1_we0_local_assign_proc : process(trunc_ln298_1_reg_583, ap_CS_fsm_state140, ap_CS_fsm_state142)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state142) or ((trunc_ln298_1_reg_583 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state140)))) then 
            s_1_we0_local <= ap_const_logic_1;
        else 
            s_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_1_we0_out <= s_1_we0_local;

    s_1_we1_assign_proc : process(grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we1, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_1_we1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_1_we1;
        else 
            s_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_2_address0_assign_proc : process(ap_CS_fsm_state2, s_2_addr_reg_568, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_address0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_2_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_2_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_2_address0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_address0;
        else 
            s_2_address0 <= s_2_addr_reg_568;
        end if; 
    end process;


    s_2_address1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_address1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_2_address1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_address1;
        else 
            s_2_address1 <= "XXX";
        end if; 
    end process;


    s_2_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_2_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_ce0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_2_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_2_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_2_ce0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_ce0;
        else 
            s_2_ce0 <= s_2_ce0_local;
        end if; 
    end process;


    s_2_ce0_local_assign_proc : process(ap_CS_fsm_state140, ap_CS_fsm_state138)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_2_ce0_local <= ap_const_logic_1;
        else 
            s_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_2_ce1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_ce1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_2_ce1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_ce1;
        else 
            s_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_2_d0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_d0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, xor_ln298_fu_439_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_d0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_2_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_2_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_2_d0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_d0;
        else 
            s_2_d0 <= xor_ln298_fu_439_p2;
        end if; 
    end process;

    s_2_d1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_d1;

    s_2_we0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_we0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we0, s_2_we0_out, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_we0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_2_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_2_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_2_we0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_2_we0;
        else 
            s_2_we0 <= (s_2_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_2_we0_local_assign_proc : process(trunc_ln298_1_reg_583, ap_CS_fsm_state140)
    begin
        if (((trunc_ln298_1_reg_583 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_2_we0_local <= ap_const_logic_1;
        else 
            s_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_2_we0_out <= s_2_we0_local;

    s_2_we1_assign_proc : process(grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we1, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_2_we1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_2_we1;
        else 
            s_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_3_address0_assign_proc : process(ap_CS_fsm_state2, s_3_addr_reg_573, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_address0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_3_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_3_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_3_address0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_address0;
        else 
            s_3_address0 <= s_3_addr_reg_573;
        end if; 
    end process;


    s_3_address1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_address1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_3_address1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_address1;
        else 
            s_3_address1 <= "XXX";
        end if; 
    end process;


    s_3_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_3_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_ce0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_3_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_3_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_3_ce0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_ce0;
        else 
            s_3_ce0 <= s_3_ce0_local;
        end if; 
    end process;


    s_3_ce0_local_assign_proc : process(ap_CS_fsm_state140, ap_CS_fsm_state138)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_3_ce0_local <= ap_const_logic_1;
        else 
            s_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_3_ce1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_ce1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_3_ce1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_ce1;
        else 
            s_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_3_d0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_d0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, xor_ln298_fu_439_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_d0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_3_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_3_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_3_d0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_d0;
        else 
            s_3_d0 <= xor_ln298_fu_439_p2;
        end if; 
    end process;

    s_3_d1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_d1;

    s_3_we0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_we0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we0, s_3_we0_out, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_we0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_3_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_3_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_3_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_3_we0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_3_we0;
        else 
            s_3_we0 <= (s_3_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_3_we0_local_assign_proc : process(trunc_ln298_1_reg_583, ap_CS_fsm_state140)
    begin
        if (((trunc_ln298_1_reg_583 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_3_we0_local <= ap_const_logic_1;
        else 
            s_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_3_we0_out <= s_3_we0_local;

    s_3_we1_assign_proc : process(grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we1, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_3_we1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_3_we1;
        else 
            s_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_4_address0_assign_proc : process(ap_CS_fsm_state2, s_4_addr_reg_578, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_address0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_address0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_4_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_4_address0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_4_address0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_address0;
        else 
            s_4_address0 <= s_4_addr_reg_578;
        end if; 
    end process;


    s_4_address1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_address1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_4_address1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_address1;
        else 
            s_4_address1 <= "XXX";
        end if; 
    end process;


    s_4_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_ce0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, s_4_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_ce0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_4_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_4_ce0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_4_ce0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_ce0;
        else 
            s_4_ce0 <= s_4_ce0_local;
        end if; 
    end process;


    s_4_ce0_local_assign_proc : process(ap_CS_fsm_state140, ap_CS_fsm_state138)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_4_ce0_local <= ap_const_logic_1;
        else 
            s_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_4_ce1_assign_proc : process(grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce1, grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce1, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_ce1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_4_ce1 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_ce1;
        else 
            s_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_4_d0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_d0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_d0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d0, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75, xor_ln298_fu_439_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_d0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_4_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_4_d0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_4_d0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_d0;
        else 
            s_4_d0 <= xor_ln298_fu_439_p2;
        end if; 
    end process;

    s_4_d1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_d1;

    s_4_we0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_we0, grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_we0, grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we0, s_4_we0_out, ap_CS_fsm_state76, ap_CS_fsm_state73, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_we0 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            s_4_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_word_loop_fu_216_s_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            s_4_we0 <= grp_keccak_absorb_once_hls_Pipeline_absorb_remaining_fu_198_s_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_4_we0 <= grp_keccak_absorb_once_hls_Pipeline_init_state_fu_184_s_4_we0;
        else 
            s_4_we0 <= (s_4_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_4_we0_local_assign_proc : process(trunc_ln298_1_reg_583, ap_CS_fsm_state140)
    begin
        if ((not((trunc_ln298_1_reg_583 = ap_const_lv3_3)) and not((trunc_ln298_1_reg_583 = ap_const_lv3_2)) and not((trunc_ln298_1_reg_583 = ap_const_lv3_1)) and not((trunc_ln298_1_reg_583 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            s_4_we0_local <= ap_const_logic_1;
        else 
            s_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_4_we0_out <= s_4_we0_local;

    s_4_we1_assign_proc : process(grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we1, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_4_we1 <= grp_KeccakF1600_StatePermute_HLS_fu_233_state_4_we1;
        else 
            s_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln277_fu_268_p3 <= 
        ap_const_lv64_87 when (empty_reg_497(0) = '1') else 
        inlen;
    shl_ln1_fu_418_p3 <= (trunc_ln298_reg_538 & ap_const_lv3_0);
    shl_ln298_fu_429_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv59_6),to_integer(unsigned('0' & zext_ln298_fu_425_p1(31-1 downto 0)))));
    sub_ln262_fu_289_p2 <= std_logic_vector(unsigned(inlen) - unsigned(sub_ln277_fu_285_p2));
    sub_ln277_fu_285_p2 <= std_logic_vector(unsigned(select_ln277_reg_502) - unsigned(urem_ln277_reg_508));
    tmp_1_fu_390_p11 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_1_fu_390_p12 <= grp_fu_342_p2(3 - 1 downto 0);
    tmp_fu_367_p4 <= grp_fu_247_p2(122 downto 64);
    trunc_ln277_fu_351_p1 <= pos_fu_106(11 - 1 downto 0);
    trunc_ln292_fu_314_p1 <= sub_ln277_reg_518(11 - 1 downto 0);
    trunc_ln298_1_fu_386_p1 <= grp_fu_342_p2(3 - 1 downto 0);
    trunc_ln298_fu_325_p1 <= sub_ln262_reg_523(3 - 1 downto 0);
    trunc_ln299_fu_463_p1 <= s_1_q0(63 - 1 downto 0);
    trunc_ln5_fu_328_p4 <= sub_ln262_reg_523(63 downto 3);
    xor_ln298_fu_439_p2 <= (zext_ln298_1_fu_435_p1 xor tmp_1_reg_587);
    xor_ln299_fu_457_p2 <= (bit_sel_fu_449_p3 xor ap_const_lv1_1);
    xor_ln_fu_467_p3 <= (xor_ln299_fu_457_p2 & trunc_ln299_fu_463_p1);
    zext_ln298_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln298_fu_429_p2),64));
    zext_ln298_2_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_367_p4),64));
    zext_ln298_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_418_p3),59));
end behav;
