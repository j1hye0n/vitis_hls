-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hls_sha3_256_hls_Pipeline_extract_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_31 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_31_ap_vld : OUT STD_LOGIC;
    h_30 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_30_ap_vld : OUT STD_LOGIC;
    h_29 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_29_ap_vld : OUT STD_LOGIC;
    h_28 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_28_ap_vld : OUT STD_LOGIC;
    h_27 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_27_ap_vld : OUT STD_LOGIC;
    h_26 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_26_ap_vld : OUT STD_LOGIC;
    h_25 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_25_ap_vld : OUT STD_LOGIC;
    h_24 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_24_ap_vld : OUT STD_LOGIC;
    h_23 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_23_ap_vld : OUT STD_LOGIC;
    h_22 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_22_ap_vld : OUT STD_LOGIC;
    h_21 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_21_ap_vld : OUT STD_LOGIC;
    h_20 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_20_ap_vld : OUT STD_LOGIC;
    h_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_19_ap_vld : OUT STD_LOGIC;
    h_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_18_ap_vld : OUT STD_LOGIC;
    h_17 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_17_ap_vld : OUT STD_LOGIC;
    h_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_16_ap_vld : OUT STD_LOGIC;
    h_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_15_ap_vld : OUT STD_LOGIC;
    h_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_14_ap_vld : OUT STD_LOGIC;
    h_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_13_ap_vld : OUT STD_LOGIC;
    h_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_12_ap_vld : OUT STD_LOGIC;
    h_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_11_ap_vld : OUT STD_LOGIC;
    h_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_10_ap_vld : OUT STD_LOGIC;
    h_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_9_ap_vld : OUT STD_LOGIC;
    h_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_8_ap_vld : OUT STD_LOGIC;
    h_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_7_ap_vld : OUT STD_LOGIC;
    h_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_6_ap_vld : OUT STD_LOGIC;
    h_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_5_ap_vld : OUT STD_LOGIC;
    h_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_4_ap_vld : OUT STD_LOGIC;
    h_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_3_ap_vld : OUT STD_LOGIC;
    h_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_2_ap_vld : OUT STD_LOGIC;
    h_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_1_ap_vld : OUT STD_LOGIC;
    h_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h_0_ap_vld : OUT STD_LOGIC;
    s_load : IN STD_LOGIC_VECTOR (63 downto 0);
    s_1_load : IN STD_LOGIC_VECTOR (63 downto 0);
    s_2_load : IN STD_LOGIC_VECTOR (63 downto 0);
    s_3_load : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sha3_256_hls_sha3_256_hls_Pipeline_extract_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln325_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i1_fu_134 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_fu_524_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (1 downto 0);
    signal i1_load_load_fu_391_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln47_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_assign_fu_394_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_assign_fu_394_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal u_assign_fu_394_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal u_assign_fu_394_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal u_assign_fu_394_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal u_assign_fu_394_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hls_sparsemux_9_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_64_1_1_U101 : component sha3_256_hls_sparsemux_9_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 64,
        CASE1 => "01",
        din1_WIDTH => 64,
        CASE2 => "10",
        din2_WIDTH => 64,
        CASE3 => "11",
        din3_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => s_load,
        din1 => s_1_load,
        din2 => s_2_load,
        din3 => s_3_load,
        def => u_assign_fu_394_p9,
        sel => ap_sig_allocacmp_i1_load,
        dout => u_assign_fu_394_p11);

    flow_control_loop_pipe_sequential_init_U : component sha3_256_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i1_fu_134 <= i_fu_524_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln325_fu_530_p2)
    begin
        if (((icmp_ln325_fu_530_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_state1, i1_fu_134, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_134;
        end if; 
    end process;

    h_0 <= trunc_ln47_fu_418_p1;

    h_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_0_ap_vld <= ap_const_logic_1;
        else 
            h_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_1 <= u_assign_fu_394_p11(15 downto 8);
    h_10 <= u_assign_fu_394_p11(23 downto 16);

    h_10_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_10_ap_vld <= ap_const_logic_1;
        else 
            h_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_11 <= u_assign_fu_394_p11(31 downto 24);

    h_11_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_11_ap_vld <= ap_const_logic_1;
        else 
            h_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_12 <= u_assign_fu_394_p11(39 downto 32);

    h_12_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_12_ap_vld <= ap_const_logic_1;
        else 
            h_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_13 <= u_assign_fu_394_p11(47 downto 40);

    h_13_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_13_ap_vld <= ap_const_logic_1;
        else 
            h_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_14 <= u_assign_fu_394_p11(55 downto 48);

    h_14_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_14_ap_vld <= ap_const_logic_1;
        else 
            h_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_15 <= u_assign_fu_394_p11(63 downto 56);

    h_15_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_15_ap_vld <= ap_const_logic_1;
        else 
            h_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_16 <= trunc_ln47_fu_418_p1;

    h_16_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_16_ap_vld <= ap_const_logic_1;
        else 
            h_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_17 <= u_assign_fu_394_p11(15 downto 8);

    h_17_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_17_ap_vld <= ap_const_logic_1;
        else 
            h_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_18 <= u_assign_fu_394_p11(23 downto 16);

    h_18_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_18_ap_vld <= ap_const_logic_1;
        else 
            h_18_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_19 <= u_assign_fu_394_p11(31 downto 24);

    h_19_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_19_ap_vld <= ap_const_logic_1;
        else 
            h_19_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    h_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_1_ap_vld <= ap_const_logic_1;
        else 
            h_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_2 <= u_assign_fu_394_p11(23 downto 16);
    h_20 <= u_assign_fu_394_p11(39 downto 32);

    h_20_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_20_ap_vld <= ap_const_logic_1;
        else 
            h_20_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_21 <= u_assign_fu_394_p11(47 downto 40);

    h_21_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_21_ap_vld <= ap_const_logic_1;
        else 
            h_21_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_22 <= u_assign_fu_394_p11(55 downto 48);

    h_22_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_22_ap_vld <= ap_const_logic_1;
        else 
            h_22_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_23 <= u_assign_fu_394_p11(63 downto 56);

    h_23_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_2))) then 
            h_23_ap_vld <= ap_const_logic_1;
        else 
            h_23_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_24 <= trunc_ln47_fu_418_p1;

    h_24_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_24_ap_vld <= ap_const_logic_1;
        else 
            h_24_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_25 <= u_assign_fu_394_p11(15 downto 8);

    h_25_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_25_ap_vld <= ap_const_logic_1;
        else 
            h_25_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_26 <= u_assign_fu_394_p11(23 downto 16);

    h_26_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_26_ap_vld <= ap_const_logic_1;
        else 
            h_26_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_27 <= u_assign_fu_394_p11(31 downto 24);

    h_27_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_27_ap_vld <= ap_const_logic_1;
        else 
            h_27_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_28 <= u_assign_fu_394_p11(39 downto 32);

    h_28_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_28_ap_vld <= ap_const_logic_1;
        else 
            h_28_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_29 <= u_assign_fu_394_p11(47 downto 40);

    h_29_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_29_ap_vld <= ap_const_logic_1;
        else 
            h_29_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    h_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_2_ap_vld <= ap_const_logic_1;
        else 
            h_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_3 <= u_assign_fu_394_p11(31 downto 24);
    h_30 <= u_assign_fu_394_p11(55 downto 48);

    h_30_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_30_ap_vld <= ap_const_logic_1;
        else 
            h_30_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_31 <= u_assign_fu_394_p11(63 downto 56);

    h_31_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_3))) then 
            h_31_ap_vld <= ap_const_logic_1;
        else 
            h_31_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    h_3_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_3_ap_vld <= ap_const_logic_1;
        else 
            h_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_4 <= u_assign_fu_394_p11(39 downto 32);

    h_4_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_4_ap_vld <= ap_const_logic_1;
        else 
            h_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_5 <= u_assign_fu_394_p11(47 downto 40);

    h_5_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_5_ap_vld <= ap_const_logic_1;
        else 
            h_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_6 <= u_assign_fu_394_p11(55 downto 48);

    h_6_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_6_ap_vld <= ap_const_logic_1;
        else 
            h_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_7 <= u_assign_fu_394_p11(63 downto 56);

    h_7_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_0))) then 
            h_7_ap_vld <= ap_const_logic_1;
        else 
            h_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_8 <= trunc_ln47_fu_418_p1;

    h_8_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_8_ap_vld <= ap_const_logic_1;
        else 
            h_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_9 <= u_assign_fu_394_p11(15 downto 8);

    h_9_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, i1_load_load_fu_391_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (i1_load_load_fu_391_p1 = ap_const_lv2_1))) then 
            h_9_ap_vld <= ap_const_logic_1;
        else 
            h_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i1_load_load_fu_391_p1 <= ap_sig_allocacmp_i1_load;
    i_fu_524_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv2_1));
    icmp_ln325_fu_530_p2 <= "1" when (ap_sig_allocacmp_i1_load = ap_const_lv2_3) else "0";
    trunc_ln47_fu_418_p1 <= u_assign_fu_394_p11(8 - 1 downto 0);
    u_assign_fu_394_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
end behav;
