// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha3_256_hls_sha3_256_hls_Pipeline_extract_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h_31,
        h_31_ap_vld,
        h_30,
        h_30_ap_vld,
        h_29,
        h_29_ap_vld,
        h_28,
        h_28_ap_vld,
        h_27,
        h_27_ap_vld,
        h_26,
        h_26_ap_vld,
        h_25,
        h_25_ap_vld,
        h_24,
        h_24_ap_vld,
        h_23,
        h_23_ap_vld,
        h_22,
        h_22_ap_vld,
        h_21,
        h_21_ap_vld,
        h_20,
        h_20_ap_vld,
        h_19,
        h_19_ap_vld,
        h_18,
        h_18_ap_vld,
        h_17,
        h_17_ap_vld,
        h_16,
        h_16_ap_vld,
        h_15,
        h_15_ap_vld,
        h_14,
        h_14_ap_vld,
        h_13,
        h_13_ap_vld,
        h_12,
        h_12_ap_vld,
        h_11,
        h_11_ap_vld,
        h_10,
        h_10_ap_vld,
        h_9,
        h_9_ap_vld,
        h_8,
        h_8_ap_vld,
        h_7,
        h_7_ap_vld,
        h_6,
        h_6_ap_vld,
        h_5,
        h_5_ap_vld,
        h_4,
        h_4_ap_vld,
        h_3,
        h_3_ap_vld,
        h_2,
        h_2_ap_vld,
        h_1,
        h_1_ap_vld,
        h_0,
        h_0_ap_vld,
        s_load,
        s_1_load,
        s_2_load,
        s_3_load
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] h_31;
output   h_31_ap_vld;
output  [7:0] h_30;
output   h_30_ap_vld;
output  [7:0] h_29;
output   h_29_ap_vld;
output  [7:0] h_28;
output   h_28_ap_vld;
output  [7:0] h_27;
output   h_27_ap_vld;
output  [7:0] h_26;
output   h_26_ap_vld;
output  [7:0] h_25;
output   h_25_ap_vld;
output  [7:0] h_24;
output   h_24_ap_vld;
output  [7:0] h_23;
output   h_23_ap_vld;
output  [7:0] h_22;
output   h_22_ap_vld;
output  [7:0] h_21;
output   h_21_ap_vld;
output  [7:0] h_20;
output   h_20_ap_vld;
output  [7:0] h_19;
output   h_19_ap_vld;
output  [7:0] h_18;
output   h_18_ap_vld;
output  [7:0] h_17;
output   h_17_ap_vld;
output  [7:0] h_16;
output   h_16_ap_vld;
output  [7:0] h_15;
output   h_15_ap_vld;
output  [7:0] h_14;
output   h_14_ap_vld;
output  [7:0] h_13;
output   h_13_ap_vld;
output  [7:0] h_12;
output   h_12_ap_vld;
output  [7:0] h_11;
output   h_11_ap_vld;
output  [7:0] h_10;
output   h_10_ap_vld;
output  [7:0] h_9;
output   h_9_ap_vld;
output  [7:0] h_8;
output   h_8_ap_vld;
output  [7:0] h_7;
output   h_7_ap_vld;
output  [7:0] h_6;
output   h_6_ap_vld;
output  [7:0] h_5;
output   h_5_ap_vld;
output  [7:0] h_4;
output   h_4_ap_vld;
output  [7:0] h_3;
output   h_3_ap_vld;
output  [7:0] h_2;
output   h_2_ap_vld;
output  [7:0] h_1;
output   h_1_ap_vld;
output  [7:0] h_0;
output   h_0_ap_vld;
input  [63:0] s_load;
input  [63:0] s_1_load;
input  [63:0] s_2_load;
input  [63:0] s_3_load;

reg ap_idle;
reg h_31_ap_vld;
reg h_30_ap_vld;
reg h_29_ap_vld;
reg h_28_ap_vld;
reg h_27_ap_vld;
reg h_26_ap_vld;
reg h_25_ap_vld;
reg h_24_ap_vld;
reg h_23_ap_vld;
reg h_22_ap_vld;
reg h_21_ap_vld;
reg h_20_ap_vld;
reg h_19_ap_vld;
reg h_18_ap_vld;
reg h_17_ap_vld;
reg h_16_ap_vld;
reg h_15_ap_vld;
reg h_14_ap_vld;
reg h_13_ap_vld;
reg h_12_ap_vld;
reg h_11_ap_vld;
reg h_10_ap_vld;
reg h_9_ap_vld;
reg h_8_ap_vld;
reg h_7_ap_vld;
reg h_6_ap_vld;
reg h_5_ap_vld;
reg h_4_ap_vld;
reg h_3_ap_vld;
reg h_2_ap_vld;
reg h_1_ap_vld;
reg h_0_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln325_fu_530_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] i1_fu_134;
wire   [1:0] i_fu_524_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i1_load;
wire   [1:0] i1_load_load_fu_391_p1;
wire   [7:0] trunc_ln47_fu_418_p1;
wire   [63:0] u_assign_fu_394_p9;
wire   [63:0] u_assign_fu_394_p11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] u_assign_fu_394_p1;
wire   [1:0] u_assign_fu_394_p3;
wire  signed [1:0] u_assign_fu_394_p5;
wire  signed [1:0] u_assign_fu_394_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i1_fu_134 = 2'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) sha3_256_hls_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U101(
    .din0(s_load),
    .din1(s_1_load),
    .din2(s_2_load),
    .din3(s_3_load),
    .def(u_assign_fu_394_p9),
    .sel(ap_sig_allocacmp_i1_load),
    .dout(u_assign_fu_394_p11)
);

sha3_256_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_fu_134 <= i_fu_524_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln325_fu_530_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i1_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_0_ap_vld = 1'b1;
    end else begin
        h_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_10_ap_vld = 1'b1;
    end else begin
        h_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_11_ap_vld = 1'b1;
    end else begin
        h_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_12_ap_vld = 1'b1;
    end else begin
        h_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_13_ap_vld = 1'b1;
    end else begin
        h_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_14_ap_vld = 1'b1;
    end else begin
        h_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_15_ap_vld = 1'b1;
    end else begin
        h_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_16_ap_vld = 1'b1;
    end else begin
        h_16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_17_ap_vld = 1'b1;
    end else begin
        h_17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_18_ap_vld = 1'b1;
    end else begin
        h_18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_19_ap_vld = 1'b1;
    end else begin
        h_19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_1_ap_vld = 1'b1;
    end else begin
        h_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_20_ap_vld = 1'b1;
    end else begin
        h_20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_21_ap_vld = 1'b1;
    end else begin
        h_21_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_22_ap_vld = 1'b1;
    end else begin
        h_22_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd2))) begin
        h_23_ap_vld = 1'b1;
    end else begin
        h_23_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_24_ap_vld = 1'b1;
    end else begin
        h_24_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_25_ap_vld = 1'b1;
    end else begin
        h_25_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_26_ap_vld = 1'b1;
    end else begin
        h_26_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_27_ap_vld = 1'b1;
    end else begin
        h_27_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_28_ap_vld = 1'b1;
    end else begin
        h_28_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_29_ap_vld = 1'b1;
    end else begin
        h_29_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_2_ap_vld = 1'b1;
    end else begin
        h_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_30_ap_vld = 1'b1;
    end else begin
        h_30_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd3))) begin
        h_31_ap_vld = 1'b1;
    end else begin
        h_31_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_3_ap_vld = 1'b1;
    end else begin
        h_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_4_ap_vld = 1'b1;
    end else begin
        h_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_5_ap_vld = 1'b1;
    end else begin
        h_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_6_ap_vld = 1'b1;
    end else begin
        h_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd0))) begin
        h_7_ap_vld = 1'b1;
    end else begin
        h_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_8_ap_vld = 1'b1;
    end else begin
        h_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (i1_load_load_fu_391_p1 == 2'd1))) begin
        h_9_ap_vld = 1'b1;
    end else begin
        h_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign h_0 = trunc_ln47_fu_418_p1;

assign h_1 = {{u_assign_fu_394_p11[15:8]}};

assign h_10 = {{u_assign_fu_394_p11[23:16]}};

assign h_11 = {{u_assign_fu_394_p11[31:24]}};

assign h_12 = {{u_assign_fu_394_p11[39:32]}};

assign h_13 = {{u_assign_fu_394_p11[47:40]}};

assign h_14 = {{u_assign_fu_394_p11[55:48]}};

assign h_15 = {{u_assign_fu_394_p11[63:56]}};

assign h_16 = trunc_ln47_fu_418_p1;

assign h_17 = {{u_assign_fu_394_p11[15:8]}};

assign h_18 = {{u_assign_fu_394_p11[23:16]}};

assign h_19 = {{u_assign_fu_394_p11[31:24]}};

assign h_2 = {{u_assign_fu_394_p11[23:16]}};

assign h_20 = {{u_assign_fu_394_p11[39:32]}};

assign h_21 = {{u_assign_fu_394_p11[47:40]}};

assign h_22 = {{u_assign_fu_394_p11[55:48]}};

assign h_23 = {{u_assign_fu_394_p11[63:56]}};

assign h_24 = trunc_ln47_fu_418_p1;

assign h_25 = {{u_assign_fu_394_p11[15:8]}};

assign h_26 = {{u_assign_fu_394_p11[23:16]}};

assign h_27 = {{u_assign_fu_394_p11[31:24]}};

assign h_28 = {{u_assign_fu_394_p11[39:32]}};

assign h_29 = {{u_assign_fu_394_p11[47:40]}};

assign h_3 = {{u_assign_fu_394_p11[31:24]}};

assign h_30 = {{u_assign_fu_394_p11[55:48]}};

assign h_31 = {{u_assign_fu_394_p11[63:56]}};

assign h_4 = {{u_assign_fu_394_p11[39:32]}};

assign h_5 = {{u_assign_fu_394_p11[47:40]}};

assign h_6 = {{u_assign_fu_394_p11[55:48]}};

assign h_7 = {{u_assign_fu_394_p11[63:56]}};

assign h_8 = trunc_ln47_fu_418_p1;

assign h_9 = {{u_assign_fu_394_p11[15:8]}};

assign i1_load_load_fu_391_p1 = ap_sig_allocacmp_i1_load;

assign i_fu_524_p2 = (ap_sig_allocacmp_i1_load + 2'd1);

assign icmp_ln325_fu_530_p2 = ((ap_sig_allocacmp_i1_load == 2'd3) ? 1'b1 : 1'b0);

assign trunc_ln47_fu_418_p1 = u_assign_fu_394_p11[7:0];

assign u_assign_fu_394_p9 = 'bx;

endmodule //sha3_256_hls_sha3_256_hls_Pipeline_extract_output
