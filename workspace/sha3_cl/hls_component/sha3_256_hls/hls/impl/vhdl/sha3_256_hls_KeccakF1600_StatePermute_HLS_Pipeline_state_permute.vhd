-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hls_KeccakF1600_StatePermute_HLS_Pipeline_state_permute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Aba : IN STD_LOGIC_VECTOR (63 downto 0);
    Abe : IN STD_LOGIC_VECTOR (63 downto 0);
    Abi : IN STD_LOGIC_VECTOR (63 downto 0);
    Abo : IN STD_LOGIC_VECTOR (63 downto 0);
    Abu : IN STD_LOGIC_VECTOR (63 downto 0);
    Aga : IN STD_LOGIC_VECTOR (63 downto 0);
    Age : IN STD_LOGIC_VECTOR (63 downto 0);
    Agi : IN STD_LOGIC_VECTOR (63 downto 0);
    Ago : IN STD_LOGIC_VECTOR (63 downto 0);
    Agu : IN STD_LOGIC_VECTOR (63 downto 0);
    Aka : IN STD_LOGIC_VECTOR (63 downto 0);
    Ake : IN STD_LOGIC_VECTOR (63 downto 0);
    Aki : IN STD_LOGIC_VECTOR (63 downto 0);
    Ako : IN STD_LOGIC_VECTOR (63 downto 0);
    Aku : IN STD_LOGIC_VECTOR (63 downto 0);
    Ama : IN STD_LOGIC_VECTOR (63 downto 0);
    Ame : IN STD_LOGIC_VECTOR (63 downto 0);
    Ami : IN STD_LOGIC_VECTOR (63 downto 0);
    Amo : IN STD_LOGIC_VECTOR (63 downto 0);
    Amu : IN STD_LOGIC_VECTOR (63 downto 0);
    Asa : IN STD_LOGIC_VECTOR (63 downto 0);
    Ase : IN STD_LOGIC_VECTOR (63 downto 0);
    Asi : IN STD_LOGIC_VECTOR (63 downto 0);
    Aso : IN STD_LOGIC_VECTOR (63 downto 0);
    Asu : IN STD_LOGIC_VECTOR (63 downto 0);
    Aba_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Aba_1_out_ap_vld : OUT STD_LOGIC;
    Abe_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Abe_1_out_ap_vld : OUT STD_LOGIC;
    Abi_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Abi_1_out_ap_vld : OUT STD_LOGIC;
    Abo_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Abo_1_out_ap_vld : OUT STD_LOGIC;
    Abu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Abu_1_out_ap_vld : OUT STD_LOGIC;
    Aga_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Aga_1_out_ap_vld : OUT STD_LOGIC;
    Age_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Age_1_out_ap_vld : OUT STD_LOGIC;
    Agi_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Agi_1_out_ap_vld : OUT STD_LOGIC;
    Ago_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ago_1_out_ap_vld : OUT STD_LOGIC;
    Agu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Agu_1_out_ap_vld : OUT STD_LOGIC;
    Aka_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Aka_1_out_ap_vld : OUT STD_LOGIC;
    Ake_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ake_1_out_ap_vld : OUT STD_LOGIC;
    Aki_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Aki_1_out_ap_vld : OUT STD_LOGIC;
    Ako_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ako_1_out_ap_vld : OUT STD_LOGIC;
    Aku_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Aku_1_out_ap_vld : OUT STD_LOGIC;
    Ama_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ama_1_out_ap_vld : OUT STD_LOGIC;
    Ame_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ame_1_out_ap_vld : OUT STD_LOGIC;
    Ami_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ami_1_out_ap_vld : OUT STD_LOGIC;
    Amo_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Amo_1_out_ap_vld : OUT STD_LOGIC;
    Amu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Amu_1_out_ap_vld : OUT STD_LOGIC;
    Asa_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Asa_1_out_ap_vld : OUT STD_LOGIC;
    Ase_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Ase_1_out_ap_vld : OUT STD_LOGIC;
    Asi_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Asi_1_out_ap_vld : OUT STD_LOGIC;
    Aso_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Aso_1_out_ap_vld : OUT STD_LOGIC;
    Asu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    Asu_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha3_256_hls_KeccakF1600_StatePermute_HLS_Pipeline_state_permute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv64_800000000000808A : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000001000000010001010";
    constant ap_const_lv64_808B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000010001011";
    constant ap_const_lv64_8000000080008081 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000010000000000000001000000010000001";
    constant ap_const_lv64_8A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001010";
    constant ap_const_lv64_80008009 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000001000000000001001";
    constant ap_const_lv64_8000808B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000001000000010001011";
    constant ap_const_lv64_8000000000008089 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000001000000010001001";
    constant ap_const_lv64_8000000000008002 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000001000000000000010";
    constant ap_const_lv64_800A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000000001010";
    constant ap_const_lv64_80000001 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv64_8082 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000010000010";
    constant ap_const_lv64_8000000080008000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000010000000000000001000000000000000";
    constant ap_const_lv64_8000000000008009 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000001000000000001001";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv64_8000000A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000000000000000001010";
    constant ap_const_lv64_800000000000008B : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000010001011";
    constant ap_const_lv64_8000000000008003 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000001000000000000011";
    constant ap_const_lv64_8000000000000080 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000010000000";
    constant ap_const_lv64_800000008000000A : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000010000000000000000000000000001010";
    constant ap_const_lv64_8000000000008080 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000001000000010000000";
    constant ap_const_lv64_8000000080008008 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000010000000000000001000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln98_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal round_1_reg_4254 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal Ebe_fu_1443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebe_reg_4262 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebu_fu_1497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebu_reg_4267 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ege_fu_1673_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ege_reg_4272 : STD_LOGIC_VECTOR (63 downto 0);
    signal Egu_fu_1727_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Egu_reg_4277 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eke_fu_1901_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eke_reg_4282 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eku_fu_1955_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eku_reg_4287 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eme_fu_2131_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eme_reg_4292 : STD_LOGIC_VECTOR (63 downto 0);
    signal Emu_fu_2185_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Emu_reg_4297 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ese_fu_2361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ese_reg_4302 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esu_fu_2415_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esu_reg_4307 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_6_fu_2439_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_6_reg_4312 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_6_fu_2511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_6_reg_4317 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln182_fu_2567_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln182_reg_4322 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_reg_4327 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln185_fu_2631_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln185_reg_4332 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_16_reg_4337 : STD_LOGIC_VECTOR (0 downto 0);
    signal Eba_2_fu_2643_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eba_2_reg_4342 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln189_fu_2655_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln189_reg_4349 : STD_LOGIC_VECTOR (20 downto 0);
    signal lshr_ln24_reg_4354 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln190_fu_2675_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln190_reg_4359 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln25_reg_4364 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln198_fu_2695_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln198_reg_4369 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln27_reg_4374 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln200_fu_2715_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln200_reg_4379 : STD_LOGIC_VECTOR (60 downto 0);
    signal lshr_ln29_reg_4384 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln202_fu_2735_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln202_reg_4389 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln31_reg_4394 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln210_fu_2755_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln210_reg_4399 : STD_LOGIC_VECTOR (57 downto 0);
    signal lshr_ln32_reg_4404 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln211_fu_2775_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln211_reg_4409 : STD_LOGIC_VECTOR (38 downto 0);
    signal lshr_ln33_reg_4414 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln213_fu_2795_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln213_reg_4419 : STD_LOGIC_VECTOR (45 downto 0);
    signal lshr_ln35_reg_4424 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln221_fu_2815_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln221_reg_4429 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln37_reg_4434 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln223_fu_2835_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln223_reg_4439 : STD_LOGIC_VECTOR (48 downto 0);
    signal lshr_ln39_reg_4444 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln224_fu_2855_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln224_reg_4449 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln40_reg_4454 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln231_fu_2875_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln231_reg_4459 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln41_reg_4464 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln232_fu_2895_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln232_reg_4469 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln42_reg_4474 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln234_fu_2915_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln234_reg_4479 : STD_LOGIC_VECTOR (22 downto 0);
    signal lshr_ln44_reg_4484 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal Asu_1_fu_340 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Asu_3_fu_3816_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal Aso_1_fu_344 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Aso_3_fu_3798_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asi_1_fu_348 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Asi_3_fu_3780_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ase_1_fu_352 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ase_3_fu_3762_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asa_1_fu_356 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Asa_3_fu_3744_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Amu_1_fu_360 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Amu_3_fu_3654_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Amo_1_fu_364 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Amo_3_fu_3636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ami_1_fu_368 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ami_3_fu_3618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ame_1_fu_372 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ame_3_fu_3600_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ama_1_fu_376 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ama_3_fu_3582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aku_1_fu_380 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Aku_3_fu_3492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ako_1_fu_384 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ako_3_fu_3474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aki_1_fu_388 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Aki_3_fu_3456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ake_1_fu_392 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ake_3_fu_3438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aka_1_fu_396 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Aka_3_fu_3420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Agu_1_fu_400 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Agu_3_fu_3332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ago_1_fu_404 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Ago_3_fu_3314_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Agi_1_fu_408 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Agi_3_fu_3296_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Age_1_fu_412 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Age_3_fu_3278_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aga_1_fu_416 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Aga_3_fu_3260_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abo_1_fu_420 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Abo_3_fu_3153_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abu_1_fu_424 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Abu_3_fu_3170_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abi_1_fu_428 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Abi_3_fu_3136_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abe_1_fu_432 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Abe_3_fu_3118_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aba_1_fu_436 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal Aba_3_fu_3101_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_fu_440 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln98_fu_2929_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal xor_ln104_fu_983_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln104_2_fu_995_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln104_1_fu_989_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_2_fu_1019_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_1_fu_1013_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln106_fu_1031_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln106_1_fu_1043_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln106_2_fu_1037_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln107_1_fu_1061_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln107_2_fu_1067_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln107_fu_1055_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln108_fu_1079_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln108_1_fu_1085_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln108_2_fu_1091_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCe_fu_1025_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln111_fu_1103_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_6_fu_1107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal BCu_fu_1097_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_1115_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_fu_1049_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln112_fu_1129_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_7_fu_1133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1_fu_1141_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_fu_1001_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_fu_1073_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln113_fu_1155_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_8_fu_1159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2_fu_1167_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln114_fu_1181_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_9_fu_1185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln3_fu_1193_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln115_fu_1207_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_fu_1211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4_fu_1219_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Da_fu_1123_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal De_fu_1149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Age_2_fu_1239_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln118_fu_1245_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln5_fu_1249_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal Di_fu_1175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aki_2_fu_1267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln119_fu_1273_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal lshr_ln6_fu_1277_p4 : STD_LOGIC_VECTOR (42 downto 0);
    signal Do_fu_1201_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Amo_2_fu_1295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln120_fu_1301_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal lshr_ln7_fu_1305_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal Du_fu_1227_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asu_2_fu_1323_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln121_fu_1329_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal lshr_ln8_fu_1333_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_1351_p25 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCe_1_fu_1259_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_1_fu_1287_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln122_fu_1407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aba_4_fu_1233_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1351_p27 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln122_1_fu_1419_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln122_fu_1413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_1_fu_1315_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln123_fu_1431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln123_fu_1437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_1_fu_1343_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln124_fu_1449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln124_fu_1455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln125_fu_1467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln125_fu_1473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln126_fu_1485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln126_fu_1491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abo_2_fu_1503_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln128_fu_1509_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln9_fu_1513_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal Agu_2_fu_1531_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln129_fu_1537_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal lshr_ln_fu_1541_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal Aka_2_fu_1559_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln130_fu_1565_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal lshr_ln1_fu_1569_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal Ame_2_fu_1587_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln131_fu_1593_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln2_fu_1597_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal Asi_2_fu_1615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln132_fu_1621_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln3_fu_1625_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal BCe_2_fu_1551_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_2_fu_1579_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln133_fu_1643_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_2_fu_1523_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln133_fu_1649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_2_fu_1607_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln134_fu_1661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln134_fu_1667_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_2_fu_1635_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln135_fu_1679_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln135_fu_1685_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln136_fu_1697_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln136_fu_1703_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln137_fu_1715_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln137_fu_1721_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abe_2_fu_1733_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln139_fu_1739_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_11_fu_1743_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Agi_2_fu_1759_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln140_fu_1765_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal lshr_ln4_fu_1769_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal Ako_2_fu_1787_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln141_fu_1793_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal lshr_ln10_fu_1797_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal Amu_2_fu_1815_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln142_fu_1821_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln11_fu_1825_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal Asa_2_fu_1843_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln143_fu_1849_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal lshr_ln12_fu_1853_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal BCe_3_fu_1779_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_3_fu_1807_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln144_fu_1871_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln144_fu_1877_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_3_fu_1751_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_3_fu_1835_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln145_fu_1889_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln145_fu_1895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_3_fu_1863_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln146_fu_1907_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln146_fu_1913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_1925_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln147_fu_1931_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln148_fu_1943_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln148_fu_1949_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abu_2_fu_1961_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln150_fu_1967_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal lshr_ln13_fu_1971_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal Aga_2_fu_1989_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln151_fu_1995_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln14_fu_1999_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal Ake_2_fu_2017_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln152_fu_2023_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln15_fu_2027_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal Ami_2_fu_2045_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln153_fu_2051_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal lshr_ln16_fu_2055_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal Aso_2_fu_2073_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln154_fu_2079_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln17_fu_2083_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal BCe_4_fu_2009_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_4_fu_2037_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln155_fu_2101_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln155_fu_2107_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_4_fu_1981_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_4_fu_2065_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln156_fu_2119_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln156_fu_2125_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_4_fu_2093_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln157_fu_2137_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln157_fu_2143_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln158_fu_2155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln158_fu_2161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln159_fu_2173_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln159_fu_2179_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abi_2_fu_2191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln161_fu_2197_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln18_fu_2201_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal Ago_2_fu_2219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln162_fu_2225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln19_fu_2229_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal Aku_2_fu_2247_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln163_fu_2253_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln20_fu_2257_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal Ama_2_fu_2275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln164_fu_2281_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal lshr_ln21_fu_2285_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal Ase_2_fu_2303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln165_fu_2309_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal lshr_ln22_fu_2313_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal BCe_5_fu_2239_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_5_fu_2267_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln166_fu_2331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln166_fu_2337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_5_fu_2211_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_5_fu_2295_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln167_fu_2349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln167_fu_2355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_5_fu_2323_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln168_fu_2367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln168_fu_2373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln169_fu_2385_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln169_fu_2391_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln170_fu_2403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln170_fu_2409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esa_fu_2343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eka_fu_1883_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ega_fu_1655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eba_fu_1425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln174_1_fu_2427_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ema_fu_2113_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln174_2_fu_2433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln174_fu_2421_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln175_1_fu_2451_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln175_2_fu_2457_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln175_fu_2445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eki_fu_1919_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Emi_fu_2149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Egi_fu_1691_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebi_fu_1461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln176_1_fu_2475_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esi_fu_2379_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln176_2_fu_2481_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln176_fu_2469_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebo_fu_1479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ego_fu_1709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eso_fu_2397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Emo_fu_2167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln177_1_fu_2499_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eko_fu_1937_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln177_2_fu_2505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln177_fu_2493_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln178_1_fu_2523_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln178_2_fu_2529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln178_fu_2517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCe_6_fu_2463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln181_fu_2541_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_fu_2545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5_fu_2553_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_6_fu_2535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_6_fu_2487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln183_fu_2579_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_14_fu_2583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln7_fu_2591_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln184_fu_2605_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_fu_2609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_fu_2617_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Da_1_fu_2561_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Di_1_fu_2599_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eki_1_fu_2649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Do_1_fu_2625_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Emo_1_fu_2669_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebo_1_fu_2689_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eka_1_fu_2709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esi_1_fu_2729_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Egi_1_fu_2749_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eko_1_fu_2769_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esa_1_fu_2789_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ega_1_fu_2809_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Emi_1_fu_2829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eso_1_fu_2849_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebi_1_fu_2869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ego_1_fu_2889_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ema_1_fu_2909_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln6_fu_2940_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln9_fu_2951_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal De_1_fu_2946_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ege_1_fu_2962_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln188_fu_2967_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lshr_ln23_fu_2971_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal Du_1_fu_2957_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Esu_1_fu_3001_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln191_fu_3006_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal lshr_ln26_fu_3010_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_3028_p25 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCe_7_fu_2981_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_7_fu_2989_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln192_fu_3083_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln192_fu_3089_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_3028_p27 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln192_1_fu_3095_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_7_fu_2995_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln193_fu_3106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln193_fu_3112_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_7_fu_3020_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln194_fu_3124_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln194_fu_3130_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln195_fu_3142_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln195_fu_3148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln196_fu_3159_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln196_fu_3164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Egu_1_fu_3182_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln199_fu_3187_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal lshr_ln28_fu_3191_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal Eme_1_fu_3215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln201_fu_3220_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln30_fu_3224_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal BCe_8_fu_3201_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_8_fu_3209_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln203_fu_3248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln203_fu_3254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_8_fu_3176_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_8_fu_3234_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln204_fu_3266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln204_fu_3272_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_8_fu_3242_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln205_fu_3284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln205_fu_3290_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln206_fu_3302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln206_fu_3308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln207_fu_3320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln207_fu_3326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebe_1_fu_3338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln209_fu_3343_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_17_fu_3347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Emu_1_fu_3375_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln212_fu_3380_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln34_fu_3384_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal BCe_9_fu_3363_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_9_fu_3369_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln214_fu_3408_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_9_fu_3355_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln214_fu_3414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_9_fu_3394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln215_fu_3426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln215_fu_3432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_9_fu_3402_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln216_fu_3444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln216_fu_3450_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln217_fu_3462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln217_fu_3468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln218_fu_3480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln218_fu_3486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ebu_1_fu_3498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln220_fu_3503_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal lshr_ln36_fu_3507_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal Eke_1_fu_3531_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln222_fu_3536_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln38_fu_3540_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal BCe_10_fu_3525_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_10_fu_3550_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln225_fu_3570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_10_fu_3517_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln225_fu_3576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_10_fu_3558_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln226_fu_3588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln226_fu_3594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_10_fu_3564_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln227_fu_3606_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln227_fu_3612_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln228_fu_3624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln228_fu_3630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln229_fu_3642_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln229_fu_3648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Eku_1_fu_3672_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln233_fu_3677_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln43_fu_3681_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal Ese_1_fu_3705_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln235_fu_3710_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal lshr_ln45_fu_3714_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal BCe_11_fu_3666_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCi_11_fu_3691_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln236_fu_3732_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln236_fu_3738_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCa_11_fu_3660_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCo_11_fu_3699_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln237_fu_3750_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln237_fu_3756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal BCu_11_fu_3724_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln238_fu_3768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln238_fu_3774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln239_fu_3786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln239_fu_3792_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln240_fu_3804_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln240_fu_3810_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_1351_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p11 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p13 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p19 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p21 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1351_p23 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p11 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p13 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p19 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p21 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_3028_p23 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hls_sparsemux_25_5_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (4 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (4 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (4 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (4 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (4 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (4 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (4 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (4 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (4 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (4 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (4 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (4 downto 0);
        din11_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_25_5_64_1_1_U15 : component sha3_256_hls_sparsemux_25_5_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000",
        din0_WIDTH => 64,
        CASE1 => "00010",
        din1_WIDTH => 64,
        CASE2 => "00100",
        din2_WIDTH => 64,
        CASE3 => "00110",
        din3_WIDTH => 64,
        CASE4 => "01000",
        din4_WIDTH => 64,
        CASE5 => "01010",
        din5_WIDTH => 64,
        CASE6 => "01100",
        din6_WIDTH => 64,
        CASE7 => "01110",
        din7_WIDTH => 64,
        CASE8 => "10000",
        din8_WIDTH => 64,
        CASE9 => "10010",
        din9_WIDTH => 64,
        CASE10 => "10100",
        din10_WIDTH => 64,
        CASE11 => "10110",
        din11_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 5,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_1,
        din1 => ap_const_lv64_800000000000808A,
        din2 => ap_const_lv64_808B,
        din3 => ap_const_lv64_8000000080008081,
        din4 => ap_const_lv64_8A,
        din5 => ap_const_lv64_80008009,
        din6 => ap_const_lv64_8000808B,
        din7 => ap_const_lv64_8000000000008089,
        din8 => ap_const_lv64_8000000000008002,
        din9 => ap_const_lv64_800A,
        din10 => ap_const_lv64_8000000080008081,
        din11 => ap_const_lv64_80000001,
        def => tmp_fu_1351_p25,
        sel => round_fu_440,
        dout => tmp_fu_1351_p27);

    sparsemux_25_5_64_1_1_U16 : component sha3_256_hls_sparsemux_25_5_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000",
        din0_WIDTH => 64,
        CASE1 => "00010",
        din1_WIDTH => 64,
        CASE2 => "00100",
        din2_WIDTH => 64,
        CASE3 => "00110",
        din3_WIDTH => 64,
        CASE4 => "01000",
        din4_WIDTH => 64,
        CASE5 => "01010",
        din5_WIDTH => 64,
        CASE6 => "01100",
        din6_WIDTH => 64,
        CASE7 => "01110",
        din7_WIDTH => 64,
        CASE8 => "10000",
        din8_WIDTH => 64,
        CASE9 => "10010",
        din9_WIDTH => 64,
        CASE10 => "10100",
        din10_WIDTH => 64,
        CASE11 => "10110",
        din11_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 5,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_8082,
        din1 => ap_const_lv64_8000000080008000,
        din2 => ap_const_lv64_80000001,
        din3 => ap_const_lv64_8000000000008009,
        din4 => ap_const_lv64_88,
        din5 => ap_const_lv64_8000000A,
        din6 => ap_const_lv64_800000000000008B,
        din7 => ap_const_lv64_8000000000008003,
        din8 => ap_const_lv64_8000000000000080,
        din9 => ap_const_lv64_800000008000000A,
        din10 => ap_const_lv64_8000000000008080,
        din11 => ap_const_lv64_8000000080008008,
        def => tmp_3_fu_3028_p25,
        sel => round_1_reg_4254,
        dout => tmp_3_fu_3028_p27);

    flow_control_loop_pipe_sequential_init_U : component sha3_256_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    Aba_1_fu_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Aba_1_fu_436 <= Aba;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Aba_1_fu_436 <= Aba_3_fu_3101_p2;
                end if;
            end if; 
        end if;
    end process;

    Abe_1_fu_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Abe_1_fu_432 <= Abe;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Abe_1_fu_432 <= Abe_3_fu_3118_p2;
                end if;
            end if; 
        end if;
    end process;

    Abi_1_fu_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Abi_1_fu_428 <= Abi;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Abi_1_fu_428 <= Abi_3_fu_3136_p2;
                end if;
            end if; 
        end if;
    end process;

    Abo_1_fu_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Abo_1_fu_420 <= Abo;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Abo_1_fu_420 <= Abo_3_fu_3153_p2;
                end if;
            end if; 
        end if;
    end process;

    Abu_1_fu_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Abu_1_fu_424 <= Abu;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Abu_1_fu_424 <= Abu_3_fu_3170_p2;
                end if;
            end if; 
        end if;
    end process;

    Aga_1_fu_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Aga_1_fu_416 <= Aga;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Aga_1_fu_416 <= Aga_3_fu_3260_p2;
                end if;
            end if; 
        end if;
    end process;

    Age_1_fu_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Age_1_fu_412 <= Age;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Age_1_fu_412 <= Age_3_fu_3278_p2;
                end if;
            end if; 
        end if;
    end process;

    Agi_1_fu_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Agi_1_fu_408 <= Agi;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Agi_1_fu_408 <= Agi_3_fu_3296_p2;
                end if;
            end if; 
        end if;
    end process;

    Ago_1_fu_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ago_1_fu_404 <= Ago;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ago_1_fu_404 <= Ago_3_fu_3314_p2;
                end if;
            end if; 
        end if;
    end process;

    Agu_1_fu_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Agu_1_fu_400 <= Agu;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Agu_1_fu_400 <= Agu_3_fu_3332_p2;
                end if;
            end if; 
        end if;
    end process;

    Aka_1_fu_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Aka_1_fu_396 <= Aka;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Aka_1_fu_396 <= Aka_3_fu_3420_p2;
                end if;
            end if; 
        end if;
    end process;

    Ake_1_fu_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ake_1_fu_392 <= Ake;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ake_1_fu_392 <= Ake_3_fu_3438_p2;
                end if;
            end if; 
        end if;
    end process;

    Aki_1_fu_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Aki_1_fu_388 <= Aki;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Aki_1_fu_388 <= Aki_3_fu_3456_p2;
                end if;
            end if; 
        end if;
    end process;

    Ako_1_fu_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ako_1_fu_384 <= Ako;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ako_1_fu_384 <= Ako_3_fu_3474_p2;
                end if;
            end if; 
        end if;
    end process;

    Aku_1_fu_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Aku_1_fu_380 <= Aku;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Aku_1_fu_380 <= Aku_3_fu_3492_p2;
                end if;
            end if; 
        end if;
    end process;

    Ama_1_fu_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ama_1_fu_376 <= Ama;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ama_1_fu_376 <= Ama_3_fu_3582_p2;
                end if;
            end if; 
        end if;
    end process;

    Ame_1_fu_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ame_1_fu_372 <= Ame;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ame_1_fu_372 <= Ame_3_fu_3600_p2;
                end if;
            end if; 
        end if;
    end process;

    Ami_1_fu_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ami_1_fu_368 <= Ami;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ami_1_fu_368 <= Ami_3_fu_3618_p2;
                end if;
            end if; 
        end if;
    end process;

    Amo_1_fu_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Amo_1_fu_364 <= Amo;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Amo_1_fu_364 <= Amo_3_fu_3636_p2;
                end if;
            end if; 
        end if;
    end process;

    Amu_1_fu_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Amu_1_fu_360 <= Amu;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Amu_1_fu_360 <= Amu_3_fu_3654_p2;
                end if;
            end if; 
        end if;
    end process;

    Asa_1_fu_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Asa_1_fu_356 <= Asa;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Asa_1_fu_356 <= Asa_3_fu_3744_p2;
                end if;
            end if; 
        end if;
    end process;

    Ase_1_fu_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Ase_1_fu_352 <= Ase;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Ase_1_fu_352 <= Ase_3_fu_3762_p2;
                end if;
            end if; 
        end if;
    end process;

    Asi_1_fu_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Asi_1_fu_348 <= Asi;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Asi_1_fu_348 <= Asi_3_fu_3780_p2;
                end if;
            end if; 
        end if;
    end process;

    Aso_1_fu_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Aso_1_fu_344 <= Aso;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Aso_1_fu_344 <= Aso_3_fu_3798_p2;
                end if;
            end if; 
        end if;
    end process;

    Asu_1_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Asu_1_fu_340 <= Asu;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    Asu_1_fu_340 <= Asu_3_fu_3816_p2;
                end if;
            end if; 
        end if;
    end process;

    round_fu_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                round_fu_440 <= ap_const_lv5_0;
            elsif (((icmp_ln98_fu_902_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                round_fu_440 <= add_ln98_fu_2929_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                BCa_6_reg_4312 <= BCa_6_fu_2439_p2;
                BCo_6_reg_4317 <= BCo_6_fu_2511_p2;
                Eba_2_reg_4342 <= Eba_2_fu_2643_p2;
                Ebe_reg_4262 <= Ebe_fu_1443_p2;
                Ebu_reg_4267 <= Ebu_fu_1497_p2;
                Ege_reg_4272 <= Ege_fu_1673_p2;
                Egu_reg_4277 <= Egu_fu_1727_p2;
                Eke_reg_4282 <= Eke_fu_1901_p2;
                Eku_reg_4287 <= Eku_fu_1955_p2;
                Eme_reg_4292 <= Eme_fu_2131_p2;
                Emu_reg_4297 <= Emu_fu_2185_p2;
                Ese_reg_4302 <= Ese_fu_2361_p2;
                Esu_reg_4307 <= Esu_fu_2415_p2;
                lshr_ln24_reg_4354 <= Eki_1_fu_2649_p2(63 downto 21);
                lshr_ln25_reg_4364 <= Emo_1_fu_2669_p2(63 downto 43);
                lshr_ln27_reg_4374 <= Ebo_1_fu_2689_p2(63 downto 36);
                lshr_ln29_reg_4384 <= Eka_1_fu_2709_p2(63 downto 61);
                lshr_ln31_reg_4394 <= Esi_1_fu_2729_p2(63 downto 3);
                lshr_ln32_reg_4404 <= Egi_1_fu_2749_p2(63 downto 58);
                lshr_ln33_reg_4414 <= Eko_1_fu_2769_p2(63 downto 39);
                lshr_ln35_reg_4424 <= Esa_1_fu_2789_p2(63 downto 46);
                lshr_ln37_reg_4434 <= Ega_1_fu_2809_p2(63 downto 28);
                lshr_ln39_reg_4444 <= Emi_1_fu_2829_p2(63 downto 49);
                lshr_ln40_reg_4454 <= Eso_1_fu_2849_p2(63 downto 8);
                lshr_ln41_reg_4464 <= Ebi_1_fu_2869_p2(63 downto 2);
                lshr_ln42_reg_4474 <= Ego_1_fu_2889_p2(63 downto 9);
                lshr_ln44_reg_4484 <= Ema_1_fu_2909_p2(63 downto 23);
                round_1_reg_4254 <= round_fu_440;
                tmp_13_reg_4327 <= BCi_6_fu_2487_p2(63 downto 63);
                tmp_16_reg_4337 <= BCa_6_fu_2439_p2(63 downto 63);
                trunc_ln182_reg_4322 <= trunc_ln182_fu_2567_p1;
                trunc_ln185_reg_4332 <= trunc_ln185_fu_2631_p1;
                trunc_ln189_reg_4349 <= trunc_ln189_fu_2655_p1;
                trunc_ln190_reg_4359 <= trunc_ln190_fu_2675_p1;
                trunc_ln198_reg_4369 <= trunc_ln198_fu_2695_p1;
                trunc_ln200_reg_4379 <= trunc_ln200_fu_2715_p1;
                trunc_ln202_reg_4389 <= trunc_ln202_fu_2735_p1;
                trunc_ln210_reg_4399 <= trunc_ln210_fu_2755_p1;
                trunc_ln211_reg_4409 <= trunc_ln211_fu_2775_p1;
                trunc_ln213_reg_4419 <= trunc_ln213_fu_2795_p1;
                trunc_ln221_reg_4429 <= trunc_ln221_fu_2815_p1;
                trunc_ln223_reg_4439 <= trunc_ln223_fu_2835_p1;
                trunc_ln224_reg_4449 <= trunc_ln224_fu_2855_p1;
                trunc_ln231_reg_4459 <= trunc_ln231_fu_2875_p1;
                trunc_ln232_reg_4469 <= trunc_ln232_fu_2895_p1;
                trunc_ln234_reg_4479 <= trunc_ln234_fu_2915_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    Aba_1_out <= Aba_1_fu_436;

    Aba_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Aba_1_out_ap_vld <= ap_const_logic_1;
        else 
            Aba_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Aba_3_fu_3101_p2 <= (xor_ln192_1_fu_3095_p2 xor Eba_2_reg_4342);
    Aba_4_fu_1233_p2 <= (Da_fu_1123_p2 xor Aba_1_fu_436);
    Abe_1_out <= Abe_1_fu_432;

    Abe_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Abe_1_out_ap_vld <= ap_const_logic_1;
        else 
            Abe_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Abe_2_fu_1733_p2 <= (De_fu_1149_p2 xor Abe_1_fu_432);
    Abe_3_fu_3118_p2 <= (and_ln193_fu_3112_p2 xor BCe_7_fu_2981_p3);
    Abi_1_out <= Abi_1_fu_428;

    Abi_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Abi_1_out_ap_vld <= ap_const_logic_1;
        else 
            Abi_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Abi_2_fu_2191_p2 <= (Di_fu_1175_p2 xor Abi_1_fu_428);
    Abi_3_fu_3136_p2 <= (and_ln194_fu_3130_p2 xor BCi_7_fu_2989_p3);
    Abo_1_out <= Abo_1_fu_420;

    Abo_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Abo_1_out_ap_vld <= ap_const_logic_1;
        else 
            Abo_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Abo_2_fu_1503_p2 <= (Do_fu_1201_p2 xor Abo_1_fu_420);
    Abo_3_fu_3153_p2 <= (and_ln195_fu_3148_p2 xor BCo_7_fu_2995_p3);
    Abu_1_out <= Abu_1_fu_424;

    Abu_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Abu_1_out_ap_vld <= ap_const_logic_1;
        else 
            Abu_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Abu_2_fu_1961_p2 <= (Du_fu_1227_p2 xor Abu_1_fu_424);
    Abu_3_fu_3170_p2 <= (and_ln196_fu_3164_p2 xor BCu_7_fu_3020_p3);
    Aga_1_out <= Aga_1_fu_416;

    Aga_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Aga_1_out_ap_vld <= ap_const_logic_1;
        else 
            Aga_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Aga_2_fu_1989_p2 <= (Da_fu_1123_p2 xor Aga_1_fu_416);
    Aga_3_fu_3260_p2 <= (and_ln203_fu_3254_p2 xor BCa_8_fu_3176_p3);
    Age_1_out <= Age_1_fu_412;

    Age_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Age_1_out_ap_vld <= ap_const_logic_1;
        else 
            Age_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Age_2_fu_1239_p2 <= (De_fu_1149_p2 xor Age_1_fu_412);
    Age_3_fu_3278_p2 <= (and_ln204_fu_3272_p2 xor BCe_8_fu_3201_p3);
    Agi_1_out <= Agi_1_fu_408;

    Agi_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Agi_1_out_ap_vld <= ap_const_logic_1;
        else 
            Agi_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Agi_2_fu_1759_p2 <= (Di_fu_1175_p2 xor Agi_1_fu_408);
    Agi_3_fu_3296_p2 <= (and_ln205_fu_3290_p2 xor BCi_8_fu_3209_p3);
    Ago_1_out <= Ago_1_fu_404;

    Ago_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ago_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ago_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ago_2_fu_2219_p2 <= (Do_fu_1201_p2 xor Ago_1_fu_404);
    Ago_3_fu_3314_p2 <= (and_ln206_fu_3308_p2 xor BCo_8_fu_3234_p3);
    Agu_1_out <= Agu_1_fu_400;

    Agu_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Agu_1_out_ap_vld <= ap_const_logic_1;
        else 
            Agu_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Agu_2_fu_1531_p2 <= (Du_fu_1227_p2 xor Agu_1_fu_400);
    Agu_3_fu_3332_p2 <= (and_ln207_fu_3326_p2 xor BCu_8_fu_3242_p3);
    Aka_1_out <= Aka_1_fu_396;

    Aka_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Aka_1_out_ap_vld <= ap_const_logic_1;
        else 
            Aka_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Aka_2_fu_1559_p2 <= (Da_fu_1123_p2 xor Aka_1_fu_396);
    Aka_3_fu_3420_p2 <= (and_ln214_fu_3414_p2 xor BCa_9_fu_3355_p3);
    Ake_1_out <= Ake_1_fu_392;

    Ake_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ake_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ake_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ake_2_fu_2017_p2 <= (De_fu_1149_p2 xor Ake_1_fu_392);
    Ake_3_fu_3438_p2 <= (and_ln215_fu_3432_p2 xor BCe_9_fu_3363_p3);
    Aki_1_out <= Aki_1_fu_388;

    Aki_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Aki_1_out_ap_vld <= ap_const_logic_1;
        else 
            Aki_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Aki_2_fu_1267_p2 <= (Di_fu_1175_p2 xor Aki_1_fu_388);
    Aki_3_fu_3456_p2 <= (and_ln216_fu_3450_p2 xor BCi_9_fu_3369_p3);
    Ako_1_out <= Ako_1_fu_384;

    Ako_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ako_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ako_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ako_2_fu_1787_p2 <= (Do_fu_1201_p2 xor Ako_1_fu_384);
    Ako_3_fu_3474_p2 <= (and_ln217_fu_3468_p2 xor BCo_9_fu_3394_p3);
    Aku_1_out <= Aku_1_fu_380;

    Aku_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Aku_1_out_ap_vld <= ap_const_logic_1;
        else 
            Aku_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Aku_2_fu_2247_p2 <= (Du_fu_1227_p2 xor Aku_1_fu_380);
    Aku_3_fu_3492_p2 <= (and_ln218_fu_3486_p2 xor BCu_9_fu_3402_p3);
    Ama_1_out <= Ama_1_fu_376;

    Ama_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ama_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ama_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ama_2_fu_2275_p2 <= (Da_fu_1123_p2 xor Ama_1_fu_376);
    Ama_3_fu_3582_p2 <= (and_ln225_fu_3576_p2 xor BCa_10_fu_3517_p3);
    Ame_1_out <= Ame_1_fu_372;

    Ame_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ame_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ame_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ame_2_fu_1587_p2 <= (De_fu_1149_p2 xor Ame_1_fu_372);
    Ame_3_fu_3600_p2 <= (and_ln226_fu_3594_p2 xor BCe_10_fu_3525_p3);
    Ami_1_out <= Ami_1_fu_368;

    Ami_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ami_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ami_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ami_2_fu_2045_p2 <= (Di_fu_1175_p2 xor Ami_1_fu_368);
    Ami_3_fu_3618_p2 <= (and_ln227_fu_3612_p2 xor BCi_10_fu_3550_p3);
    Amo_1_out <= Amo_1_fu_364;

    Amo_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Amo_1_out_ap_vld <= ap_const_logic_1;
        else 
            Amo_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Amo_2_fu_1295_p2 <= (Do_fu_1201_p2 xor Amo_1_fu_364);
    Amo_3_fu_3636_p2 <= (and_ln228_fu_3630_p2 xor BCo_10_fu_3558_p3);
    Amu_1_out <= Amu_1_fu_360;

    Amu_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Amu_1_out_ap_vld <= ap_const_logic_1;
        else 
            Amu_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Amu_2_fu_1815_p2 <= (Du_fu_1227_p2 xor Amu_1_fu_360);
    Amu_3_fu_3654_p2 <= (and_ln229_fu_3648_p2 xor BCu_10_fu_3564_p3);
    Asa_1_out <= Asa_1_fu_356;

    Asa_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Asa_1_out_ap_vld <= ap_const_logic_1;
        else 
            Asa_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Asa_2_fu_1843_p2 <= (Da_fu_1123_p2 xor Asa_1_fu_356);
    Asa_3_fu_3744_p2 <= (and_ln236_fu_3738_p2 xor BCa_11_fu_3660_p3);
    Ase_1_out <= Ase_1_fu_352;

    Ase_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Ase_1_out_ap_vld <= ap_const_logic_1;
        else 
            Ase_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ase_2_fu_2303_p2 <= (De_fu_1149_p2 xor Ase_1_fu_352);
    Ase_3_fu_3762_p2 <= (and_ln237_fu_3756_p2 xor BCe_11_fu_3666_p3);
    Asi_1_out <= Asi_1_fu_348;

    Asi_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Asi_1_out_ap_vld <= ap_const_logic_1;
        else 
            Asi_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Asi_2_fu_1615_p2 <= (Di_fu_1175_p2 xor Asi_1_fu_348);
    Asi_3_fu_3780_p2 <= (and_ln238_fu_3774_p2 xor BCi_11_fu_3691_p3);
    Aso_1_out <= Aso_1_fu_344;

    Aso_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Aso_1_out_ap_vld <= ap_const_logic_1;
        else 
            Aso_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Aso_2_fu_2073_p2 <= (Do_fu_1201_p2 xor Aso_1_fu_344);
    Aso_3_fu_3798_p2 <= (and_ln239_fu_3792_p2 xor BCo_11_fu_3699_p3);
    Asu_1_out <= Asu_1_fu_340;

    Asu_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln98_fu_902_p2, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Asu_1_out_ap_vld <= ap_const_logic_1;
        else 
            Asu_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Asu_2_fu_1323_p2 <= (Du_fu_1227_p2 xor Asu_1_fu_340);
    Asu_3_fu_3816_p2 <= (and_ln240_fu_3810_p2 xor BCu_11_fu_3724_p3);
    BCa_10_fu_3517_p3 <= (trunc_ln220_fu_3503_p1 & lshr_ln36_fu_3507_p4);
    BCa_11_fu_3660_p3 <= (trunc_ln231_reg_4459 & lshr_ln41_reg_4464);
    BCa_2_fu_1523_p3 <= (trunc_ln128_fu_1509_p1 & lshr_ln9_fu_1513_p4);
    BCa_3_fu_1751_p3 <= (trunc_ln139_fu_1739_p1 & tmp_11_fu_1743_p3);
    BCa_4_fu_1981_p3 <= (trunc_ln150_fu_1967_p1 & lshr_ln13_fu_1971_p4);
    BCa_5_fu_2211_p3 <= (trunc_ln161_fu_2197_p1 & lshr_ln18_fu_2201_p4);
    BCa_6_fu_2439_p2 <= (xor_ln174_fu_2421_p2 xor xor_ln174_2_fu_2433_p2);
    BCa_8_fu_3176_p3 <= (trunc_ln198_reg_4369 & lshr_ln27_reg_4374);
    BCa_9_fu_3355_p3 <= (trunc_ln209_fu_3343_p1 & tmp_17_fu_3347_p3);
    BCa_fu_1001_p2 <= (xor_ln104_2_fu_995_p2 xor xor_ln104_1_fu_989_p2);
    BCe_10_fu_3525_p3 <= (trunc_ln221_reg_4429 & lshr_ln37_reg_4434);
    BCe_11_fu_3666_p3 <= (trunc_ln232_reg_4469 & lshr_ln42_reg_4474);
    BCe_1_fu_1259_p3 <= (trunc_ln118_fu_1245_p1 & lshr_ln5_fu_1249_p4);
    BCe_2_fu_1551_p3 <= (trunc_ln129_fu_1537_p1 & lshr_ln_fu_1541_p4);
    BCe_3_fu_1779_p3 <= (trunc_ln140_fu_1765_p1 & lshr_ln4_fu_1769_p4);
    BCe_4_fu_2009_p3 <= (trunc_ln151_fu_1995_p1 & lshr_ln14_fu_1999_p4);
    BCe_5_fu_2239_p3 <= (trunc_ln162_fu_2225_p1 & lshr_ln19_fu_2229_p4);
    BCe_6_fu_2463_p2 <= (xor_ln175_fu_2445_p2 xor xor_ln175_2_fu_2457_p2);
    BCe_7_fu_2981_p3 <= (trunc_ln188_fu_2967_p1 & lshr_ln23_fu_2971_p4);
    BCe_8_fu_3201_p3 <= (trunc_ln199_fu_3187_p1 & lshr_ln28_fu_3191_p4);
    BCe_9_fu_3363_p3 <= (trunc_ln210_reg_4399 & lshr_ln32_reg_4404);
    BCe_fu_1025_p2 <= (xor_ln105_2_fu_1019_p2 xor xor_ln105_1_fu_1013_p2);
    BCi_10_fu_3550_p3 <= (trunc_ln222_fu_3536_p1 & lshr_ln38_fu_3540_p4);
    BCi_11_fu_3691_p3 <= (trunc_ln233_fu_3677_p1 & lshr_ln43_fu_3681_p4);
    BCi_1_fu_1287_p3 <= (trunc_ln119_fu_1273_p1 & lshr_ln6_fu_1277_p4);
    BCi_2_fu_1579_p3 <= (trunc_ln130_fu_1565_p1 & lshr_ln1_fu_1569_p4);
    BCi_3_fu_1807_p3 <= (trunc_ln141_fu_1793_p1 & lshr_ln10_fu_1797_p4);
    BCi_4_fu_2037_p3 <= (trunc_ln152_fu_2023_p1 & lshr_ln15_fu_2027_p4);
    BCi_5_fu_2267_p3 <= (trunc_ln163_fu_2253_p1 & lshr_ln20_fu_2257_p4);
    BCi_6_fu_2487_p2 <= (xor_ln176_fu_2469_p2 xor xor_ln176_2_fu_2481_p2);
    BCi_7_fu_2989_p3 <= (trunc_ln189_reg_4349 & lshr_ln24_reg_4354);
    BCi_8_fu_3209_p3 <= (trunc_ln200_reg_4379 & lshr_ln29_reg_4384);
    BCi_9_fu_3369_p3 <= (trunc_ln211_reg_4409 & lshr_ln33_reg_4414);
    BCi_fu_1049_p2 <= (xor_ln106_2_fu_1037_p2 xor xor_ln106_1_fu_1043_p2);
    BCo_10_fu_3558_p3 <= (trunc_ln223_reg_4439 & lshr_ln39_reg_4444);
    BCo_11_fu_3699_p3 <= (trunc_ln234_reg_4479 & lshr_ln44_reg_4484);
    BCo_1_fu_1315_p3 <= (trunc_ln120_fu_1301_p1 & lshr_ln7_fu_1305_p4);
    BCo_2_fu_1607_p3 <= (trunc_ln131_fu_1593_p1 & lshr_ln2_fu_1597_p4);
    BCo_3_fu_1835_p3 <= (trunc_ln142_fu_1821_p1 & lshr_ln11_fu_1825_p4);
    BCo_4_fu_2065_p3 <= (trunc_ln153_fu_2051_p1 & lshr_ln16_fu_2055_p4);
    BCo_5_fu_2295_p3 <= (trunc_ln164_fu_2281_p1 & lshr_ln21_fu_2285_p4);
    BCo_6_fu_2511_p2 <= (xor_ln177_fu_2493_p2 xor xor_ln177_2_fu_2505_p2);
    BCo_7_fu_2995_p3 <= (trunc_ln190_reg_4359 & lshr_ln25_reg_4364);
    BCo_8_fu_3234_p3 <= (trunc_ln201_fu_3220_p1 & lshr_ln30_fu_3224_p4);
    BCo_9_fu_3394_p3 <= (trunc_ln212_fu_3380_p1 & lshr_ln34_fu_3384_p4);
    BCo_fu_1073_p2 <= (xor_ln107_fu_1055_p2 xor xor_ln107_2_fu_1067_p2);
    BCu_10_fu_3564_p3 <= (trunc_ln224_reg_4449 & lshr_ln40_reg_4454);
    BCu_11_fu_3724_p3 <= (trunc_ln235_fu_3710_p1 & lshr_ln45_fu_3714_p4);
    BCu_1_fu_1343_p3 <= (trunc_ln121_fu_1329_p1 & lshr_ln8_fu_1333_p4);
    BCu_2_fu_1635_p3 <= (trunc_ln132_fu_1621_p1 & lshr_ln3_fu_1625_p4);
    BCu_3_fu_1863_p3 <= (trunc_ln143_fu_1849_p1 & lshr_ln12_fu_1853_p4);
    BCu_4_fu_2093_p3 <= (trunc_ln154_fu_2079_p1 & lshr_ln17_fu_2083_p4);
    BCu_5_fu_2323_p3 <= (trunc_ln165_fu_2309_p1 & lshr_ln22_fu_2313_p4);
    BCu_6_fu_2535_p2 <= (xor_ln178_fu_2517_p2 xor xor_ln178_2_fu_2529_p2);
    BCu_7_fu_3020_p3 <= (trunc_ln191_fu_3006_p1 & lshr_ln26_fu_3010_p4);
    BCu_8_fu_3242_p3 <= (trunc_ln202_reg_4389 & lshr_ln31_reg_4394);
    BCu_9_fu_3402_p3 <= (trunc_ln213_reg_4419 & lshr_ln35_reg_4424);
    BCu_fu_1097_p2 <= (xor_ln108_2_fu_1091_p2 xor Abu_1_fu_424);
    Da_1_fu_2561_p2 <= (or_ln5_fu_2553_p3 xor BCu_6_fu_2535_p2);
    Da_fu_1123_p2 <= (or_ln_fu_1115_p3 xor BCu_fu_1097_p2);
    De_1_fu_2946_p2 <= (or_ln6_fu_2940_p3 xor BCa_6_reg_4312);
    De_fu_1149_p2 <= (or_ln1_fu_1141_p3 xor BCa_fu_1001_p2);
    Di_1_fu_2599_p2 <= (or_ln7_fu_2591_p3 xor BCe_6_fu_2463_p2);
    Di_fu_1175_p2 <= (or_ln2_fu_1167_p3 xor BCe_fu_1025_p2);
    Do_1_fu_2625_p2 <= (or_ln8_fu_2617_p3 xor BCi_6_fu_2487_p2);
    Do_fu_1201_p2 <= (or_ln3_fu_1193_p3 xor BCi_fu_1049_p2);
    Du_1_fu_2957_p2 <= (or_ln9_fu_2951_p3 xor BCo_6_reg_4317);
    Du_fu_1227_p2 <= (or_ln4_fu_1219_p3 xor BCo_fu_1073_p2);
    Eba_2_fu_2643_p2 <= (Eba_fu_1425_p2 xor Da_1_fu_2561_p2);
    Eba_fu_1425_p2 <= (xor_ln122_1_fu_1419_p2 xor and_ln122_fu_1413_p2);
    Ebe_1_fu_3338_p2 <= (Ebe_reg_4262 xor De_1_fu_2946_p2);
    Ebe_fu_1443_p2 <= (and_ln123_fu_1437_p2 xor BCe_1_fu_1259_p3);
    Ebi_1_fu_2869_p2 <= (Ebi_fu_1461_p2 xor Di_1_fu_2599_p2);
    Ebi_fu_1461_p2 <= (and_ln124_fu_1455_p2 xor BCi_1_fu_1287_p3);
    Ebo_1_fu_2689_p2 <= (Ebo_fu_1479_p2 xor Do_1_fu_2625_p2);
    Ebo_fu_1479_p2 <= (and_ln125_fu_1473_p2 xor BCo_1_fu_1315_p3);
    Ebu_1_fu_3498_p2 <= (Ebu_reg_4267 xor Du_1_fu_2957_p2);
    Ebu_fu_1497_p2 <= (and_ln126_fu_1491_p2 xor BCu_1_fu_1343_p3);
    Ega_1_fu_2809_p2 <= (Ega_fu_1655_p2 xor Da_1_fu_2561_p2);
    Ega_fu_1655_p2 <= (and_ln133_fu_1649_p2 xor BCa_2_fu_1523_p3);
    Ege_1_fu_2962_p2 <= (Ege_reg_4272 xor De_1_fu_2946_p2);
    Ege_fu_1673_p2 <= (and_ln134_fu_1667_p2 xor BCe_2_fu_1551_p3);
    Egi_1_fu_2749_p2 <= (Egi_fu_1691_p2 xor Di_1_fu_2599_p2);
    Egi_fu_1691_p2 <= (and_ln135_fu_1685_p2 xor BCi_2_fu_1579_p3);
    Ego_1_fu_2889_p2 <= (Ego_fu_1709_p2 xor Do_1_fu_2625_p2);
    Ego_fu_1709_p2 <= (and_ln136_fu_1703_p2 xor BCo_2_fu_1607_p3);
    Egu_1_fu_3182_p2 <= (Egu_reg_4277 xor Du_1_fu_2957_p2);
    Egu_fu_1727_p2 <= (and_ln137_fu_1721_p2 xor BCu_2_fu_1635_p3);
    Eka_1_fu_2709_p2 <= (Eka_fu_1883_p2 xor Da_1_fu_2561_p2);
    Eka_fu_1883_p2 <= (and_ln144_fu_1877_p2 xor BCa_3_fu_1751_p3);
    Eke_1_fu_3531_p2 <= (Eke_reg_4282 xor De_1_fu_2946_p2);
    Eke_fu_1901_p2 <= (and_ln145_fu_1895_p2 xor BCe_3_fu_1779_p3);
    Eki_1_fu_2649_p2 <= (Eki_fu_1919_p2 xor Di_1_fu_2599_p2);
    Eki_fu_1919_p2 <= (and_ln146_fu_1913_p2 xor BCi_3_fu_1807_p3);
    Eko_1_fu_2769_p2 <= (Eko_fu_1937_p2 xor Do_1_fu_2625_p2);
    Eko_fu_1937_p2 <= (and_ln147_fu_1931_p2 xor BCo_3_fu_1835_p3);
    Eku_1_fu_3672_p2 <= (Eku_reg_4287 xor Du_1_fu_2957_p2);
    Eku_fu_1955_p2 <= (and_ln148_fu_1949_p2 xor BCu_3_fu_1863_p3);
    Ema_1_fu_2909_p2 <= (Ema_fu_2113_p2 xor Da_1_fu_2561_p2);
    Ema_fu_2113_p2 <= (and_ln155_fu_2107_p2 xor BCa_4_fu_1981_p3);
    Eme_1_fu_3215_p2 <= (Eme_reg_4292 xor De_1_fu_2946_p2);
    Eme_fu_2131_p2 <= (and_ln156_fu_2125_p2 xor BCe_4_fu_2009_p3);
    Emi_1_fu_2829_p2 <= (Emi_fu_2149_p2 xor Di_1_fu_2599_p2);
    Emi_fu_2149_p2 <= (and_ln157_fu_2143_p2 xor BCi_4_fu_2037_p3);
    Emo_1_fu_2669_p2 <= (Emo_fu_2167_p2 xor Do_1_fu_2625_p2);
    Emo_fu_2167_p2 <= (and_ln158_fu_2161_p2 xor BCo_4_fu_2065_p3);
    Emu_1_fu_3375_p2 <= (Emu_reg_4297 xor Du_1_fu_2957_p2);
    Emu_fu_2185_p2 <= (and_ln159_fu_2179_p2 xor BCu_4_fu_2093_p3);
    Esa_1_fu_2789_p2 <= (Esa_fu_2343_p2 xor Da_1_fu_2561_p2);
    Esa_fu_2343_p2 <= (and_ln166_fu_2337_p2 xor BCa_5_fu_2211_p3);
    Ese_1_fu_3705_p2 <= (Ese_reg_4302 xor De_1_fu_2946_p2);
    Ese_fu_2361_p2 <= (and_ln167_fu_2355_p2 xor BCe_5_fu_2239_p3);
    Esi_1_fu_2729_p2 <= (Esi_fu_2379_p2 xor Di_1_fu_2599_p2);
    Esi_fu_2379_p2 <= (and_ln168_fu_2373_p2 xor BCi_5_fu_2267_p3);
    Eso_1_fu_2849_p2 <= (Eso_fu_2397_p2 xor Do_1_fu_2625_p2);
    Eso_fu_2397_p2 <= (and_ln169_fu_2391_p2 xor BCo_5_fu_2295_p3);
    Esu_1_fu_3001_p2 <= (Esu_reg_4307 xor Du_1_fu_2957_p2);
    Esu_fu_2415_p2 <= (and_ln170_fu_2409_p2 xor BCu_5_fu_2323_p3);
    add_ln98_fu_2929_p2 <= std_logic_vector(unsigned(round_fu_440) + unsigned(ap_const_lv5_2));
    and_ln122_fu_1413_p2 <= (xor_ln122_fu_1407_p2 and BCi_1_fu_1287_p3);
    and_ln123_fu_1437_p2 <= (xor_ln123_fu_1431_p2 and BCo_1_fu_1315_p3);
    and_ln124_fu_1455_p2 <= (xor_ln124_fu_1449_p2 and BCu_1_fu_1343_p3);
    and_ln125_fu_1473_p2 <= (xor_ln125_fu_1467_p2 and Aba_4_fu_1233_p2);
    and_ln126_fu_1491_p2 <= (xor_ln126_fu_1485_p2 and BCe_1_fu_1259_p3);
    and_ln133_fu_1649_p2 <= (xor_ln133_fu_1643_p2 and BCi_2_fu_1579_p3);
    and_ln134_fu_1667_p2 <= (xor_ln134_fu_1661_p2 and BCo_2_fu_1607_p3);
    and_ln135_fu_1685_p2 <= (xor_ln135_fu_1679_p2 and BCu_2_fu_1635_p3);
    and_ln136_fu_1703_p2 <= (xor_ln136_fu_1697_p2 and BCa_2_fu_1523_p3);
    and_ln137_fu_1721_p2 <= (xor_ln137_fu_1715_p2 and BCe_2_fu_1551_p3);
    and_ln144_fu_1877_p2 <= (xor_ln144_fu_1871_p2 and BCi_3_fu_1807_p3);
    and_ln145_fu_1895_p2 <= (xor_ln145_fu_1889_p2 and BCo_3_fu_1835_p3);
    and_ln146_fu_1913_p2 <= (xor_ln146_fu_1907_p2 and BCu_3_fu_1863_p3);
    and_ln147_fu_1931_p2 <= (xor_ln147_fu_1925_p2 and BCa_3_fu_1751_p3);
    and_ln148_fu_1949_p2 <= (xor_ln148_fu_1943_p2 and BCe_3_fu_1779_p3);
    and_ln155_fu_2107_p2 <= (xor_ln155_fu_2101_p2 and BCi_4_fu_2037_p3);
    and_ln156_fu_2125_p2 <= (xor_ln156_fu_2119_p2 and BCo_4_fu_2065_p3);
    and_ln157_fu_2143_p2 <= (xor_ln157_fu_2137_p2 and BCu_4_fu_2093_p3);
    and_ln158_fu_2161_p2 <= (xor_ln158_fu_2155_p2 and BCa_4_fu_1981_p3);
    and_ln159_fu_2179_p2 <= (xor_ln159_fu_2173_p2 and BCe_4_fu_2009_p3);
    and_ln166_fu_2337_p2 <= (xor_ln166_fu_2331_p2 and BCi_5_fu_2267_p3);
    and_ln167_fu_2355_p2 <= (xor_ln167_fu_2349_p2 and BCo_5_fu_2295_p3);
    and_ln168_fu_2373_p2 <= (xor_ln168_fu_2367_p2 and BCu_5_fu_2323_p3);
    and_ln169_fu_2391_p2 <= (xor_ln169_fu_2385_p2 and BCa_5_fu_2211_p3);
    and_ln170_fu_2409_p2 <= (xor_ln170_fu_2403_p2 and BCe_5_fu_2239_p3);
    and_ln192_fu_3089_p2 <= (xor_ln192_fu_3083_p2 and BCi_7_fu_2989_p3);
    and_ln193_fu_3112_p2 <= (xor_ln193_fu_3106_p2 and BCo_7_fu_2995_p3);
    and_ln194_fu_3130_p2 <= (xor_ln194_fu_3124_p2 and BCu_7_fu_3020_p3);
    and_ln195_fu_3148_p2 <= (xor_ln195_fu_3142_p2 and Eba_2_reg_4342);
    and_ln196_fu_3164_p2 <= (xor_ln196_fu_3159_p2 and BCe_7_fu_2981_p3);
    and_ln203_fu_3254_p2 <= (xor_ln203_fu_3248_p2 and BCi_8_fu_3209_p3);
    and_ln204_fu_3272_p2 <= (xor_ln204_fu_3266_p2 and BCo_8_fu_3234_p3);
    and_ln205_fu_3290_p2 <= (xor_ln205_fu_3284_p2 and BCu_8_fu_3242_p3);
    and_ln206_fu_3308_p2 <= (xor_ln206_fu_3302_p2 and BCa_8_fu_3176_p3);
    and_ln207_fu_3326_p2 <= (xor_ln207_fu_3320_p2 and BCe_8_fu_3201_p3);
    and_ln214_fu_3414_p2 <= (xor_ln214_fu_3408_p2 and BCi_9_fu_3369_p3);
    and_ln215_fu_3432_p2 <= (xor_ln215_fu_3426_p2 and BCo_9_fu_3394_p3);
    and_ln216_fu_3450_p2 <= (xor_ln216_fu_3444_p2 and BCu_9_fu_3402_p3);
    and_ln217_fu_3468_p2 <= (xor_ln217_fu_3462_p2 and BCa_9_fu_3355_p3);
    and_ln218_fu_3486_p2 <= (xor_ln218_fu_3480_p2 and BCe_9_fu_3363_p3);
    and_ln225_fu_3576_p2 <= (xor_ln225_fu_3570_p2 and BCi_10_fu_3550_p3);
    and_ln226_fu_3594_p2 <= (xor_ln226_fu_3588_p2 and BCo_10_fu_3558_p3);
    and_ln227_fu_3612_p2 <= (xor_ln227_fu_3606_p2 and BCu_10_fu_3564_p3);
    and_ln228_fu_3630_p2 <= (xor_ln228_fu_3624_p2 and BCa_10_fu_3517_p3);
    and_ln229_fu_3648_p2 <= (xor_ln229_fu_3642_p2 and BCe_10_fu_3525_p3);
    and_ln236_fu_3738_p2 <= (xor_ln236_fu_3732_p2 and BCi_11_fu_3691_p3);
    and_ln237_fu_3756_p2 <= (xor_ln237_fu_3750_p2 and BCo_11_fu_3699_p3);
    and_ln238_fu_3774_p2 <= (xor_ln238_fu_3768_p2 and BCu_11_fu_3724_p3);
    and_ln239_fu_3792_p2 <= (xor_ln239_fu_3786_p2 and BCa_11_fu_3660_p3);
    and_ln240_fu_3810_p2 <= (xor_ln240_fu_3804_p2 and BCe_11_fu_3666_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln98_fu_902_p2)
    begin
        if (((icmp_ln98_fu_902_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln98_fu_902_p2 <= "1" when (unsigned(round_fu_440) < unsigned(ap_const_lv5_18)) else "0";
    lshr_ln10_fu_1797_p4 <= Ako_2_fu_1787_p2(63 downto 39);
    lshr_ln11_fu_1825_p4 <= Amu_2_fu_1815_p2(63 downto 56);
    lshr_ln12_fu_1853_p4 <= Asa_2_fu_1843_p2(63 downto 46);
    lshr_ln13_fu_1971_p4 <= Abu_2_fu_1961_p2(63 downto 37);
    lshr_ln14_fu_1999_p4 <= Aga_2_fu_1989_p2(63 downto 28);
    lshr_ln15_fu_2027_p4 <= Ake_2_fu_2017_p2(63 downto 54);
    lshr_ln16_fu_2055_p4 <= Ami_2_fu_2045_p2(63 downto 49);
    lshr_ln17_fu_2083_p4 <= Aso_2_fu_2073_p2(63 downto 8);
    lshr_ln18_fu_2201_p4 <= Abi_2_fu_2191_p2(63 downto 2);
    lshr_ln19_fu_2229_p4 <= Ago_2_fu_2219_p2(63 downto 9);
    lshr_ln1_fu_1569_p4 <= Aka_2_fu_1559_p2(63 downto 61);
    lshr_ln20_fu_2257_p4 <= Aku_2_fu_2247_p2(63 downto 25);
    lshr_ln21_fu_2285_p4 <= Ama_2_fu_2275_p2(63 downto 23);
    lshr_ln22_fu_2313_p4 <= Ase_2_fu_2303_p2(63 downto 62);
    lshr_ln23_fu_2971_p4 <= Ege_1_fu_2962_p2(63 downto 20);
    lshr_ln26_fu_3010_p4 <= Esu_1_fu_3001_p2(63 downto 50);
    lshr_ln28_fu_3191_p4 <= Egu_1_fu_3182_p2(63 downto 44);
    lshr_ln2_fu_1597_p4 <= Ame_2_fu_1587_p2(63 downto 19);
    lshr_ln30_fu_3224_p4 <= Eme_1_fu_3215_p2(63 downto 19);
    lshr_ln34_fu_3384_p4 <= Emu_1_fu_3375_p2(63 downto 56);
    lshr_ln36_fu_3507_p4 <= Ebu_1_fu_3498_p2(63 downto 37);
    lshr_ln38_fu_3540_p4 <= Eke_1_fu_3531_p2(63 downto 54);
    lshr_ln3_fu_1625_p4 <= Asi_2_fu_1615_p2(63 downto 3);
    lshr_ln43_fu_3681_p4 <= Eku_1_fu_3672_p2(63 downto 25);
    lshr_ln45_fu_3714_p4 <= Ese_1_fu_3705_p2(63 downto 62);
    lshr_ln4_fu_1769_p4 <= Agi_2_fu_1759_p2(63 downto 58);
    lshr_ln5_fu_1249_p4 <= Age_2_fu_1239_p2(63 downto 20);
    lshr_ln6_fu_1277_p4 <= Aki_2_fu_1267_p2(63 downto 21);
    lshr_ln7_fu_1305_p4 <= Amo_2_fu_1295_p2(63 downto 43);
    lshr_ln8_fu_1333_p4 <= Asu_2_fu_1323_p2(63 downto 50);
    lshr_ln9_fu_1513_p4 <= Abo_2_fu_1503_p2(63 downto 36);
    lshr_ln_fu_1541_p4 <= Agu_2_fu_1531_p2(63 downto 44);
    or_ln1_fu_1141_p3 <= (trunc_ln112_fu_1129_p1 & tmp_7_fu_1133_p3);
    or_ln2_fu_1167_p3 <= (trunc_ln113_fu_1155_p1 & tmp_8_fu_1159_p3);
    or_ln3_fu_1193_p3 <= (trunc_ln114_fu_1181_p1 & tmp_9_fu_1185_p3);
    or_ln4_fu_1219_p3 <= (trunc_ln115_fu_1207_p1 & tmp_10_fu_1211_p3);
    or_ln5_fu_2553_p3 <= (trunc_ln181_fu_2541_p1 & tmp_12_fu_2545_p3);
    or_ln6_fu_2940_p3 <= (trunc_ln182_reg_4322 & tmp_13_reg_4327);
    or_ln7_fu_2591_p3 <= (trunc_ln183_fu_2579_p1 & tmp_14_fu_2583_p3);
    or_ln8_fu_2617_p3 <= (trunc_ln184_fu_2605_p1 & tmp_15_fu_2609_p3);
    or_ln9_fu_2951_p3 <= (trunc_ln185_reg_4332 & tmp_16_reg_4337);
    or_ln_fu_1115_p3 <= (trunc_ln111_fu_1103_p1 & tmp_6_fu_1107_p3);
    tmp_10_fu_1211_p3 <= BCa_fu_1001_p2(63 downto 63);
    tmp_11_fu_1743_p3 <= Abe_2_fu_1733_p2(63 downto 63);
    tmp_12_fu_2545_p3 <= BCe_6_fu_2463_p2(63 downto 63);
    tmp_14_fu_2583_p3 <= BCo_6_fu_2511_p2(63 downto 63);
    tmp_15_fu_2609_p3 <= BCu_6_fu_2535_p2(63 downto 63);
    tmp_17_fu_3347_p3 <= Ebe_1_fu_3338_p2(63 downto 63);
    tmp_3_fu_3028_p25 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_6_fu_1107_p3 <= BCe_fu_1025_p2(63 downto 63);
    tmp_7_fu_1133_p3 <= BCi_fu_1049_p2(63 downto 63);
    tmp_8_fu_1159_p3 <= BCo_fu_1073_p2(63 downto 63);
    tmp_9_fu_1185_p3 <= BCu_fu_1097_p2(63 downto 63);
    tmp_fu_1351_p25 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln111_fu_1103_p1 <= BCe_fu_1025_p2(63 - 1 downto 0);
    trunc_ln112_fu_1129_p1 <= BCi_fu_1049_p2(63 - 1 downto 0);
    trunc_ln113_fu_1155_p1 <= BCo_fu_1073_p2(63 - 1 downto 0);
    trunc_ln114_fu_1181_p1 <= BCu_fu_1097_p2(63 - 1 downto 0);
    trunc_ln115_fu_1207_p1 <= BCa_fu_1001_p2(63 - 1 downto 0);
    trunc_ln118_fu_1245_p1 <= Age_2_fu_1239_p2(20 - 1 downto 0);
    trunc_ln119_fu_1273_p1 <= Aki_2_fu_1267_p2(21 - 1 downto 0);
    trunc_ln120_fu_1301_p1 <= Amo_2_fu_1295_p2(43 - 1 downto 0);
    trunc_ln121_fu_1329_p1 <= Asu_2_fu_1323_p2(50 - 1 downto 0);
    trunc_ln128_fu_1509_p1 <= Abo_2_fu_1503_p2(36 - 1 downto 0);
    trunc_ln129_fu_1537_p1 <= Agu_2_fu_1531_p2(44 - 1 downto 0);
    trunc_ln130_fu_1565_p1 <= Aka_2_fu_1559_p2(61 - 1 downto 0);
    trunc_ln131_fu_1593_p1 <= Ame_2_fu_1587_p2(19 - 1 downto 0);
    trunc_ln132_fu_1621_p1 <= Asi_2_fu_1615_p2(3 - 1 downto 0);
    trunc_ln139_fu_1739_p1 <= Abe_2_fu_1733_p2(63 - 1 downto 0);
    trunc_ln140_fu_1765_p1 <= Agi_2_fu_1759_p2(58 - 1 downto 0);
    trunc_ln141_fu_1793_p1 <= Ako_2_fu_1787_p2(39 - 1 downto 0);
    trunc_ln142_fu_1821_p1 <= Amu_2_fu_1815_p2(56 - 1 downto 0);
    trunc_ln143_fu_1849_p1 <= Asa_2_fu_1843_p2(46 - 1 downto 0);
    trunc_ln150_fu_1967_p1 <= Abu_2_fu_1961_p2(37 - 1 downto 0);
    trunc_ln151_fu_1995_p1 <= Aga_2_fu_1989_p2(28 - 1 downto 0);
    trunc_ln152_fu_2023_p1 <= Ake_2_fu_2017_p2(54 - 1 downto 0);
    trunc_ln153_fu_2051_p1 <= Ami_2_fu_2045_p2(49 - 1 downto 0);
    trunc_ln154_fu_2079_p1 <= Aso_2_fu_2073_p2(8 - 1 downto 0);
    trunc_ln161_fu_2197_p1 <= Abi_2_fu_2191_p2(2 - 1 downto 0);
    trunc_ln162_fu_2225_p1 <= Ago_2_fu_2219_p2(9 - 1 downto 0);
    trunc_ln163_fu_2253_p1 <= Aku_2_fu_2247_p2(25 - 1 downto 0);
    trunc_ln164_fu_2281_p1 <= Ama_2_fu_2275_p2(23 - 1 downto 0);
    trunc_ln165_fu_2309_p1 <= Ase_2_fu_2303_p2(62 - 1 downto 0);
    trunc_ln181_fu_2541_p1 <= BCe_6_fu_2463_p2(63 - 1 downto 0);
    trunc_ln182_fu_2567_p1 <= BCi_6_fu_2487_p2(63 - 1 downto 0);
    trunc_ln183_fu_2579_p1 <= BCo_6_fu_2511_p2(63 - 1 downto 0);
    trunc_ln184_fu_2605_p1 <= BCu_6_fu_2535_p2(63 - 1 downto 0);
    trunc_ln185_fu_2631_p1 <= BCa_6_fu_2439_p2(63 - 1 downto 0);
    trunc_ln188_fu_2967_p1 <= Ege_1_fu_2962_p2(20 - 1 downto 0);
    trunc_ln189_fu_2655_p1 <= Eki_1_fu_2649_p2(21 - 1 downto 0);
    trunc_ln190_fu_2675_p1 <= Emo_1_fu_2669_p2(43 - 1 downto 0);
    trunc_ln191_fu_3006_p1 <= Esu_1_fu_3001_p2(50 - 1 downto 0);
    trunc_ln198_fu_2695_p1 <= Ebo_1_fu_2689_p2(36 - 1 downto 0);
    trunc_ln199_fu_3187_p1 <= Egu_1_fu_3182_p2(44 - 1 downto 0);
    trunc_ln200_fu_2715_p1 <= Eka_1_fu_2709_p2(61 - 1 downto 0);
    trunc_ln201_fu_3220_p1 <= Eme_1_fu_3215_p2(19 - 1 downto 0);
    trunc_ln202_fu_2735_p1 <= Esi_1_fu_2729_p2(3 - 1 downto 0);
    trunc_ln209_fu_3343_p1 <= Ebe_1_fu_3338_p2(63 - 1 downto 0);
    trunc_ln210_fu_2755_p1 <= Egi_1_fu_2749_p2(58 - 1 downto 0);
    trunc_ln211_fu_2775_p1 <= Eko_1_fu_2769_p2(39 - 1 downto 0);
    trunc_ln212_fu_3380_p1 <= Emu_1_fu_3375_p2(56 - 1 downto 0);
    trunc_ln213_fu_2795_p1 <= Esa_1_fu_2789_p2(46 - 1 downto 0);
    trunc_ln220_fu_3503_p1 <= Ebu_1_fu_3498_p2(37 - 1 downto 0);
    trunc_ln221_fu_2815_p1 <= Ega_1_fu_2809_p2(28 - 1 downto 0);
    trunc_ln222_fu_3536_p1 <= Eke_1_fu_3531_p2(54 - 1 downto 0);
    trunc_ln223_fu_2835_p1 <= Emi_1_fu_2829_p2(49 - 1 downto 0);
    trunc_ln224_fu_2855_p1 <= Eso_1_fu_2849_p2(8 - 1 downto 0);
    trunc_ln231_fu_2875_p1 <= Ebi_1_fu_2869_p2(2 - 1 downto 0);
    trunc_ln232_fu_2895_p1 <= Ego_1_fu_2889_p2(9 - 1 downto 0);
    trunc_ln233_fu_3677_p1 <= Eku_1_fu_3672_p2(25 - 1 downto 0);
    trunc_ln234_fu_2915_p1 <= Ema_1_fu_2909_p2(23 - 1 downto 0);
    trunc_ln235_fu_3710_p1 <= Ese_1_fu_3705_p2(62 - 1 downto 0);
    xor_ln104_1_fu_989_p2 <= (Asa_1_fu_356 xor Aga_1_fu_416);
    xor_ln104_2_fu_995_p2 <= (xor_ln104_fu_983_p2 xor Aba_1_fu_436);
    xor_ln104_fu_983_p2 <= (Ama_1_fu_376 xor Aka_1_fu_396);
    xor_ln105_1_fu_1013_p2 <= (Ase_1_fu_352 xor Age_1_fu_412);
    xor_ln105_2_fu_1019_p2 <= (xor_ln105_fu_1007_p2 xor Abe_1_fu_432);
    xor_ln105_fu_1007_p2 <= (Ame_1_fu_372 xor Ake_1_fu_392);
    xor_ln106_1_fu_1043_p2 <= (Asi_1_fu_348 xor Agi_1_fu_408);
    xor_ln106_2_fu_1037_p2 <= (xor_ln106_fu_1031_p2 xor Abi_1_fu_428);
    xor_ln106_fu_1031_p2 <= (Ami_1_fu_368 xor Aki_1_fu_388);
    xor_ln107_1_fu_1061_p2 <= (Aso_1_fu_344 xor Ago_1_fu_404);
    xor_ln107_2_fu_1067_p2 <= (xor_ln107_1_fu_1061_p2 xor Abo_1_fu_420);
    xor_ln107_fu_1055_p2 <= (Amo_1_fu_364 xor Ako_1_fu_384);
    xor_ln108_1_fu_1085_p2 <= (Asu_1_fu_340 xor Agu_1_fu_400);
    xor_ln108_2_fu_1091_p2 <= (xor_ln108_fu_1079_p2 xor xor_ln108_1_fu_1085_p2);
    xor_ln108_fu_1079_p2 <= (Amu_1_fu_360 xor Aku_1_fu_380);
    xor_ln122_1_fu_1419_p2 <= (tmp_fu_1351_p27 xor Aba_4_fu_1233_p2);
    xor_ln122_fu_1407_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_1_fu_1259_p3);
    xor_ln123_fu_1431_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_1_fu_1287_p3);
    xor_ln124_fu_1449_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_1_fu_1315_p3);
    xor_ln125_fu_1467_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_1_fu_1343_p3);
    xor_ln126_fu_1485_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor Aba_4_fu_1233_p2);
    xor_ln133_fu_1643_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_2_fu_1551_p3);
    xor_ln134_fu_1661_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_2_fu_1579_p3);
    xor_ln135_fu_1679_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_2_fu_1607_p3);
    xor_ln136_fu_1697_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_2_fu_1635_p3);
    xor_ln137_fu_1715_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_2_fu_1523_p3);
    xor_ln144_fu_1871_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_3_fu_1779_p3);
    xor_ln145_fu_1889_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_3_fu_1807_p3);
    xor_ln146_fu_1907_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_3_fu_1835_p3);
    xor_ln147_fu_1925_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_3_fu_1863_p3);
    xor_ln148_fu_1943_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_3_fu_1751_p3);
    xor_ln155_fu_2101_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_4_fu_2009_p3);
    xor_ln156_fu_2119_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_4_fu_2037_p3);
    xor_ln157_fu_2137_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_4_fu_2065_p3);
    xor_ln158_fu_2155_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_4_fu_2093_p3);
    xor_ln159_fu_2173_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_4_fu_1981_p3);
    xor_ln166_fu_2331_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_5_fu_2239_p3);
    xor_ln167_fu_2349_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_5_fu_2267_p3);
    xor_ln168_fu_2367_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_5_fu_2295_p3);
    xor_ln169_fu_2385_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_5_fu_2323_p3);
    xor_ln170_fu_2403_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_5_fu_2211_p3);
    xor_ln174_1_fu_2427_p2 <= (Ega_fu_1655_p2 xor Eba_fu_1425_p2);
    xor_ln174_2_fu_2433_p2 <= (xor_ln174_1_fu_2427_p2 xor Ema_fu_2113_p2);
    xor_ln174_fu_2421_p2 <= (Esa_fu_2343_p2 xor Eka_fu_1883_p2);
    xor_ln175_1_fu_2451_p2 <= (Eme_fu_2131_p2 xor Eke_fu_1901_p2);
    xor_ln175_2_fu_2457_p2 <= (xor_ln175_1_fu_2451_p2 xor Ege_fu_1673_p2);
    xor_ln175_fu_2445_p2 <= (Ese_fu_2361_p2 xor Ebe_fu_1443_p2);
    xor_ln176_1_fu_2475_p2 <= (Egi_fu_1691_p2 xor Ebi_fu_1461_p2);
    xor_ln176_2_fu_2481_p2 <= (xor_ln176_1_fu_2475_p2 xor Esi_fu_2379_p2);
    xor_ln176_fu_2469_p2 <= (Emi_fu_2149_p2 xor Eki_fu_1919_p2);
    xor_ln177_1_fu_2499_p2 <= (Eso_fu_2397_p2 xor Emo_fu_2167_p2);
    xor_ln177_2_fu_2505_p2 <= (xor_ln177_1_fu_2499_p2 xor Eko_fu_1937_p2);
    xor_ln177_fu_2493_p2 <= (Ego_fu_1709_p2 xor Ebo_fu_1479_p2);
    xor_ln178_1_fu_2523_p2 <= (Esu_fu_2415_p2 xor Ebu_fu_1497_p2);
    xor_ln178_2_fu_2529_p2 <= (xor_ln178_1_fu_2523_p2 xor Emu_fu_2185_p2);
    xor_ln178_fu_2517_p2 <= (Eku_fu_1955_p2 xor Egu_fu_1727_p2);
    xor_ln192_1_fu_3095_p2 <= (tmp_3_fu_3028_p27 xor and_ln192_fu_3089_p2);
    xor_ln192_fu_3083_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_7_fu_2981_p3);
    xor_ln193_fu_3106_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_7_fu_2989_p3);
    xor_ln194_fu_3124_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_7_fu_2995_p3);
    xor_ln195_fu_3142_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_7_fu_3020_p3);
    xor_ln196_fu_3159_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor Eba_2_reg_4342);
    xor_ln203_fu_3248_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_8_fu_3201_p3);
    xor_ln204_fu_3266_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_8_fu_3209_p3);
    xor_ln205_fu_3284_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_8_fu_3234_p3);
    xor_ln206_fu_3302_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_8_fu_3242_p3);
    xor_ln207_fu_3320_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_8_fu_3176_p3);
    xor_ln214_fu_3408_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_9_fu_3363_p3);
    xor_ln215_fu_3426_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_9_fu_3369_p3);
    xor_ln216_fu_3444_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_9_fu_3394_p3);
    xor_ln217_fu_3462_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_9_fu_3402_p3);
    xor_ln218_fu_3480_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_9_fu_3355_p3);
    xor_ln225_fu_3570_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_10_fu_3525_p3);
    xor_ln226_fu_3588_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_10_fu_3550_p3);
    xor_ln227_fu_3606_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_10_fu_3558_p3);
    xor_ln228_fu_3624_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_10_fu_3564_p3);
    xor_ln229_fu_3642_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_10_fu_3517_p3);
    xor_ln236_fu_3732_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCe_11_fu_3666_p3);
    xor_ln237_fu_3750_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCi_11_fu_3691_p3);
    xor_ln238_fu_3768_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCo_11_fu_3699_p3);
    xor_ln239_fu_3786_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCu_11_fu_3724_p3);
    xor_ln240_fu_3804_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor BCa_11_fu_3660_p3);
end behav;
