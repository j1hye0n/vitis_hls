-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_remaining is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln262 : IN STD_LOGIC_VECTOR (63 downto 0);
    pos_0_lcssa_sel : IN STD_LOGIC_VECTOR (10 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    s_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_0_ce0 : OUT STD_LOGIC;
    s_0_we0 : OUT STD_LOGIC;
    s_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_1_ce0 : OUT STD_LOGIC;
    s_1_we0 : OUT STD_LOGIC;
    s_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_2_ce0 : OUT STD_LOGIC;
    s_2_we0 : OUT STD_LOGIC;
    s_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_3_ce0 : OUT STD_LOGIC;
    s_3_we0 : OUT STD_LOGIC;
    s_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_4_ce0 : OUT STD_LOGIC;
    s_4_we0 : OUT STD_LOGIC;
    s_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sha3_256_hls_keccak_absorb_once_hls_Pipeline_absorb_remaining is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv59_33333334 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000110011001100110011001100110100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln292_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln292_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln292_reg_327_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_327_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln294_fu_191_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln294_reg_331_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln294_fu_196_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_reg_336_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln294_2_reg_341 : STD_LOGIC_VECTOR (28 downto 0);
    signal s_0_addr_reg_352 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_addr_reg_352_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_addr_reg_357_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_addr_reg_362_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_addr_reg_367_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_addr_reg_372_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal in_r_load_reg_382 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln294_reg_387 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln294_2_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln294_3_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln292_fu_181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal in_r_ce0_local : STD_LOGIC;
    signal s_0_ce0_local : STD_LOGIC;
    signal s_0_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal s_0_we0_local : STD_LOGIC;
    signal trunc_ln294_1_fu_268_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln294_fu_299_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_1_ce0_local : STD_LOGIC;
    signal s_1_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal s_1_we0_local : STD_LOGIC;
    signal s_2_ce0_local : STD_LOGIC;
    signal s_2_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal s_2_we0_local : STD_LOGIC;
    signal s_3_ce0_local : STD_LOGIC;
    signal s_3_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal s_3_we0_local : STD_LOGIC;
    signal s_4_ce0_local : STD_LOGIC;
    signal s_4_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal s_4_we0_local : STD_LOGIC;
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln292_fu_187_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_210_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_210_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_fu_225_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln2_fu_251_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln294_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln294_1_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_271_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_271_p12 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_271_p13 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln294_fu_262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter16_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to15 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to17 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_163_p00 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_2_fu_271_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_271_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_271_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_271_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_271_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hls_mul_29ns_31ns_59_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sha3_256_hls_urem_29ns_4ns_3_33_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component sha3_256_hls_sparsemux_11_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_29ns_31ns_59_2_1_U74 : component sha3_256_hls_mul_29ns_31ns_59_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 29,
        din1_WIDTH => 31,
        dout_WIDTH => 59)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    urem_29ns_4ns_3_33_1_U75 : component sha3_256_hls_urem_29ns_4ns_3_33_1
    generic map (
        ID => 1,
        NUM_STAGE => 33,
        din0_WIDTH => 29,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_210_p0,
        din1 => grp_fu_210_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    sparsemux_11_3_64_1_1_U76 : component sha3_256_hls_sparsemux_11_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => s_0_q0,
        din1 => s_1_q0,
        din2 => s_2_q0,
        din3 => s_3_q0,
        din4 => s_4_q0,
        def => tmp_2_fu_271_p11,
        sel => tmp_2_fu_271_p12,
        dout => tmp_2_fu_271_p13);

    flow_control_loop_pipe_sequential_init_U : component sha3_256_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_74 <= ap_const_lv64_0;
            elsif (((icmp_ln292_fu_176_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_74 <= add_ln292_fu_181_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln294_reg_331 <= add_ln294_fu_191_p2;
                add_ln294_reg_331_pp0_iter10_reg <= add_ln294_reg_331_pp0_iter9_reg;
                add_ln294_reg_331_pp0_iter11_reg <= add_ln294_reg_331_pp0_iter10_reg;
                add_ln294_reg_331_pp0_iter12_reg <= add_ln294_reg_331_pp0_iter11_reg;
                add_ln294_reg_331_pp0_iter13_reg <= add_ln294_reg_331_pp0_iter12_reg;
                add_ln294_reg_331_pp0_iter14_reg <= add_ln294_reg_331_pp0_iter13_reg;
                add_ln294_reg_331_pp0_iter1_reg <= add_ln294_reg_331;
                add_ln294_reg_331_pp0_iter2_reg <= add_ln294_reg_331_pp0_iter1_reg;
                add_ln294_reg_331_pp0_iter3_reg <= add_ln294_reg_331_pp0_iter2_reg;
                add_ln294_reg_331_pp0_iter4_reg <= add_ln294_reg_331_pp0_iter3_reg;
                add_ln294_reg_331_pp0_iter5_reg <= add_ln294_reg_331_pp0_iter4_reg;
                add_ln294_reg_331_pp0_iter6_reg <= add_ln294_reg_331_pp0_iter5_reg;
                add_ln294_reg_331_pp0_iter7_reg <= add_ln294_reg_331_pp0_iter6_reg;
                add_ln294_reg_331_pp0_iter8_reg <= add_ln294_reg_331_pp0_iter7_reg;
                add_ln294_reg_331_pp0_iter9_reg <= add_ln294_reg_331_pp0_iter8_reg;
                icmp_ln292_reg_327 <= icmp_ln292_fu_176_p2;
                icmp_ln292_reg_327_pp0_iter10_reg <= icmp_ln292_reg_327_pp0_iter9_reg;
                icmp_ln292_reg_327_pp0_iter11_reg <= icmp_ln292_reg_327_pp0_iter10_reg;
                icmp_ln292_reg_327_pp0_iter12_reg <= icmp_ln292_reg_327_pp0_iter11_reg;
                icmp_ln292_reg_327_pp0_iter13_reg <= icmp_ln292_reg_327_pp0_iter12_reg;
                icmp_ln292_reg_327_pp0_iter14_reg <= icmp_ln292_reg_327_pp0_iter13_reg;
                icmp_ln292_reg_327_pp0_iter15_reg <= icmp_ln292_reg_327_pp0_iter14_reg;
                icmp_ln292_reg_327_pp0_iter1_reg <= icmp_ln292_reg_327;
                icmp_ln292_reg_327_pp0_iter2_reg <= icmp_ln292_reg_327_pp0_iter1_reg;
                icmp_ln292_reg_327_pp0_iter3_reg <= icmp_ln292_reg_327_pp0_iter2_reg;
                icmp_ln292_reg_327_pp0_iter4_reg <= icmp_ln292_reg_327_pp0_iter3_reg;
                icmp_ln292_reg_327_pp0_iter5_reg <= icmp_ln292_reg_327_pp0_iter4_reg;
                icmp_ln292_reg_327_pp0_iter6_reg <= icmp_ln292_reg_327_pp0_iter5_reg;
                icmp_ln292_reg_327_pp0_iter7_reg <= icmp_ln292_reg_327_pp0_iter6_reg;
                icmp_ln292_reg_327_pp0_iter8_reg <= icmp_ln292_reg_327_pp0_iter7_reg;
                icmp_ln292_reg_327_pp0_iter9_reg <= icmp_ln292_reg_327_pp0_iter8_reg;
                s_0_addr_reg_352 <= zext_ln294_2_fu_235_p1(3 - 1 downto 0);
                s_0_addr_reg_352_pp0_iter10_reg <= s_0_addr_reg_352_pp0_iter9_reg;
                s_0_addr_reg_352_pp0_iter11_reg <= s_0_addr_reg_352_pp0_iter10_reg;
                s_0_addr_reg_352_pp0_iter12_reg <= s_0_addr_reg_352_pp0_iter11_reg;
                s_0_addr_reg_352_pp0_iter13_reg <= s_0_addr_reg_352_pp0_iter12_reg;
                s_0_addr_reg_352_pp0_iter14_reg <= s_0_addr_reg_352_pp0_iter13_reg;
                s_0_addr_reg_352_pp0_iter15_reg <= s_0_addr_reg_352_pp0_iter14_reg;
                s_0_addr_reg_352_pp0_iter16_reg <= s_0_addr_reg_352_pp0_iter15_reg;
                s_0_addr_reg_352_pp0_iter2_reg <= s_0_addr_reg_352;
                s_0_addr_reg_352_pp0_iter3_reg <= s_0_addr_reg_352_pp0_iter2_reg;
                s_0_addr_reg_352_pp0_iter4_reg <= s_0_addr_reg_352_pp0_iter3_reg;
                s_0_addr_reg_352_pp0_iter5_reg <= s_0_addr_reg_352_pp0_iter4_reg;
                s_0_addr_reg_352_pp0_iter6_reg <= s_0_addr_reg_352_pp0_iter5_reg;
                s_0_addr_reg_352_pp0_iter7_reg <= s_0_addr_reg_352_pp0_iter6_reg;
                s_0_addr_reg_352_pp0_iter8_reg <= s_0_addr_reg_352_pp0_iter7_reg;
                s_0_addr_reg_352_pp0_iter9_reg <= s_0_addr_reg_352_pp0_iter8_reg;
                s_1_addr_reg_357 <= zext_ln294_2_fu_235_p1(3 - 1 downto 0);
                s_1_addr_reg_357_pp0_iter10_reg <= s_1_addr_reg_357_pp0_iter9_reg;
                s_1_addr_reg_357_pp0_iter11_reg <= s_1_addr_reg_357_pp0_iter10_reg;
                s_1_addr_reg_357_pp0_iter12_reg <= s_1_addr_reg_357_pp0_iter11_reg;
                s_1_addr_reg_357_pp0_iter13_reg <= s_1_addr_reg_357_pp0_iter12_reg;
                s_1_addr_reg_357_pp0_iter14_reg <= s_1_addr_reg_357_pp0_iter13_reg;
                s_1_addr_reg_357_pp0_iter15_reg <= s_1_addr_reg_357_pp0_iter14_reg;
                s_1_addr_reg_357_pp0_iter16_reg <= s_1_addr_reg_357_pp0_iter15_reg;
                s_1_addr_reg_357_pp0_iter2_reg <= s_1_addr_reg_357;
                s_1_addr_reg_357_pp0_iter3_reg <= s_1_addr_reg_357_pp0_iter2_reg;
                s_1_addr_reg_357_pp0_iter4_reg <= s_1_addr_reg_357_pp0_iter3_reg;
                s_1_addr_reg_357_pp0_iter5_reg <= s_1_addr_reg_357_pp0_iter4_reg;
                s_1_addr_reg_357_pp0_iter6_reg <= s_1_addr_reg_357_pp0_iter5_reg;
                s_1_addr_reg_357_pp0_iter7_reg <= s_1_addr_reg_357_pp0_iter6_reg;
                s_1_addr_reg_357_pp0_iter8_reg <= s_1_addr_reg_357_pp0_iter7_reg;
                s_1_addr_reg_357_pp0_iter9_reg <= s_1_addr_reg_357_pp0_iter8_reg;
                s_2_addr_reg_362 <= zext_ln294_2_fu_235_p1(3 - 1 downto 0);
                s_2_addr_reg_362_pp0_iter10_reg <= s_2_addr_reg_362_pp0_iter9_reg;
                s_2_addr_reg_362_pp0_iter11_reg <= s_2_addr_reg_362_pp0_iter10_reg;
                s_2_addr_reg_362_pp0_iter12_reg <= s_2_addr_reg_362_pp0_iter11_reg;
                s_2_addr_reg_362_pp0_iter13_reg <= s_2_addr_reg_362_pp0_iter12_reg;
                s_2_addr_reg_362_pp0_iter14_reg <= s_2_addr_reg_362_pp0_iter13_reg;
                s_2_addr_reg_362_pp0_iter15_reg <= s_2_addr_reg_362_pp0_iter14_reg;
                s_2_addr_reg_362_pp0_iter16_reg <= s_2_addr_reg_362_pp0_iter15_reg;
                s_2_addr_reg_362_pp0_iter2_reg <= s_2_addr_reg_362;
                s_2_addr_reg_362_pp0_iter3_reg <= s_2_addr_reg_362_pp0_iter2_reg;
                s_2_addr_reg_362_pp0_iter4_reg <= s_2_addr_reg_362_pp0_iter3_reg;
                s_2_addr_reg_362_pp0_iter5_reg <= s_2_addr_reg_362_pp0_iter4_reg;
                s_2_addr_reg_362_pp0_iter6_reg <= s_2_addr_reg_362_pp0_iter5_reg;
                s_2_addr_reg_362_pp0_iter7_reg <= s_2_addr_reg_362_pp0_iter6_reg;
                s_2_addr_reg_362_pp0_iter8_reg <= s_2_addr_reg_362_pp0_iter7_reg;
                s_2_addr_reg_362_pp0_iter9_reg <= s_2_addr_reg_362_pp0_iter8_reg;
                s_3_addr_reg_367 <= zext_ln294_2_fu_235_p1(3 - 1 downto 0);
                s_3_addr_reg_367_pp0_iter10_reg <= s_3_addr_reg_367_pp0_iter9_reg;
                s_3_addr_reg_367_pp0_iter11_reg <= s_3_addr_reg_367_pp0_iter10_reg;
                s_3_addr_reg_367_pp0_iter12_reg <= s_3_addr_reg_367_pp0_iter11_reg;
                s_3_addr_reg_367_pp0_iter13_reg <= s_3_addr_reg_367_pp0_iter12_reg;
                s_3_addr_reg_367_pp0_iter14_reg <= s_3_addr_reg_367_pp0_iter13_reg;
                s_3_addr_reg_367_pp0_iter15_reg <= s_3_addr_reg_367_pp0_iter14_reg;
                s_3_addr_reg_367_pp0_iter16_reg <= s_3_addr_reg_367_pp0_iter15_reg;
                s_3_addr_reg_367_pp0_iter2_reg <= s_3_addr_reg_367;
                s_3_addr_reg_367_pp0_iter3_reg <= s_3_addr_reg_367_pp0_iter2_reg;
                s_3_addr_reg_367_pp0_iter4_reg <= s_3_addr_reg_367_pp0_iter3_reg;
                s_3_addr_reg_367_pp0_iter5_reg <= s_3_addr_reg_367_pp0_iter4_reg;
                s_3_addr_reg_367_pp0_iter6_reg <= s_3_addr_reg_367_pp0_iter5_reg;
                s_3_addr_reg_367_pp0_iter7_reg <= s_3_addr_reg_367_pp0_iter6_reg;
                s_3_addr_reg_367_pp0_iter8_reg <= s_3_addr_reg_367_pp0_iter7_reg;
                s_3_addr_reg_367_pp0_iter9_reg <= s_3_addr_reg_367_pp0_iter8_reg;
                s_4_addr_reg_372 <= zext_ln294_2_fu_235_p1(3 - 1 downto 0);
                s_4_addr_reg_372_pp0_iter10_reg <= s_4_addr_reg_372_pp0_iter9_reg;
                s_4_addr_reg_372_pp0_iter11_reg <= s_4_addr_reg_372_pp0_iter10_reg;
                s_4_addr_reg_372_pp0_iter12_reg <= s_4_addr_reg_372_pp0_iter11_reg;
                s_4_addr_reg_372_pp0_iter13_reg <= s_4_addr_reg_372_pp0_iter12_reg;
                s_4_addr_reg_372_pp0_iter14_reg <= s_4_addr_reg_372_pp0_iter13_reg;
                s_4_addr_reg_372_pp0_iter15_reg <= s_4_addr_reg_372_pp0_iter14_reg;
                s_4_addr_reg_372_pp0_iter16_reg <= s_4_addr_reg_372_pp0_iter15_reg;
                s_4_addr_reg_372_pp0_iter2_reg <= s_4_addr_reg_372;
                s_4_addr_reg_372_pp0_iter3_reg <= s_4_addr_reg_372_pp0_iter2_reg;
                s_4_addr_reg_372_pp0_iter4_reg <= s_4_addr_reg_372_pp0_iter3_reg;
                s_4_addr_reg_372_pp0_iter5_reg <= s_4_addr_reg_372_pp0_iter4_reg;
                s_4_addr_reg_372_pp0_iter6_reg <= s_4_addr_reg_372_pp0_iter5_reg;
                s_4_addr_reg_372_pp0_iter7_reg <= s_4_addr_reg_372_pp0_iter6_reg;
                s_4_addr_reg_372_pp0_iter8_reg <= s_4_addr_reg_372_pp0_iter7_reg;
                s_4_addr_reg_372_pp0_iter9_reg <= s_4_addr_reg_372_pp0_iter8_reg;
                trunc_ln294_2_reg_341 <= i_fu_74(31 downto 3);
                trunc_ln294_reg_336 <= trunc_ln294_fu_196_p1;
                trunc_ln294_reg_336_pp0_iter10_reg <= trunc_ln294_reg_336_pp0_iter9_reg;
                trunc_ln294_reg_336_pp0_iter11_reg <= trunc_ln294_reg_336_pp0_iter10_reg;
                trunc_ln294_reg_336_pp0_iter12_reg <= trunc_ln294_reg_336_pp0_iter11_reg;
                trunc_ln294_reg_336_pp0_iter13_reg <= trunc_ln294_reg_336_pp0_iter12_reg;
                trunc_ln294_reg_336_pp0_iter14_reg <= trunc_ln294_reg_336_pp0_iter13_reg;
                trunc_ln294_reg_336_pp0_iter15_reg <= trunc_ln294_reg_336_pp0_iter14_reg;
                trunc_ln294_reg_336_pp0_iter16_reg <= trunc_ln294_reg_336_pp0_iter15_reg;
                trunc_ln294_reg_336_pp0_iter1_reg <= trunc_ln294_reg_336;
                trunc_ln294_reg_336_pp0_iter2_reg <= trunc_ln294_reg_336_pp0_iter1_reg;
                trunc_ln294_reg_336_pp0_iter3_reg <= trunc_ln294_reg_336_pp0_iter2_reg;
                trunc_ln294_reg_336_pp0_iter4_reg <= trunc_ln294_reg_336_pp0_iter3_reg;
                trunc_ln294_reg_336_pp0_iter5_reg <= trunc_ln294_reg_336_pp0_iter4_reg;
                trunc_ln294_reg_336_pp0_iter6_reg <= trunc_ln294_reg_336_pp0_iter5_reg;
                trunc_ln294_reg_336_pp0_iter7_reg <= trunc_ln294_reg_336_pp0_iter6_reg;
                trunc_ln294_reg_336_pp0_iter8_reg <= trunc_ln294_reg_336_pp0_iter7_reg;
                trunc_ln294_reg_336_pp0_iter9_reg <= trunc_ln294_reg_336_pp0_iter8_reg;
                urem_ln294_reg_387 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_r_load_reg_382 <= in_r_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter16_stage0, ap_idle_pp0_0to15, ap_idle_pp0_1to17, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to15 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter16_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to17 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln292_fu_181_p2 <= std_logic_vector(unsigned(i_fu_74) + unsigned(ap_const_lv64_1));
    add_ln294_fu_191_p2 <= std_logic_vector(unsigned(trunc_ln292_fu_187_p1) + unsigned(pos_0_lcssa_sel));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln292_fu_176_p2)
    begin
        if (((icmp_ln292_fu_176_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter16_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, icmp_ln292_reg_327_pp0_iter15_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln292_reg_327_pp0_iter15_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter16_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter16_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to15_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to15 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to17_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to17 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to17 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_163_p0 <= grp_fu_163_p00(29 - 1 downto 0);
    grp_fu_163_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln294_2_reg_341),59));
    grp_fu_163_p1 <= ap_const_lv59_33333334(31 - 1 downto 0);
    grp_fu_210_p0 <= i_fu_74(31 downto 3);
    grp_fu_210_p1 <= ap_const_lv29_5(4 - 1 downto 0);
    icmp_ln292_fu_176_p2 <= "1" when (i_fu_74 = sub_ln262) else "0";
    in_r_address0 <= zext_ln294_3_fu_244_p1(11 - 1 downto 0);
    in_r_ce0 <= in_r_ce0_local;

    in_r_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_r_ce0_local <= ap_const_logic_1;
        else 
            in_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_0_address0 <= s_0_address0_local;

    s_0_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, s_0_addr_reg_352_pp0_iter15_reg, s_0_addr_reg_352_pp0_iter16_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_0_address0_local <= s_0_addr_reg_352_pp0_iter16_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_0_address0_local <= s_0_addr_reg_352_pp0_iter15_reg;
        else 
            s_0_address0_local <= "XXX";
        end if; 
    end process;

    s_0_ce0 <= s_0_ce0_local;

    s_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_0_ce0_local <= ap_const_logic_1;
        else 
            s_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_0_d0 <= xor_ln294_fu_299_p2;
    s_0_we0 <= s_0_we0_local;

    s_0_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln294_1_fu_268_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln294_1_fu_268_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_0_we0_local <= ap_const_logic_1;
        else 
            s_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_1_address0 <= s_1_address0_local;

    s_1_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, s_1_addr_reg_357_pp0_iter15_reg, s_1_addr_reg_357_pp0_iter16_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_1_address0_local <= s_1_addr_reg_357_pp0_iter16_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_1_address0_local <= s_1_addr_reg_357_pp0_iter15_reg;
        else 
            s_1_address0_local <= "XXX";
        end if; 
    end process;

    s_1_ce0 <= s_1_ce0_local;

    s_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_1_ce0_local <= ap_const_logic_1;
        else 
            s_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_1_d0 <= xor_ln294_fu_299_p2;
    s_1_we0 <= s_1_we0_local;

    s_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln294_1_fu_268_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln294_1_fu_268_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_1_we0_local <= ap_const_logic_1;
        else 
            s_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_2_address0 <= s_2_address0_local;

    s_2_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, s_2_addr_reg_362_pp0_iter15_reg, s_2_addr_reg_362_pp0_iter16_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_2_address0_local <= s_2_addr_reg_362_pp0_iter16_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_2_address0_local <= s_2_addr_reg_362_pp0_iter15_reg;
        else 
            s_2_address0_local <= "XXX";
        end if; 
    end process;

    s_2_ce0 <= s_2_ce0_local;

    s_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_2_ce0_local <= ap_const_logic_1;
        else 
            s_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_2_d0 <= xor_ln294_fu_299_p2;
    s_2_we0 <= s_2_we0_local;

    s_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln294_1_fu_268_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln294_1_fu_268_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_2_we0_local <= ap_const_logic_1;
        else 
            s_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_3_address0 <= s_3_address0_local;

    s_3_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, s_3_addr_reg_367_pp0_iter15_reg, s_3_addr_reg_367_pp0_iter16_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_3_address0_local <= s_3_addr_reg_367_pp0_iter16_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_3_address0_local <= s_3_addr_reg_367_pp0_iter15_reg;
        else 
            s_3_address0_local <= "XXX";
        end if; 
    end process;

    s_3_ce0 <= s_3_ce0_local;

    s_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_3_ce0_local <= ap_const_logic_1;
        else 
            s_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_3_d0 <= xor_ln294_fu_299_p2;
    s_3_we0 <= s_3_we0_local;

    s_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln294_1_fu_268_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln294_1_fu_268_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_3_we0_local <= ap_const_logic_1;
        else 
            s_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_4_address0 <= s_4_address0_local;

    s_4_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, s_4_addr_reg_372_pp0_iter15_reg, s_4_addr_reg_372_pp0_iter16_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_4_address0_local <= s_4_addr_reg_372_pp0_iter16_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_4_address0_local <= s_4_addr_reg_372_pp0_iter15_reg;
        else 
            s_4_address0_local <= "XXX";
        end if; 
    end process;

    s_4_ce0 <= s_4_ce0_local;

    s_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_4_ce0_local <= ap_const_logic_1;
        else 
            s_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_4_d0 <= xor_ln294_fu_299_p2;
    s_4_we0 <= s_4_we0_local;

    s_4_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln294_1_fu_268_p1)
    begin
        if ((not((trunc_ln294_1_fu_268_p1 = ap_const_lv3_3)) and not((trunc_ln294_1_fu_268_p1 = ap_const_lv3_2)) and not((trunc_ln294_1_fu_268_p1 = ap_const_lv3_1)) and not((trunc_ln294_1_fu_268_p1 = ap_const_lv3_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_4_we0_local <= ap_const_logic_1;
        else 
            s_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln294_fu_262_p2 <= std_logic_vector(shift_left(unsigned(zext_ln294_fu_248_p1),to_integer(unsigned('0' & zext_ln294_1_fu_258_p1(31-1 downto 0)))));
    shl_ln2_fu_251_p3 <= (trunc_ln294_reg_336_pp0_iter16_reg & ap_const_lv3_0);
    tmp_2_fu_271_p11 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_2_fu_271_p12 <= urem_ln294_reg_387(3 - 1 downto 0);
    tmp_fu_225_p4 <= grp_fu_163_p2(58 downto 32);
    trunc_ln292_fu_187_p1 <= i_fu_74(11 - 1 downto 0);
    trunc_ln294_1_fu_268_p1 <= urem_ln294_reg_387(3 - 1 downto 0);
    trunc_ln294_fu_196_p1 <= i_fu_74(3 - 1 downto 0);
    xor_ln294_fu_299_p2 <= (tmp_2_fu_271_p13 xor shl_ln294_fu_262_p2);
    zext_ln294_1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_251_p3),64));
    zext_ln294_2_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_225_p4),64));
    zext_ln294_3_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln294_reg_331_pp0_iter14_reg),64));
    zext_ln294_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_r_load_reg_382),64));
end behav;
