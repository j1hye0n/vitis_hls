-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_Pipeline_Row_DCT_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_2d_in_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_ce0 : OUT STD_LOGIC;
    buf_2d_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_1_ce0 : OUT STD_LOGIC;
    buf_2d_in_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_2_ce0 : OUT STD_LOGIC;
    buf_2d_in_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_3_ce0 : OUT STD_LOGIC;
    buf_2d_in_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_4_ce0 : OUT STD_LOGIC;
    buf_2d_in_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_5_ce0 : OUT STD_LOGIC;
    buf_2d_in_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_6_ce0 : OUT STD_LOGIC;
    buf_2d_in_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_7_ce0 : OUT STD_LOGIC;
    buf_2d_in_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    row_outbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_ce0 : OUT STD_LOGIC;
    row_outbuf_we0 : OUT STD_LOGIC;
    row_outbuf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    row_outbuf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_ce1 : OUT STD_LOGIC;
    row_outbuf_we1 : OUT STD_LOGIC;
    row_outbuf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_dct_Pipeline_Row_DCT_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln39_reg_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_1_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln39_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_222_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_2d_in_load_reg_266 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal buf_2d_in_1_load_reg_271 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_2_load_reg_276 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_3_load_reg_281 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_4_load_reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_5_load_reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_6_load_reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_7_load_reg_301 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_dct_1d_1_fu_154_ap_start : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_ap_done : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_ap_idle : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_ap_ready : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_1_fu_154_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_dst_we0 : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_1_fu_154_dst_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_1_fu_154_dst_ce1 : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_dst_we1 : STD_LOGIC;
    signal grp_dct_1d_1_fu_154_dst_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_1_fu_154_dst_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dct_1d_1_fu_154_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_ignoreCallOp48 : BOOLEAN;
    signal ap_block_pp0_stage3_ignoreCallOp50 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp51 : BOOLEAN;
    signal ap_block_pp0_stage0_ignoreCallOp55 : BOOLEAN;
    signal ap_block_pp0_stage1_ignoreCallOp56 : BOOLEAN;
    signal ap_block_pp0_stage2_ignoreCallOp57 : BOOLEAN;
    signal ap_block_pp0_stage3_ignoreCallOp61 : BOOLEAN;
    signal zext_ln39_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_46 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln39_fu_195_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_2d_in_ce0_local : STD_LOGIC;
    signal buf_2d_in_1_ce0_local : STD_LOGIC;
    signal buf_2d_in_2_ce0_local : STD_LOGIC;
    signal buf_2d_in_3_ce0_local : STD_LOGIC;
    signal buf_2d_in_4_ce0_local : STD_LOGIC;
    signal buf_2d_in_5_ce0_local : STD_LOGIC;
    signal buf_2d_in_6_ce0_local : STD_LOGIC;
    signal buf_2d_in_7_ce0_local : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_dct_1d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
        src_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce1 : OUT STD_LOGIC;
        dst_we1 : OUT STD_LOGIC;
        dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component dct_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_dct_1d_1_fu_154 : component dct_dct_1d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d_1_fu_154_ap_start,
        ap_done => grp_dct_1d_1_fu_154_ap_done,
        ap_idle => grp_dct_1d_1_fu_154_ap_idle,
        ap_ready => grp_dct_1d_1_fu_154_ap_ready,
        src_0_val => buf_2d_in_load_reg_266,
        src_1_val => buf_2d_in_1_load_reg_271,
        src_2_val => buf_2d_in_2_load_reg_276,
        src_3_val => buf_2d_in_3_load_reg_281,
        src_4_val => buf_2d_in_4_load_reg_286,
        src_5_val => buf_2d_in_5_load_reg_291,
        src_6_val => buf_2d_in_6_load_reg_296,
        src_7_val => buf_2d_in_7_load_reg_301,
        dst_address0 => grp_dct_1d_1_fu_154_dst_address0,
        dst_ce0 => grp_dct_1d_1_fu_154_dst_ce0,
        dst_we0 => grp_dct_1d_1_fu_154_dst_we0,
        dst_d0 => grp_dct_1d_1_fu_154_dst_d0,
        dst_address1 => grp_dct_1d_1_fu_154_dst_address1,
        dst_ce1 => grp_dct_1d_1_fu_154_dst_ce1,
        dst_we1 => grp_dct_1d_1_fu_154_dst_we1,
        dst_d1 => grp_dct_1d_1_fu_154_dst_d1,
        dst_offset => grp_dct_1d_1_fu_154_dst_offset);

    flow_control_loop_pipe_sequential_init_U : component dct_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    grp_dct_1d_1_fu_154_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_1d_1_fu_154_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln39_reg_222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    grp_dct_1d_1_fu_154_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dct_1d_1_fu_154_ap_ready = ap_const_logic_1)) then 
                    grp_dct_1d_1_fu_154_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_46 <= ap_const_lv4_0;
            elsif (((icmp_ln39_reg_222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                i_fu_46 <= add_ln39_fu_195_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                buf_2d_in_1_load_reg_271 <= buf_2d_in_1_q0;
                buf_2d_in_2_load_reg_276 <= buf_2d_in_2_q0;
                buf_2d_in_3_load_reg_281 <= buf_2d_in_3_q0;
                buf_2d_in_4_load_reg_286 <= buf_2d_in_4_q0;
                buf_2d_in_5_load_reg_291 <= buf_2d_in_5_q0;
                buf_2d_in_6_load_reg_296 <= buf_2d_in_6_q0;
                buf_2d_in_7_load_reg_301 <= buf_2d_in_7_q0;
                buf_2d_in_load_reg_266 <= buf_2d_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_216 <= ap_sig_allocacmp_i_1;
                icmp_ln39_reg_222 <= icmp_ln39_fu_177_p2;
                icmp_ln39_reg_222_pp0_iter1_reg <= icmp_ln39_reg_222;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln39_fu_195_p2 <= std_logic_vector(unsigned(i_1_reg_216) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_ignoreCallOp56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_ignoreCallOp48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_ignoreCallOp57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_ignoreCallOp50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_ignoreCallOp61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln39_reg_222)
    begin
        if (((icmp_ln39_reg_222 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_46, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_46;
        end if; 
    end process;

    buf_2d_in_1_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_1_ce0 <= buf_2d_in_1_ce0_local;

    buf_2d_in_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_1_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_2_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_2_ce0 <= buf_2d_in_2_ce0_local;

    buf_2d_in_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_2_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_3_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_3_ce0 <= buf_2d_in_3_ce0_local;

    buf_2d_in_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_3_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_4_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_4_ce0 <= buf_2d_in_4_ce0_local;

    buf_2d_in_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_4_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_5_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_5_ce0 <= buf_2d_in_5_ce0_local;

    buf_2d_in_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_5_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_6_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_6_ce0 <= buf_2d_in_6_ce0_local;

    buf_2d_in_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_6_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_7_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_7_ce0 <= buf_2d_in_7_ce0_local;

    buf_2d_in_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_7_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_address0 <= zext_ln39_fu_183_p1(3 - 1 downto 0);
    buf_2d_in_ce0 <= buf_2d_in_ce0_local;

    buf_2d_in_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_ce0_local <= ap_const_logic_1;
        else 
            buf_2d_in_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_dct_1d_1_fu_154_ap_start <= grp_dct_1d_1_fu_154_ap_start_reg;
    grp_dct_1d_1_fu_154_dst_offset <= i_1_reg_216(3 - 1 downto 0);
    icmp_ln39_fu_177_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_8) else "0";
    row_outbuf_address0 <= grp_dct_1d_1_fu_154_dst_address0;
    row_outbuf_address1 <= grp_dct_1d_1_fu_154_dst_address1;
    row_outbuf_ce0 <= grp_dct_1d_1_fu_154_dst_ce0;
    row_outbuf_ce1 <= grp_dct_1d_1_fu_154_dst_ce1;
    row_outbuf_d0 <= grp_dct_1d_1_fu_154_dst_d0;
    row_outbuf_d1 <= grp_dct_1d_1_fu_154_dst_d1;
    row_outbuf_we0 <= grp_dct_1d_1_fu_154_dst_we0;
    row_outbuf_we1 <= grp_dct_1d_1_fu_154_dst_we1;
    zext_ln39_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
