-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
    src_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of dct_dct_1d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv29_25A1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010010110100001";
    constant ap_const_lv29_1FFFD39E : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101001110011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv29_1FFFDA60 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101101001100000";
    constant ap_const_lv29_2C63 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010110001100011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv29_8D4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100011010100";
    constant ap_const_lv29_1924 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001100100100100";
    constant ap_const_lv29_29CF : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010100111001111";
    constant ap_const_lv29_1151 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000101010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal src_7_val_read_reg_881 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal src_6_val_read_reg_887 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_5_val_read_reg_894 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_4_val_read_reg_900 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_3_val_read_reg_905 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_2_val_read_reg_910 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_1_val_read_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_0_val_read_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_3_fu_201_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_3_reg_926 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln11_1_fu_205_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln11_1_reg_932 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_217_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_937 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp218_fu_229_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp218_reg_942 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_263_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_10_reg_947 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_11_fu_269_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_11_reg_953 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_fu_273_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_reg_958 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_13_fu_279_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_13_reg_963 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_14_fu_283_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_14_reg_969 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_3_fu_287_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_3_reg_974 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_15_fu_293_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_15_reg_979 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_17_fu_297_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal dst_offset_read_reg_991 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal dst_offset_read_reg_991_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp7_cast15_fu_370_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_cast15_reg_1002 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp12_fu_384_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp12_fu_384_p2 : signal is "no";
    signal tmp12_reg_1008 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp19_cast_fu_411_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp19_cast_reg_1013 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp25_cast17_fu_421_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp25_cast17_reg_1019 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_4_reg_1025 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_7_fu_484_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_7_reg_1030 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln26_fu_496_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln26_reg_1035 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp40_fu_510_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp40_fu_510_p2 : signal is "no";
    signal tmp40_reg_1041 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln24_11_fu_516_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_11_reg_1046 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_10_fu_534_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_10_reg_1051 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal sext_ln24_12_fu_537_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_12_reg_1057 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_1_fu_540_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_1_reg_1062 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_5_fu_546_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_5_reg_1067 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_739_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_8_reg_1072 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_731_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_11_reg_1077 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_748_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_14_reg_1082 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_9_fu_554_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_9_reg_1087 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_755_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_19_reg_1092 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_13_fu_559_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_13_reg_1097 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_762_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_25_reg_1102 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_769_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_10_reg_1107 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_776_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_13_reg_1112 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_784_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_16_reg_1117 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_791_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_17_reg_1122 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_799_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_22_reg_1127 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_1_reg_1132 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_21_reg_1137 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_828_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_27_reg_1147 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_834_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_28_reg_1152 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_3_reg_1157 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_5_reg_1162 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_6_reg_1167 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_7_reg_1172 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_port_reg_dst_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln8_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_3_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_1_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln26_5_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_4_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_we1_local : STD_LOGIC;
    signal dst_d1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_ce1_local : STD_LOGIC;
    signal dst_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal dst_we0_local : STD_LOGIC;
    signal dst_d0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_ce0_local : STD_LOGIC;
    signal dst_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_3_fu_201_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln11_1_fu_205_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_209_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_217_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_217_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_223_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_223_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_223_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_235_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5716_fu_243_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5716_fu_243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5716_fu_243_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_235_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_209_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln24_fu_257_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_fu_249_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_11_fu_269_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_fu_273_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln24_13_fu_279_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_14_fu_283_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_3_fu_287_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln24_15_fu_293_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_17_fu_297_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_301_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_341_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_fu_348_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_2_fu_320_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_5_fu_329_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_fu_364_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_1_fu_317_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp11_fu_374_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp11_cast_fu_380_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_4_fu_326_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_fu_314_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_fu_390_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_cast_fu_395_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln11_fu_323_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp18_fu_399_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_9_fu_338_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp19_fu_405_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_6_fu_332_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp25_fu_415_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp27_fu_425_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp27_cast_fu_431_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl1_fu_439_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl_fu_453_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln26_fu_460_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp28_fu_447_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_4_fu_465_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_7_fu_484_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_16_fu_481_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_7_fu_484_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln24_8_fu_335_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp35_fu_490_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp39_fu_500_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp39_cast_fu_506_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln24_11_fu_516_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_11_fu_516_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_522_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln24_1_fu_540_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln24_5_fu_546_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_5_fu_546_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln24_9_fu_554_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_9_fu_554_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln24_13_fu_559_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_13_fu_559_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln26_12_fu_564_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_12_fu_564_p2 : signal is "no";
    signal add_ln26_1_fu_568_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_807_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_1_fu_568_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_1_fu_568_p2 : signal is "no";
    signal tmp_3_fu_583_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_2_fu_595_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_841_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_18_fu_605_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_18_fu_605_p2 : signal is "no";
    signal add_ln26_3_fu_609_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_850_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_3_fu_609_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_3_fu_609_p2 : signal is "no";
    signal add_ln26_23_fu_624_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_23_fu_624_p2 : signal is "no";
    signal add_ln26_5_fu_628_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_857_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_5_fu_628_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_5_fu_628_p2 : signal is "no";
    signal trunc_ln26_6_fu_643_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_864_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_29_fu_652_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_29_fu_652_p2 : signal is "no";
    signal add_ln26_7_fu_656_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_874_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_7_fu_656_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_7_fu_656_p2 : signal is "no";
    signal tmp_2_fu_671_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_683_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_695_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_707_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_719_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_748_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_755_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_755_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_762_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_769_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_776_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_776_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_784_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_791_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_791_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_799_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_799_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_807_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_815_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_815_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_821_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_821_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_821_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_828_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_828_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_834_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_834_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_834_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_841_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_7_fu_551_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_841_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_850_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_850_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_857_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_857_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_864_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_864_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_874_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_874_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_mul_16s_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_16s_15s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_16s_16s_12ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_13ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_18s_14ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_16s_16s_13ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_12ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_13ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_12ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_18s_13ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_addmuladd_18s_16s_13ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_18s_16s_14ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    mul_16s_15ns_29_1_1_U10 : component dct_mul_16s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => sext_ln24_11_fu_269_p0,
        din1 => mul_ln24_fu_273_p1,
        dout => mul_ln24_fu_273_p2);

    mul_16s_15s_29_1_1_U11 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => sext_ln24_14_fu_283_p0,
        din1 => mul_ln24_3_fu_287_p1,
        dout => mul_ln24_3_fu_287_p2);

    mul_16s_15ns_29_1_1_U12 : component dct_mul_16s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_7_fu_484_p0,
        din1 => mul_ln24_7_fu_484_p1,
        dout => mul_ln24_7_fu_484_p2);

    mul_16s_15s_29_1_1_U13 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_11_fu_516_p0,
        din1 => mul_ln24_11_fu_516_p1,
        dout => mul_ln24_11_fu_516_p2);

    mul_16s_15s_29_1_1_U14 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => src_6_val_read_reg_887,
        din1 => mul_ln24_1_fu_540_p1,
        dout => mul_ln24_1_fu_540_p2);

    mul_16s_15s_29_1_1_U15 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_5_fu_546_p0,
        din1 => mul_ln24_5_fu_546_p1,
        dout => mul_ln24_5_fu_546_p2);

    mul_16s_15ns_29_1_1_U16 : component dct_mul_16s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_9_fu_554_p0,
        din1 => mul_ln24_9_fu_554_p1,
        dout => mul_ln24_9_fu_554_p2);

    mul_16s_15s_29_1_1_U17 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_13_fu_559_p0,
        din1 => mul_ln24_13_fu_559_p1,
        dout => mul_ln24_13_fu_559_p2);

    mac_muladd_16s_15s_13ns_29_4_1_U18 : component dct_mac_muladd_16s_15s_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln24_13_fu_279_p0,
        din1 => grp_fu_731_p1,
        din2 => grp_fu_731_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_731_p3);

    ama_submuladd_16s_16s_12ns_29s_29_4_1_U19 : component dct_ama_submuladd_16s_16s_12ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln24_3_fu_201_p0,
        din1 => sext_ln11_1_fu_205_p0,
        din2 => grp_fu_739_p2,
        din3 => mul_ln24_reg_958,
        ce => ap_const_logic_1,
        dout => grp_fu_739_p4);

    mac_muladd_16s_14ns_29s_29_4_1_U20 : component dct_mac_muladd_16s_14ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln24_15_fu_293_p0,
        din1 => grp_fu_748_p1,
        din2 => mul_ln24_3_reg_974,
        ce => ap_const_logic_1,
        dout => grp_fu_748_p3);

    mac_muladd_16s_15s_29s_29_4_1_U21 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_755_p0,
        din1 => grp_fu_755_p1,
        din2 => mul_ln24_7_reg_1030,
        ce => ap_const_logic_1,
        dout => grp_fu_755_p3);

    mac_muladd_16s_14ns_29s_29_4_1_U22 : component dct_mac_muladd_16s_14ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_762_p0,
        din1 => grp_fu_762_p1,
        din2 => mul_ln24_11_reg_1046,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p3);

    mac_muladd_17s_13ns_29s_29_4_1_U23 : component dct_mac_muladd_17s_13ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp7_fu_364_p2,
        din1 => grp_fu_769_p1,
        din2 => mul_ln24_1_reg_1062,
        ce => ap_const_logic_1,
        dout => grp_fu_769_p3);

    mac_muladd_18s_14ns_13ns_29_4_1_U24 : component dct_mac_muladd_18s_14ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 14,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp19_fu_405_p2,
        din1 => grp_fu_776_p1,
        din2 => grp_fu_776_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_776_p3);

    ama_submuladd_16s_16s_13ns_29s_29_4_1_U25 : component dct_ama_submuladd_16s_16s_13ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 13,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_784_p0,
        din1 => grp_fu_784_p1,
        din2 => grp_fu_784_p2,
        din3 => mul_ln24_5_reg_1067,
        ce => ap_const_logic_1,
        dout => grp_fu_784_p4);

    mac_muladd_17s_12ns_13ns_29_4_1_U26 : component dct_mac_muladd_17s_12ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp25_fu_415_p2,
        din1 => grp_fu_791_p1,
        din2 => grp_fu_791_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_791_p3);

    mac_muladd_17s_13ns_13ns_29_4_1_U27 : component dct_mac_muladd_17s_13ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp35_fu_490_p2,
        din1 => grp_fu_799_p1,
        din2 => grp_fu_799_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_799_p3);

    mac_muladd_16s_14ns_29ns_29_4_1_U28 : component dct_mac_muladd_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => src_0_val_read_reg_920,
        din1 => grp_fu_807_p1,
        din2 => add_ln26_8_reg_1072,
        ce => ap_const_logic_1,
        dout => grp_fu_807_p3);

    mac_muladd_17s_12ns_29s_29_4_1_U29 : component dct_mac_muladd_17s_12ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_815_p0,
        din1 => grp_fu_815_p1,
        din2 => mul_ln24_9_reg_1087,
        ce => ap_const_logic_1,
        dout => grp_fu_815_p3);

    mac_muladd_18s_13ns_13ns_29_4_1_U30 : component dct_mac_muladd_18s_13ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_821_p0,
        din1 => grp_fu_821_p1,
        din2 => grp_fu_821_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p3);

    mac_muladd_17s_13ns_29s_29_4_1_U31 : component dct_mac_muladd_17s_13ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_828_p0,
        din1 => grp_fu_828_p1,
        din2 => mul_ln24_13_reg_1097,
        ce => ap_const_logic_1,
        dout => grp_fu_828_p3);

    mac_muladd_17s_12ns_13ns_29_4_1_U32 : component dct_mac_muladd_17s_12ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_834_p0,
        din1 => grp_fu_834_p1,
        din2 => grp_fu_834_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_834_p3);

    ama_addmuladd_18s_16s_13ns_29ns_29_4_1_U33 : component dct_ama_addmuladd_18s_16s_13ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 13,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp12_reg_1008,
        din1 => grp_fu_841_p1,
        din2 => grp_fu_841_p2,
        din3 => add_ln26_13_reg_1112,
        ce => ap_const_logic_1,
        dout => grp_fu_841_p4);

    mac_muladd_16s_14ns_29ns_29_4_1_U34 : component dct_mac_muladd_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_850_p0,
        din1 => grp_fu_850_p1,
        din2 => add_ln26_14_reg_1082,
        ce => ap_const_logic_1,
        dout => grp_fu_850_p3);

    mac_muladd_16s_15s_29ns_29_4_1_U35 : component dct_mac_muladd_16s_15s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_857_p0,
        din1 => grp_fu_857_p1,
        din2 => add_ln26_19_reg_1092,
        ce => ap_const_logic_1,
        dout => grp_fu_857_p3);

    ama_submuladd_18s_16s_14ns_29ns_29_4_1_U36 : component dct_ama_submuladd_18s_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp40_reg_1041,
        din1 => grp_fu_864_p1,
        din2 => grp_fu_864_p2,
        din3 => grp_fu_821_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_864_p4);

    mac_muladd_16s_14ns_29ns_29_4_1_U37 : component dct_mac_muladd_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_874_p0,
        din1 => grp_fu_874_p1,
        din2 => add_ln26_25_reg_1102,
        ce => ap_const_logic_1,
        dout => grp_fu_874_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_10_reg_1107 <= grp_fu_769_p3;
                add_ln26_13_reg_1112 <= grp_fu_776_p3;
                add_ln26_16_reg_1117 <= grp_fu_784_p4;
                add_ln26_17_reg_1122 <= grp_fu_791_p3;
                add_ln26_22_reg_1127 <= grp_fu_799_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln26_11_reg_1077 <= grp_fu_731_p3;
                add_ln26_14_reg_1082 <= grp_fu_748_p3;
                add_ln26_19_reg_1092 <= grp_fu_755_p3;
                add_ln26_25_reg_1102 <= grp_fu_762_p3;
                add_ln26_8_reg_1072 <= grp_fu_739_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln26_21_reg_1137 <= grp_fu_815_p3;
                add_ln26_27_reg_1147 <= grp_fu_828_p3;
                add_ln26_28_reg_1152 <= grp_fu_834_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_dst_offset <= dst_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dst_offset_read_reg_991 <= ap_port_reg_dst_offset;
                dst_offset_read_reg_991_pp0_iter1_reg <= dst_offset_read_reg_991;
                mul_ln24_11_reg_1046 <= mul_ln24_11_fu_516_p2;
                mul_ln24_7_reg_1030 <= mul_ln24_7_fu_484_p2;
                sext_ln26_reg_1035 <= sext_ln26_fu_496_p1;
                tmp12_reg_1008 <= tmp12_fu_384_p2;
                tmp19_cast_reg_1013 <= tmp19_cast_fu_411_p1;
                tmp25_cast17_reg_1019 <= tmp25_cast17_fu_421_p1;
                tmp40_reg_1041 <= tmp40_fu_510_p2;
                tmp7_cast15_reg_1002 <= tmp7_cast15_fu_370_p1;
                trunc_ln26_1_reg_1132 <= add_ln26_1_fu_568_p2(28 downto 13);
                trunc_ln26_4_reg_1025 <= add_ln26_4_fu_465_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln24_13_reg_1097 <= mul_ln24_13_fu_559_p2;
                mul_ln24_9_reg_1087 <= mul_ln24_9_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln24_1_reg_1062 <= mul_ln24_1_fu_540_p2;
                mul_ln24_5_reg_1067 <= mul_ln24_5_fu_546_p2;
                sext_ln24_10_reg_1051 <= sext_ln24_10_fu_534_p1;
                sext_ln24_12_reg_1057 <= sext_ln24_12_fu_537_p1;
                trunc_ln26_3_reg_1157 <= add_ln26_3_fu_609_p2(28 downto 13);
                trunc_ln26_5_reg_1162 <= add_ln26_5_fu_628_p2(28 downto 13);
                trunc_ln26_6_reg_1167 <= trunc_ln26_6_fu_643_p1(28 downto 13);
                trunc_ln26_7_reg_1172 <= add_ln26_7_fu_656_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln24_3_reg_974 <= mul_ln24_3_fu_287_p2;
                mul_ln24_reg_958 <= mul_ln24_fu_273_p2;
                sext_ln11_1_reg_932 <= sext_ln11_1_fu_205_p1;
                sext_ln24_11_reg_953 <= sext_ln24_11_fu_269_p1;
                sext_ln24_13_reg_963 <= sext_ln24_13_fu_279_p1;
                sext_ln24_14_reg_969 <= sext_ln24_14_fu_283_p1;
                sext_ln24_15_reg_979 <= sext_ln24_15_fu_293_p1;
                sext_ln24_3_reg_926 <= sext_ln24_3_fu_201_p1;
                src_0_val_read_reg_920 <= src_0_val;
                src_1_val_read_reg_915 <= src_1_val;
                src_2_val_read_reg_910 <= src_2_val;
                src_3_val_read_reg_905 <= src_3_val;
                src_4_val_read_reg_900 <= src_4_val;
                src_5_val_read_reg_894 <= src_5_val;
                src_6_val_read_reg_887 <= src_6_val;
                src_7_val_read_reg_881 <= src_7_val;
                tmp218_reg_942 <= tmp218_fu_229_p2;
                    tmp_10_reg_947(28 downto 13) <= tmp_10_fu_263_p2(28 downto 13);
                tmp_reg_937 <= tmp_fu_217_p2;
            end if;
        end if;
    end process;
    tmp_10_reg_947(12 downto 0) <= "1000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln24_fu_257_p2 <= std_logic_vector(unsigned(tmp_4_fu_235_p3) + unsigned(shl_ln_fu_209_p3));
    add_ln26_12_fu_564_p2 <= std_logic_vector(signed(add_ln26_11_reg_1077) + signed(add_ln26_10_reg_1107));
    add_ln26_18_fu_605_p2 <= std_logic_vector(signed(add_ln26_17_reg_1122) + signed(add_ln26_16_reg_1117));
    add_ln26_1_fu_568_p1 <= grp_fu_807_p3;
    add_ln26_1_fu_568_p2 <= std_logic_vector(unsigned(add_ln26_12_fu_564_p2) + unsigned(add_ln26_1_fu_568_p1));
    add_ln26_23_fu_624_p2 <= std_logic_vector(signed(add_ln26_22_reg_1127) + signed(add_ln26_21_reg_1137));
    add_ln26_29_fu_652_p2 <= std_logic_vector(signed(add_ln26_28_reg_1152) + signed(add_ln26_27_reg_1147));
    add_ln26_3_fu_609_p1 <= grp_fu_850_p3;
    add_ln26_3_fu_609_p2 <= std_logic_vector(unsigned(add_ln26_18_fu_605_p2) + unsigned(add_ln26_3_fu_609_p1));
    add_ln26_4_fu_465_p2 <= std_logic_vector(unsigned(sub_ln26_fu_460_p2) + unsigned(tmp28_fu_447_p2));
    add_ln26_5_fu_628_p1 <= grp_fu_857_p3;
    add_ln26_5_fu_628_p2 <= std_logic_vector(unsigned(add_ln26_23_fu_624_p2) + unsigned(add_ln26_5_fu_628_p1));
    add_ln26_7_fu_656_p1 <= grp_fu_874_p3;
    add_ln26_7_fu_656_p2 <= std_logic_vector(unsigned(add_ln26_29_fu_652_p2) + unsigned(add_ln26_7_fu_656_p1));
    add_ln26_fu_348_p2 <= std_logic_vector(unsigned(tmp_10_reg_947) + unsigned(tmp3_fu_341_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= dst_address0_local;

    dst_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln26_1_fu_590_p1, ap_block_pp0_stage3, zext_ln26_5_fu_690_p1, ap_block_pp0_stage0, zext_ln26_4_fu_714_p1, zext_ln26_6_fu_726_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0_local <= zext_ln26_6_fu_726_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0_local <= zext_ln26_4_fu_714_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0_local <= zext_ln26_5_fu_690_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0_local <= zext_ln26_1_fu_590_p1(6 - 1 downto 0);
        else 
            dst_address0_local <= "XXXXXX";
        end if; 
    end process;

    dst_address1 <= dst_address1_local;

    dst_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln8_fu_309_p1, ap_block_pp0_stage1, zext_ln26_3_fu_529_p1, ap_block_pp0_stage2, zext_ln26_fu_678_p1, ap_block_pp0_stage3, zext_ln26_2_fu_702_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1_local <= zext_ln26_2_fu_702_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1_local <= zext_ln26_fu_678_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1_local <= zext_ln26_3_fu_529_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1_local <= zext_ln8_fu_309_p1(6 - 1 downto 0);
        else 
            dst_address1_local <= "XXXXXX";
        end if; 
    end process;

    dst_ce0 <= dst_ce0_local;

    dst_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce0_local <= ap_const_logic_1;
        else 
            dst_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_ce1 <= dst_ce1_local;

    dst_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            dst_ce1_local <= ap_const_logic_1;
        else 
            dst_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= dst_d0_local;

    dst_d0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, trunc_ln26_5_reg_1162, trunc_ln26_6_reg_1167, trunc_ln26_7_reg_1172, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0, trunc_ln26_2_fu_595_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_d0_local <= trunc_ln26_7_reg_1172;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0_local <= trunc_ln26_5_reg_1162;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0_local <= trunc_ln26_6_reg_1167;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_d0_local <= trunc_ln26_2_fu_595_p1(28 downto 13);
        else 
            dst_d0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dst_d1 <= dst_d1_local;

    dst_d1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, trunc_ln26_4_reg_1025, ap_CS_fsm_pp0_stage2, trunc_ln26_1_reg_1132, trunc_ln26_3_reg_1157, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage0, add_ln26_fu_348_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1_local <= trunc_ln26_3_reg_1157;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1_local <= trunc_ln26_1_reg_1132;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_d1_local <= trunc_ln26_4_reg_1025;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_d1_local <= add_ln26_fu_348_p2(28 downto 13);
        else 
            dst_d1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dst_we0 <= dst_we0_local;

    dst_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we0_local <= ap_const_logic_1;
        else 
            dst_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_we1 <= dst_we1_local;

    dst_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            dst_we1_local <= ap_const_logic_1;
        else 
            dst_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_435_p1 <= tmp27_fu_425_p2(16 - 1 downto 0);
    grp_fu_731_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_731_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_739_p2 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_748_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);
    grp_fu_755_p0 <= sext_ln24_17_fu_297_p1(16 - 1 downto 0);
    grp_fu_755_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_762_p0 <= sext_ln24_17_fu_297_p1(16 - 1 downto 0);
    grp_fu_762_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);
    grp_fu_769_p1 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_776_p1 <= ap_const_lv29_29CF(14 - 1 downto 0);
    grp_fu_776_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_784_p0 <= sext_ln11_1_reg_932(16 - 1 downto 0);
    grp_fu_784_p1 <= sext_ln24_3_reg_926(16 - 1 downto 0);
    grp_fu_784_p2 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_791_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_791_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_799_p1 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_799_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_807_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);
    grp_fu_815_p0 <= tmp7_cast15_reg_1002(17 - 1 downto 0);
    grp_fu_815_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_821_p0 <= tmp19_cast_reg_1013(18 - 1 downto 0);
    grp_fu_821_p1 <= ap_const_lv29_1151(13 - 1 downto 0);
    grp_fu_821_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_828_p0 <= tmp25_cast17_reg_1019(17 - 1 downto 0);
    grp_fu_828_p1 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_834_p0 <= sext_ln26_reg_1035(17 - 1 downto 0);
    grp_fu_834_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_834_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_841_p1 <= sext_ln24_7_fu_551_p1(16 - 1 downto 0);
    grp_fu_841_p2 <= ap_const_lv29_1151(13 - 1 downto 0);
    grp_fu_850_p0 <= sext_ln24_10_reg_1051(16 - 1 downto 0);
    grp_fu_850_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);
    grp_fu_857_p0 <= sext_ln24_11_reg_953(16 - 1 downto 0);
    grp_fu_857_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_864_p1 <= sext_ln24_7_fu_551_p1(16 - 1 downto 0);
    grp_fu_864_p2 <= ap_const_lv29_29CF(14 - 1 downto 0);
    grp_fu_874_p0 <= sext_ln24_14_reg_969(16 - 1 downto 0);
    grp_fu_874_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);
    mul_ln24_11_fu_516_p0 <= sext_ln24_16_fu_481_p1(16 - 1 downto 0);
    mul_ln24_11_fu_516_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    mul_ln24_13_fu_559_p0 <= sext_ln24_15_reg_979(16 - 1 downto 0);
    mul_ln24_13_fu_559_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    mul_ln24_1_fu_540_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    mul_ln24_3_fu_287_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    mul_ln24_5_fu_546_p0 <= sext_ln24_13_reg_963(16 - 1 downto 0);
    mul_ln24_5_fu_546_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    mul_ln24_7_fu_484_p0 <= sext_ln24_16_fu_481_p1(16 - 1 downto 0);
    mul_ln24_7_fu_484_p1 <= ap_const_lv29_25A1(15 - 1 downto 0);
    mul_ln24_9_fu_554_p0 <= sext_ln24_12_reg_1057(16 - 1 downto 0);
    mul_ln24_9_fu_554_p1 <= ap_const_lv29_2C63(15 - 1 downto 0);
    mul_ln24_fu_273_p1 <= ap_const_lv29_25A1(15 - 1 downto 0);
    p_shl1_fu_439_p3 <= (empty_fu_435_p1 & ap_const_lv13_0);
    p_shl_fu_453_p3 <= (tmp_reg_937 & ap_const_lv13_0);
    sext_ln11_1_fu_205_p0 <= src_4_val;
        sext_ln11_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln11_1_fu_205_p0),17));

        sext_ln11_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_4_val_read_reg_900),18));

        sext_ln24_10_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_0_val_read_reg_920),29));

    sext_ln24_11_fu_269_p0 <= src_1_val;
        sext_ln24_11_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_11_fu_269_p0),29));

        sext_ln24_12_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_6_val_read_reg_887),29));

    sext_ln24_13_fu_279_p0 <= src_7_val;
        sext_ln24_13_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_13_fu_279_p0),29));

    sext_ln24_14_fu_283_p0 <= src_2_val;
        sext_ln24_14_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_14_fu_283_p0),29));

    sext_ln24_15_fu_293_p0 <= src_5_val;
        sext_ln24_15_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_15_fu_293_p0),29));

        sext_ln24_16_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_3_val_read_reg_905),29));

    sext_ln24_17_fu_297_p0 <= src_4_val;
        sext_ln24_17_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_17_fu_297_p0),29));

        sext_ln24_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_1_val_read_reg_915),17));

        sext_ln24_2_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_2_val_read_reg_910),17));

    sext_ln24_3_fu_201_p0 <= src_3_val;
        sext_ln24_3_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_3_fu_201_p0),17));

        sext_ln24_4_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_5_val_read_reg_894),18));

        sext_ln24_5_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_5_val_read_reg_894),17));

        sext_ln24_6_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_6_val_read_reg_887),17));

        sext_ln24_7_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_6_val_read_reg_887),18));

        sext_ln24_8_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_7_val_read_reg_881),17));

        sext_ln24_9_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_7_val_read_reg_881),18));

        sext_ln24_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_0_val_read_reg_920),17));

        sext_ln26_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp35_fu_490_p2),29));

    shl_ln_fu_209_p1 <= src_7_val;
    shl_ln_fu_209_p3 <= (shl_ln_fu_209_p1 & ap_const_lv13_0);
    sub_ln26_fu_460_p2 <= std_logic_vector(unsigned(tmp_10_reg_947) - unsigned(p_shl_fu_453_p3));
        tmp11_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp11_fu_374_p2),18));

    tmp11_fu_374_p2 <= std_logic_vector(signed(sext_ln24_1_fu_317_p1) - signed(sext_ln24_2_fu_320_p1));
    tmp12_fu_384_p2 <= std_logic_vector(signed(tmp11_cast_fu_380_p1) - signed(sext_ln24_4_fu_326_p1));
        tmp17_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp17_fu_390_p2),18));

    tmp17_fu_390_p2 <= std_logic_vector(signed(sext_ln24_fu_314_p1) - signed(sext_ln24_3_reg_926));
    tmp18_fu_399_p2 <= std_logic_vector(signed(tmp17_cast_fu_395_p1) - signed(sext_ln11_fu_323_p1));
        tmp19_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp19_fu_405_p2),29));

    tmp19_fu_405_p2 <= std_logic_vector(unsigned(tmp18_fu_399_p2) + unsigned(sext_ln24_9_fu_338_p1));
    tmp1_fu_223_p0 <= src_5_val;
    tmp1_fu_223_p1 <= src_6_val;
    tmp1_fu_223_p2 <= std_logic_vector(signed(tmp1_fu_223_p0) + signed(tmp1_fu_223_p1));
    tmp218_fu_229_p2 <= std_logic_vector(unsigned(tmp1_fu_223_p2) + unsigned(tmp_fu_217_p2));
        tmp25_cast17_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp25_fu_415_p2),29));

    tmp25_fu_415_p2 <= std_logic_vector(signed(sext_ln24_6_fu_332_p1) - signed(sext_ln24_1_fu_317_p1));
        tmp27_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp27_fu_425_p2),29));

    tmp27_fu_425_p2 <= std_logic_vector(signed(sext_ln24_6_fu_332_p1) + signed(sext_ln24_5_fu_329_p1));
    tmp28_fu_447_p2 <= std_logic_vector(signed(tmp27_cast_fu_431_p1) - signed(p_shl1_fu_439_p3));
    tmp35_fu_490_p2 <= std_logic_vector(signed(sext_ln24_fu_314_p1) - signed(sext_ln24_8_fu_335_p1));
        tmp39_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp39_fu_500_p2),18));

    tmp39_fu_500_p2 <= std_logic_vector(signed(sext_ln24_2_fu_320_p1) - signed(sext_ln24_1_fu_317_p1));
    tmp3_fu_341_p3 <= (tmp218_reg_942 & ap_const_lv13_0);
    tmp40_fu_510_p2 <= std_logic_vector(signed(tmp39_cast_fu_506_p1) + signed(sext_ln24_4_fu_326_p1));
    tmp5716_fu_243_p0 <= src_4_val;
    tmp5716_fu_243_p1 <= src_3_val;
    tmp5716_fu_243_p2 <= std_logic_vector(signed(tmp5716_fu_243_p0) + signed(tmp5716_fu_243_p1));
    tmp6_fu_249_p3 <= (tmp5716_fu_243_p2 & ap_const_lv13_0);
        tmp7_cast15_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_364_p2),29));

    tmp7_fu_364_p2 <= std_logic_vector(signed(sext_ln24_2_fu_320_p1) - signed(sext_ln24_5_fu_329_p1));
    tmp_10_fu_263_p2 <= std_logic_vector(unsigned(add_ln24_fu_257_p2) + unsigned(tmp6_fu_249_p3));
    tmp_1_fu_301_p3 <= (ap_port_reg_dst_offset & ap_const_lv3_0);
    tmp_2_fu_671_p3 <= (dst_offset_read_reg_991_pp0_iter1_reg & ap_const_lv3_1);
    tmp_3_fu_583_p3 <= (dst_offset_read_reg_991_pp0_iter1_reg & ap_const_lv3_2);
    tmp_4_fu_235_p1 <= src_0_val;
    tmp_4_fu_235_p3 <= (tmp_4_fu_235_p1 & ap_const_lv13_1000);
    tmp_6_fu_695_p3 <= (dst_offset_read_reg_991_pp0_iter1_reg & ap_const_lv3_3);
    tmp_7_fu_522_p3 <= (dst_offset_read_reg_991 & ap_const_lv3_4);
    tmp_8_fu_707_p3 <= (dst_offset_read_reg_991_pp0_iter1_reg & ap_const_lv3_5);
    tmp_9_fu_683_p3 <= (dst_offset_read_reg_991_pp0_iter1_reg & ap_const_lv3_6);
    tmp_fu_217_p0 <= src_2_val;
    tmp_fu_217_p1 <= src_1_val;
    tmp_fu_217_p2 <= std_logic_vector(signed(tmp_fu_217_p0) + signed(tmp_fu_217_p1));
    tmp_s_fu_719_p3 <= (dst_offset_read_reg_991_pp0_iter1_reg & ap_const_lv3_7);
    trunc_ln26_2_fu_595_p1 <= grp_fu_841_p4;
    trunc_ln26_6_fu_643_p1 <= grp_fu_864_p4;
    zext_ln26_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_583_p3),64));
    zext_ln26_2_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_695_p3),64));
    zext_ln26_3_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_522_p3),64));
    zext_ln26_4_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_707_p3),64));
    zext_ln26_5_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_683_p3),64));
    zext_ln26_6_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_719_p3),64));
    zext_ln26_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_671_p3),64));
    zext_ln8_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_301_p3),64));
end behav;
