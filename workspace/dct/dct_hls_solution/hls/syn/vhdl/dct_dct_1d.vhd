-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv29_25A1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010010110100001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv29_1FFFD39E : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101001110011110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1924 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001100100100100";
    constant ap_const_lv29_2C63 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010110001100011";
    constant ap_const_lv29_8D4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100011010100";
    constant ap_const_lv29_1FFFDA60 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101101001100000";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv29_29CF : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010100111001111";
    constant ap_const_lv29_1151 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000101010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal reg_210 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_215 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal src_offset_read_reg_895 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln8_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_reg_905_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_915 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_915_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_reg_915_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_reg_925 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_reg_925_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_reg_925_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_2_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_2_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_2_reg_935_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_2_reg_935_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal src_load_reg_945 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln24_3_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_3_reg_952 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_6_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_6_reg_962 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_6_reg_962_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_6_reg_962_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal src_load_3_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_28_fu_294_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_28_reg_979 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_fu_298_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_reg_984 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln24_4_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_4_reg_989 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal zext_ln24_4_reg_989_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_reg_999 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_reg_999_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_reg_999_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_reg_999_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln24_20_fu_328_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_20_reg_1009 : STD_LOGIC_VECTOR (16 downto 0);
    signal src_load_4_reg_1014 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_load_7_reg_1020 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_30_fu_335_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_30_reg_1027 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_31_fu_339_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_31_reg_1033 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_16_fu_343_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_16_reg_1038 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_33_fu_349_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_33_reg_1043 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_20_fu_352_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_20_reg_1048 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_34_fu_358_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_18_fu_365_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_18_reg_1059 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_19_fu_369_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_19_reg_1065 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1071 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp235_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp235_reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_440_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_16_reg_1081 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_29_fu_446_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_29_reg_1087 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_fu_450_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_reg_1093 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp19_fu_471_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp19_reg_1098 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp25_cast17_fu_483_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp25_cast17_reg_1103 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp27_fu_487_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp27_reg_1109 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_493_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_1114 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln26_fu_503_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln26_reg_1119 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_24_fu_507_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_24_reg_1125 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_27_fu_539_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_cast15_fu_542_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_cast15_reg_1136 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln26_fu_545_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln26_reg_1141 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp12_fu_559_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp12_fu_559_p2 : signal is "no";
    signal tmp12_reg_1146 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp19_cast_fu_565_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp19_cast_reg_1151 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_32_fu_568_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_32_reg_1157 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_17_fu_572_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_17_reg_1162 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_1_reg_1167 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp40_fu_630_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp40_fu_630_p2 : signal is "no";
    signal tmp40_reg_1172 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp40_reg_1172_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_24_fu_636_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_24_reg_1177 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_752_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_30_reg_1182 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_744_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_33_reg_1187 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_761_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_36_reg_1192 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp33_fu_640_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp33_reg_1197 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_770_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_41_reg_1202 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_777_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_47_reg_1207 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_784_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_32_reg_1212 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_798_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_38_reg_1217 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_791_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_39_reg_1222 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_805_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_44_reg_1227 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_8_reg_1232 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_s_reg_1242 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_837_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_43_reg_1247 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_26_fu_683_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln24_26_reg_1252 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_843_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_50_reg_1257 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_9_reg_1262 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_2_reg_1267 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_867_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_46_reg_1272 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_874_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_48_reg_1277 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln26_4_reg_1282 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln26_3_reg_1287 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal src_ce1_local : STD_LOGIC;
    signal src_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal src_ce0_local : STD_LOGIC;
    signal src_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal dst_we1_local : STD_LOGIC;
    signal dst_d1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_ce1_local : STD_LOGIC;
    signal dst_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal dst_we0_local : STD_LOGIC;
    signal dst_d0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_ce0_local : STD_LOGIC;
    signal dst_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_220_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_233_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_258_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_270_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_282_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln24_fu_298_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_316_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln11_2_fu_331_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_30_fu_335_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_16_fu_343_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln24_20_fu_352_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln24_34_fu_358_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_22_fu_376_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_23_fu_380_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5733_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_415_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_390_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln24_fu_434_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp15_fu_426_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln24_29_fu_446_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_22_fu_376_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_fu_362_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_fu_456_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_cast_fu_461_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln11_fu_373_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp18_fu_465_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_26_fu_387_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_23_fu_380_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp25_fu_477_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_25_fu_384_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp35_fu_497_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln24_24_fu_507_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_24_fu_507_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_fu_516_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_fu_523_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln26_fu_545_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp11_fu_551_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp11_cast_fu_555_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_21_fu_512_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln24_17_fu_572_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp27_cast_fu_578_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl2_fu_581_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl_fu_594_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln26_fu_601_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp28_fu_588_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_11_fu_606_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp39_fu_622_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp39_cast_fu_626_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp33_fu_640_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp33_fu_640_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_34_fu_645_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_34_fu_645_p2 : signal is "no";
    signal add_ln26_8_fu_649_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_813_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_8_fu_649_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_8_fu_649_p2 : signal is "no";
    signal add_ln26_40_fu_664_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_40_fu_664_p2 : signal is "no";
    signal add_ln26_10_fu_668_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_829_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_10_fu_668_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_10_fu_668_p2 : signal is "no";
    signal mul_ln24_26_fu_683_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln24_26_fu_683_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln26_9_fu_688_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_850_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_45_fu_697_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_45_fu_697_p2 : signal is "no";
    signal add_ln26_12_fu_701_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_860_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_12_fu_701_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_12_fu_701_p2 : signal is "no";
    signal grp_fu_880_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln26_51_fu_716_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_51_fu_716_p2 : signal is "no";
    signal add_ln26_14_fu_720_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln26_14_fu_720_p2 : signal is "no";
    signal trunc_ln26_3_fu_735_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_887_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_744_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_744_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_752_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln11_2_fu_331_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_770_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_770_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_784_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_791_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_791_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_791_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_798_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_805_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_813_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_813_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_821_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_821_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_829_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_829_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_837_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_837_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_843_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_843_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_843_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_850_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_860_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_860_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_867_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_867_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_867_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_874_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_874_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_880_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_880_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_887_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_887_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_mul_16s_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_16s_15s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_17s_14ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_17s_13ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_16s_16s_12ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_16s_16s_13ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_12ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_13ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_18s_14ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_12ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_addmuladd_18s_16s_13ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_18s_13ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_13ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_18s_16s_14ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    mul_16s_15ns_29_1_1_U76 : component dct_mul_16s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => reg_210,
        din1 => mul_ln24_fu_298_p1,
        dout => mul_ln24_fu_298_p2);

    mul_16s_15s_29_1_1_U77 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => reg_215,
        din1 => mul_ln24_16_fu_343_p1,
        dout => mul_ln24_16_fu_343_p2);

    mul_16s_15ns_29_1_1_U78 : component dct_mul_16s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => src_load_3_reg_972,
        din1 => mul_ln24_20_fu_352_p1,
        dout => mul_ln24_20_fu_352_p2);

    mul_16s_15s_29_1_1_U79 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_24_fu_507_p0,
        din1 => mul_ln24_24_fu_507_p1,
        dout => mul_ln24_24_fu_507_p2);

    mul_17s_14ns_29_1_1_U80 : component dct_mul_17s_14ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => tmp7_reg_1093,
        din1 => mul_ln26_fu_545_p1,
        dout => mul_ln26_fu_545_p2);

    mul_16s_15ns_29_1_1_U81 : component dct_mul_16s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => reg_210,
        din1 => mul_ln24_17_fu_572_p1,
        dout => mul_ln24_17_fu_572_p2);

    mul_17s_13ns_29_1_1_U82 : component dct_mul_17s_13ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => tmp33_fu_640_p0,
        din1 => tmp33_fu_640_p1,
        dout => tmp33_fu_640_p2);

    mul_16s_15s_29_1_1_U83 : component dct_mul_16s_15s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln24_26_fu_683_p0,
        din1 => mul_ln24_26_fu_683_p1,
        dout => mul_ln24_26_fu_683_p2);

    mac_muladd_16s_15s_13ns_29_4_1_U84 : component dct_mac_muladd_16s_15s_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln24_30_fu_335_p0,
        din1 => grp_fu_744_p1,
        din2 => grp_fu_744_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_744_p3);

    ama_submuladd_16s_16s_12ns_29s_29_4_1_U85 : component dct_ama_submuladd_16s_16s_12ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_752_p0,
        din1 => grp_fu_752_p1,
        din2 => grp_fu_752_p2,
        din3 => mul_ln24_reg_984,
        ce => ap_const_logic_1,
        dout => grp_fu_752_p4);

    ama_submuladd_16s_16s_13ns_29s_29_4_1_U86 : component dct_ama_submuladd_16s_16s_13ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 13,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        din2 => grp_fu_761_p2,
        din3 => mul_ln24_16_reg_1038,
        ce => ap_const_logic_1,
        dout => grp_fu_761_p4);

    mac_muladd_16s_15s_29s_29_4_1_U87 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_770_p0,
        din1 => grp_fu_770_p1,
        din2 => mul_ln24_20_reg_1048,
        ce => ap_const_logic_1,
        dout => grp_fu_770_p3);

    mac_muladd_16s_14ns_29s_29_4_1_U88 : component dct_mac_muladd_16s_14ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        din2 => mul_ln24_24_reg_1125,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p3);

    mac_muladd_16s_15s_29s_29_4_1_U89 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln24_29_fu_446_p0,
        din1 => grp_fu_784_p1,
        din2 => mul_ln26_reg_1141,
        ce => ap_const_logic_1,
        dout => grp_fu_784_p3);

    mac_muladd_16s_15s_13ns_29_4_1_U90 : component dct_mac_muladd_16s_15s_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_791_p0,
        din1 => grp_fu_791_p1,
        din2 => grp_fu_791_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_791_p3);

    mac_muladd_17s_12ns_29s_29_4_1_U91 : component dct_mac_muladd_17s_12ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp25_fu_477_p2,
        din1 => grp_fu_798_p1,
        din2 => mul_ln24_17_reg_1162,
        ce => ap_const_logic_1,
        dout => grp_fu_798_p3);

    mac_muladd_17s_13ns_13ns_29_4_1_U92 : component dct_mac_muladd_17s_13ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp35_fu_497_p2,
        din1 => grp_fu_805_p1,
        din2 => grp_fu_805_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_805_p3);

    mac_muladd_16s_14ns_29ns_29_4_1_U93 : component dct_mac_muladd_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_813_p0,
        din1 => grp_fu_813_p1,
        din2 => add_ln26_30_reg_1182,
        ce => ap_const_logic_1,
        dout => grp_fu_813_p3);

    mac_muladd_18s_14ns_13ns_29_4_1_U94 : component dct_mac_muladd_18s_14ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 14,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp19_reg_1098,
        din1 => grp_fu_821_p1,
        din2 => grp_fu_821_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p3);

    mac_muladd_16s_14ns_29ns_29_4_1_U95 : component dct_mac_muladd_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_829_p0,
        din1 => grp_fu_829_p1,
        din2 => add_ln26_36_reg_1192,
        ce => ap_const_logic_1,
        dout => grp_fu_829_p3);

    mac_muladd_16s_14ns_29s_29_4_1_U96 : component dct_mac_muladd_16s_14ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_837_p0,
        din1 => grp_fu_837_p1,
        din2 => tmp33_reg_1197,
        ce => ap_const_logic_1,
        dout => grp_fu_837_p3);

    mac_muladd_17s_12ns_13ns_29_4_1_U97 : component dct_mac_muladd_17s_12ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_843_p0,
        din1 => grp_fu_843_p1,
        din2 => grp_fu_843_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_843_p3);

    ama_addmuladd_18s_16s_13ns_29ns_29_4_1_U98 : component dct_ama_addmuladd_18s_16s_13ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 13,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp12_reg_1146,
        din1 => reg_215,
        din2 => grp_fu_850_p2,
        din3 => grp_fu_821_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_850_p4);

    mac_muladd_16s_15s_29ns_29_4_1_U99 : component dct_mac_muladd_16s_15s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_860_p0,
        din1 => grp_fu_860_p1,
        din2 => add_ln26_41_reg_1202,
        ce => ap_const_logic_1,
        dout => grp_fu_860_p3);

    mac_muladd_18s_13ns_13ns_29_4_1_U100 : component dct_mac_muladd_18s_13ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_867_p0,
        din1 => grp_fu_867_p1,
        din2 => grp_fu_867_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_867_p3);

    mac_muladd_16s_14ns_29ns_29_4_1_U101 : component dct_mac_muladd_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_874_p0,
        din1 => grp_fu_874_p1,
        din2 => add_ln26_47_reg_1207,
        ce => ap_const_logic_1,
        dout => grp_fu_874_p3);

    mac_muladd_17s_13ns_29s_29_4_1_U102 : component dct_mac_muladd_17s_13ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_880_p0,
        din1 => grp_fu_880_p1,
        din2 => mul_ln24_26_reg_1252,
        ce => ap_const_logic_1,
        dout => grp_fu_880_p3);

    ama_submuladd_18s_16s_14ns_29ns_29_4_1_U103 : component dct_ama_submuladd_18s_16s_14ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp40_reg_1172_pp0_iter2_reg,
        din1 => grp_fu_887_p1,
        din2 => grp_fu_887_p2,
        din3 => add_ln26_46_reg_1272,
        ce => ap_const_logic_1,
        dout => grp_fu_887_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_210 <= src_q1;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_210 <= src_q0;
            end if; 
        end if;
    end process;

    reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_215 <= src_q0;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_215 <= src_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln26_30_reg_1182 <= grp_fu_752_p4;
                add_ln26_33_reg_1187 <= grp_fu_744_p3;
                add_ln26_36_reg_1192 <= grp_fu_761_p4;
                add_ln26_41_reg_1202 <= grp_fu_770_p3;
                add_ln26_47_reg_1207 <= grp_fu_777_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln26_32_reg_1212 <= grp_fu_784_p3;
                add_ln26_38_reg_1217 <= grp_fu_798_p3;
                add_ln26_39_reg_1222 <= grp_fu_791_p3;
                add_ln26_44_reg_1227 <= grp_fu_805_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_43_reg_1247 <= grp_fu_837_p3;
                add_ln26_50_reg_1257 <= grp_fu_843_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln26_46_reg_1272 <= grp_fu_867_p3;
                add_ln26_48_reg_1277 <= grp_fu_874_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_1114 <= empty_fu_493_p1;
                mul_ln24_24_reg_1125 <= mul_ln24_24_fu_507_p2;
                mul_ln24_26_reg_1252 <= mul_ln24_26_fu_683_p2;
                sext_ln24_18_reg_1059 <= sext_ln24_18_fu_365_p1;
                sext_ln24_19_reg_1065 <= sext_ln24_19_fu_369_p1;
                sext_ln24_29_reg_1087 <= sext_ln24_29_fu_446_p1;
                sext_ln26_reg_1119 <= sext_ln26_fu_503_p1;
                src_offset_read_reg_895 <= src_offset;
                tmp19_reg_1098 <= tmp19_fu_471_p2;
                tmp235_reg_1076 <= tmp235_fu_409_p2;
                tmp25_cast17_reg_1103 <= tmp25_cast17_fu_483_p1;
                tmp27_reg_1109 <= tmp27_fu_487_p2;
                tmp7_reg_1093 <= tmp7_fu_450_p2;
                    tmp_16_reg_1081(28 downto 13) <= tmp_16_fu_440_p2(28 downto 13);
                tmp_reg_1071 <= tmp_fu_397_p2;
                trunc_ln26_8_reg_1232 <= add_ln26_8_fu_649_p2(28 downto 13);
                trunc_ln26_s_reg_1242 <= add_ln26_10_fu_668_p2(28 downto 13);
                    zext_ln24_reg_915(5 downto 3) <= zext_ln24_fu_241_p1(5 downto 3);
                    zext_ln24_reg_915_pp0_iter1_reg(5 downto 3) <= zext_ln24_reg_915(5 downto 3);
                    zext_ln24_reg_915_pp0_iter2_reg(5 downto 3) <= zext_ln24_reg_915_pp0_iter1_reg(5 downto 3);
                    zext_ln8_reg_905(5 downto 3) <= zext_ln8_fu_228_p1(5 downto 3);
                    zext_ln8_reg_905_pp0_iter1_reg(5 downto 3) <= zext_ln8_reg_905(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln24_16_reg_1038 <= mul_ln24_16_fu_343_p2;
                mul_ln24_20_reg_1048 <= mul_ln24_20_fu_352_p2;
                sext_ln24_20_reg_1009 <= sext_ln24_20_fu_328_p1;
                sext_ln24_30_reg_1027 <= sext_ln24_30_fu_335_p1;
                sext_ln24_31_reg_1033 <= sext_ln24_31_fu_339_p1;
                sext_ln24_33_reg_1043 <= sext_ln24_33_fu_349_p1;
                trunc_ln26_4_reg_1282 <= add_ln26_14_fu_720_p2(28 downto 13);
                    zext_ln24_4_reg_989(5 downto 3) <= zext_ln24_4_fu_311_p1(5 downto 3);
                    zext_ln24_4_reg_989_pp0_iter1_reg(5 downto 3) <= zext_ln24_4_reg_989(5 downto 3);
                    zext_ln24_5_reg_999(5 downto 3) <= zext_ln24_5_fu_323_p1(5 downto 3);
                    zext_ln24_5_reg_999_pp0_iter1_reg(5 downto 3) <= zext_ln24_5_reg_999(5 downto 3);
                    zext_ln24_5_reg_999_pp0_iter2_reg(5 downto 3) <= zext_ln24_5_reg_999_pp0_iter1_reg(5 downto 3);
                    zext_ln24_5_reg_999_pp0_iter3_reg(5 downto 3) <= zext_ln24_5_reg_999_pp0_iter2_reg(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln24_17_reg_1162 <= mul_ln24_17_fu_572_p2;
                mul_ln26_reg_1141 <= mul_ln26_fu_545_p2;
                sext_ln24_32_reg_1157 <= sext_ln24_32_fu_568_p1;
                tmp12_reg_1146 <= tmp12_fu_559_p2;
                tmp19_cast_reg_1151 <= tmp19_cast_fu_565_p1;
                tmp40_reg_1172 <= tmp40_fu_630_p2;
                tmp40_reg_1172_pp0_iter2_reg <= tmp40_reg_1172;
                tmp7_cast15_reg_1136 <= tmp7_cast15_fu_542_p1;
                trunc_ln26_1_reg_1167 <= add_ln26_11_fu_606_p2(28 downto 13);
                trunc_ln26_2_reg_1267 <= add_ln26_12_fu_701_p2(28 downto 13);
                trunc_ln26_3_reg_1287 <= trunc_ln26_3_fu_735_p1(28 downto 13);
                trunc_ln26_9_reg_1262 <= trunc_ln26_9_fu_688_p1(28 downto 13);
                    zext_ln24_1_reg_925(5 downto 3) <= zext_ln24_1_fu_253_p1(5 downto 3);
                    zext_ln24_1_reg_925_pp0_iter1_reg(5 downto 3) <= zext_ln24_1_reg_925(5 downto 3);
                    zext_ln24_1_reg_925_pp0_iter2_reg(5 downto 3) <= zext_ln24_1_reg_925_pp0_iter1_reg(5 downto 3);
                    zext_ln24_2_reg_935(5 downto 3) <= zext_ln24_2_fu_265_p1(5 downto 3);
                    zext_ln24_2_reg_935_pp0_iter1_reg(5 downto 3) <= zext_ln24_2_reg_935(5 downto 3);
                    zext_ln24_2_reg_935_pp0_iter2_reg(5 downto 3) <= zext_ln24_2_reg_935_pp0_iter1_reg(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln24_reg_984 <= mul_ln24_fu_298_p2;
                sext_ln24_24_reg_1177 <= sext_ln24_24_fu_636_p1;
                sext_ln24_28_reg_979 <= sext_ln24_28_fu_294_p1;
                tmp33_reg_1197 <= tmp33_fu_640_p2;
                    zext_ln24_3_reg_952(5 downto 3) <= zext_ln24_3_fu_277_p1(5 downto 3);
                    zext_ln24_6_reg_962(5 downto 3) <= zext_ln24_6_fu_289_p1(5 downto 3);
                    zext_ln24_6_reg_962_pp0_iter1_reg(5 downto 3) <= zext_ln24_6_reg_962(5 downto 3);
                    zext_ln24_6_reg_962_pp0_iter2_reg(5 downto 3) <= zext_ln24_6_reg_962_pp0_iter1_reg(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                src_load_3_reg_972 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                src_load_4_reg_1014 <= src_q1;
                src_load_7_reg_1020 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                src_load_reg_945 <= src_q1;
            end if;
        end if;
    end process;
    zext_ln8_reg_905(2 downto 0) <= "000";
    zext_ln8_reg_905(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln8_reg_905_pp0_iter1_reg(2 downto 0) <= "000";
    zext_ln8_reg_905_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_915(2 downto 0) <= "001";
    zext_ln24_reg_915(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_915_pp0_iter1_reg(2 downto 0) <= "001";
    zext_ln24_reg_915_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_reg_915_pp0_iter2_reg(2 downto 0) <= "001";
    zext_ln24_reg_915_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_1_reg_925(2 downto 0) <= "010";
    zext_ln24_1_reg_925(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_1_reg_925_pp0_iter1_reg(2 downto 0) <= "010";
    zext_ln24_1_reg_925_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_1_reg_925_pp0_iter2_reg(2 downto 0) <= "010";
    zext_ln24_1_reg_925_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_2_reg_935(2 downto 0) <= "011";
    zext_ln24_2_reg_935(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_2_reg_935_pp0_iter1_reg(2 downto 0) <= "011";
    zext_ln24_2_reg_935_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_2_reg_935_pp0_iter2_reg(2 downto 0) <= "011";
    zext_ln24_2_reg_935_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_3_reg_952(2 downto 0) <= "100";
    zext_ln24_3_reg_952(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_6_reg_962(2 downto 0) <= "111";
    zext_ln24_6_reg_962(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_6_reg_962_pp0_iter1_reg(2 downto 0) <= "111";
    zext_ln24_6_reg_962_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_6_reg_962_pp0_iter2_reg(2 downto 0) <= "111";
    zext_ln24_6_reg_962_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_4_reg_989(2 downto 0) <= "101";
    zext_ln24_4_reg_989(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_4_reg_989_pp0_iter1_reg(2 downto 0) <= "101";
    zext_ln24_4_reg_989_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_5_reg_999(2 downto 0) <= "110";
    zext_ln24_5_reg_999(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_5_reg_999_pp0_iter1_reg(2 downto 0) <= "110";
    zext_ln24_5_reg_999_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_5_reg_999_pp0_iter2_reg(2 downto 0) <= "110";
    zext_ln24_5_reg_999_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln24_5_reg_999_pp0_iter3_reg(2 downto 0) <= "110";
    zext_ln24_5_reg_999_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_16_reg_1081(12 downto 0) <= "1000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln24_fu_434_p2 <= std_logic_vector(unsigned(tmp_9_fu_415_p3) + unsigned(shl_ln_fu_390_p3));
    add_ln26_10_fu_668_p1 <= grp_fu_829_p3;
    add_ln26_10_fu_668_p2 <= std_logic_vector(unsigned(add_ln26_40_fu_664_p2) + unsigned(add_ln26_10_fu_668_p1));
    add_ln26_11_fu_606_p2 <= std_logic_vector(unsigned(sub_ln26_fu_601_p2) + unsigned(tmp28_fu_588_p2));
    add_ln26_12_fu_701_p1 <= grp_fu_860_p3;
    add_ln26_12_fu_701_p2 <= std_logic_vector(unsigned(add_ln26_45_fu_697_p2) + unsigned(add_ln26_12_fu_701_p1));
    add_ln26_14_fu_720_p2 <= std_logic_vector(unsigned(add_ln26_51_fu_716_p2) + unsigned(add_ln26_48_reg_1277));
    add_ln26_34_fu_645_p2 <= std_logic_vector(signed(add_ln26_33_reg_1187) + signed(add_ln26_32_reg_1212));
    add_ln26_40_fu_664_p2 <= std_logic_vector(signed(add_ln26_39_reg_1222) + signed(add_ln26_38_reg_1217));
    add_ln26_45_fu_697_p2 <= std_logic_vector(signed(add_ln26_44_reg_1227) + signed(add_ln26_43_reg_1247));
    add_ln26_51_fu_716_p2 <= std_logic_vector(signed(add_ln26_50_reg_1257) + signed(grp_fu_880_p3));
    add_ln26_8_fu_649_p1 <= grp_fu_813_p3;
    add_ln26_8_fu_649_p2 <= std_logic_vector(unsigned(add_ln26_34_fu_645_p2) + unsigned(add_ln26_8_fu_649_p1));
    add_ln26_fu_523_p2 <= std_logic_vector(unsigned(tmp_16_reg_1081) + unsigned(tmp3_fu_516_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= dst_address0_local;

    dst_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln24_reg_915_pp0_iter2_reg, zext_ln24_1_reg_925_pp0_iter2_reg, zext_ln24_4_reg_989_pp0_iter1_reg, zext_ln24_5_reg_999_pp0_iter3_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0_local <= zext_ln24_5_reg_999_pp0_iter3_reg(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0_local <= zext_ln24_4_reg_989_pp0_iter1_reg(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0_local <= zext_ln24_1_reg_925_pp0_iter2_reg(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0_local <= zext_ln24_reg_915_pp0_iter2_reg(6 - 1 downto 0);
        else 
            dst_address0_local <= "XXXXXX";
        end if; 
    end process;

    dst_address1 <= dst_address1_local;

    dst_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln8_reg_905_pp0_iter1_reg, zext_ln24_2_reg_935_pp0_iter2_reg, zext_ln24_3_reg_952, zext_ln24_6_reg_962_pp0_iter2_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1_local <= zext_ln24_6_reg_962_pp0_iter2_reg(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1_local <= zext_ln24_2_reg_935_pp0_iter2_reg(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1_local <= zext_ln24_3_reg_952(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1_local <= zext_ln8_reg_905_pp0_iter1_reg(6 - 1 downto 0);
        else 
            dst_address1_local <= "XXXXXX";
        end if; 
    end process;

    dst_ce0 <= dst_ce0_local;

    dst_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dst_ce0_local <= ap_const_logic_1;
        else 
            dst_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_ce1 <= dst_ce1_local;

    dst_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dst_ce1_local <= ap_const_logic_1;
        else 
            dst_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= dst_d0_local;

    dst_d0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, trunc_ln26_8_reg_1232, trunc_ln26_9_reg_1262, trunc_ln26_2_reg_1267, trunc_ln26_3_reg_1287, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0_local <= trunc_ln26_3_reg_1287;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0_local <= trunc_ln26_2_reg_1267;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_d0_local <= trunc_ln26_9_reg_1262;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_d0_local <= trunc_ln26_8_reg_1232;
        else 
            dst_d0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dst_d1 <= dst_d1_local;

    dst_d1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, trunc_ln26_1_reg_1167, trunc_ln26_s_reg_1242, trunc_ln26_4_reg_1282, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, add_ln26_fu_523_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1_local <= trunc_ln26_4_reg_1282;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1_local <= trunc_ln26_s_reg_1242;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_d1_local <= trunc_ln26_1_reg_1167;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_d1_local <= add_ln26_fu_523_p2(28 downto 13);
        else 
            dst_d1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dst_we0 <= dst_we0_local;

    dst_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dst_we0_local <= ap_const_logic_1;
        else 
            dst_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    dst_we1 <= dst_we1_local;

    dst_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dst_we1_local <= ap_const_logic_1;
        else 
            dst_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_493_p1 <= tmp27_fu_487_p2(16 - 1 downto 0);
    grp_fu_744_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_744_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_752_p0 <= sext_ln24_20_fu_328_p1(16 - 1 downto 0);
    grp_fu_752_p1 <= sext_ln11_2_fu_331_p1(16 - 1 downto 0);
    grp_fu_752_p2 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_761_p0 <= sext_ln11_2_fu_331_p1(16 - 1 downto 0);
    grp_fu_761_p1 <= sext_ln24_20_fu_328_p1(16 - 1 downto 0);
    grp_fu_761_p2 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_770_p0 <= sext_ln24_34_fu_358_p1(16 - 1 downto 0);
    grp_fu_770_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_777_p0 <= sext_ln24_34_fu_358_p1(16 - 1 downto 0);
    grp_fu_777_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);
    grp_fu_784_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_791_p0 <= sext_ln24_30_reg_1027(16 - 1 downto 0);
    grp_fu_791_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_791_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_798_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_805_p1 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_805_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_813_p0 <= sext_ln24_27_fu_539_p1(16 - 1 downto 0);
    grp_fu_813_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);
    grp_fu_821_p1 <= ap_const_lv29_29CF(14 - 1 downto 0);
    grp_fu_821_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_829_p0 <= sext_ln24_27_fu_539_p1(16 - 1 downto 0);
    grp_fu_829_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);
    grp_fu_837_p0 <= sext_ln24_29_reg_1087(16 - 1 downto 0);
    grp_fu_837_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);
    grp_fu_843_p0 <= sext_ln26_reg_1119(17 - 1 downto 0);
    grp_fu_843_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_843_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_850_p2 <= ap_const_lv29_1151(13 - 1 downto 0);
    grp_fu_860_p0 <= sext_ln24_28_reg_979(16 - 1 downto 0);
    grp_fu_860_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_867_p0 <= tmp19_cast_reg_1151(18 - 1 downto 0);
    grp_fu_867_p1 <= ap_const_lv29_1151(13 - 1 downto 0);
    grp_fu_867_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_874_p0 <= sext_ln24_31_reg_1033(16 - 1 downto 0);
    grp_fu_874_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);
    grp_fu_880_p0 <= tmp25_cast17_reg_1103(17 - 1 downto 0);
    grp_fu_880_p1 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_887_p1 <= sext_ln24_24_reg_1177(16 - 1 downto 0);
    grp_fu_887_p2 <= ap_const_lv29_29CF(14 - 1 downto 0);
    mul_ln24_16_fu_343_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    mul_ln24_17_fu_572_p1 <= ap_const_lv29_2C63(15 - 1 downto 0);
    mul_ln24_20_fu_352_p1 <= ap_const_lv29_25A1(15 - 1 downto 0);
    mul_ln24_24_fu_507_p0 <= sext_ln24_33_reg_1043(16 - 1 downto 0);
    mul_ln24_24_fu_507_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    mul_ln24_26_fu_683_p0 <= sext_ln24_32_reg_1157(16 - 1 downto 0);
    mul_ln24_26_fu_683_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    mul_ln24_fu_298_p1 <= ap_const_lv29_25A1(15 - 1 downto 0);
    mul_ln26_fu_545_p1 <= ap_const_lv29_1924(14 - 1 downto 0);
    p_shl2_fu_581_p3 <= (empty_reg_1114 & ap_const_lv13_0);
    p_shl_fu_594_p3 <= (tmp_reg_1071 & ap_const_lv13_0);
    sext_ln11_2_fu_331_p0 <= src_q1;
        sext_ln11_2_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln11_2_fu_331_p0),17));

        sext_ln11_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_4_reg_1014),18));

        sext_ln24_18_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_210),17));

        sext_ln24_19_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),17));

        sext_ln24_20_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_3_reg_972),17));

        sext_ln24_21_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_210),18));

    sext_ln24_22_fu_376_p0 <= src_q1;
        sext_ln24_22_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_22_fu_376_p0),17));

    sext_ln24_23_fu_380_p0 <= src_q0;
        sext_ln24_23_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_23_fu_380_p0),17));

        sext_ln24_24_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),18));

        sext_ln24_25_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_7_reg_1020),17));

        sext_ln24_26_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_7_reg_1020),18));

        sext_ln24_27_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_reg_945),29));

        sext_ln24_28_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_210),29));

    sext_ln24_29_fu_446_p0 <= src_q0;
        sext_ln24_29_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_29_fu_446_p0),29));

    sext_ln24_30_fu_335_p0 <= src_q0;
        sext_ln24_30_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_30_fu_335_p0),29));

        sext_ln24_31_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),29));

        sext_ln24_32_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_210),29));

        sext_ln24_33_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_3_reg_972),29));

    sext_ln24_34_fu_358_p0 <= src_q1;
        sext_ln24_34_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24_34_fu_358_p0),29));

        sext_ln24_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src_load_reg_945),17));

        sext_ln26_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp35_fu_497_p2),29));

    shl_ln_fu_390_p3 <= (src_load_7_reg_1020 & ap_const_lv13_0);
    src_address0 <= src_address0_local;

    src_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln24_fu_241_p1, zext_ln24_2_fu_265_p1, zext_ln24_6_fu_289_p1, zext_ln24_5_fu_323_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address0_local <= zext_ln24_5_fu_323_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address0_local <= zext_ln24_6_fu_289_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address0_local <= zext_ln24_2_fu_265_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address0_local <= zext_ln24_fu_241_p1(6 - 1 downto 0);
        else 
            src_address0_local <= "XXXXXX";
        end if; 
    end process;

    src_address1 <= src_address1_local;

    src_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln8_fu_228_p1, zext_ln24_1_fu_253_p1, zext_ln24_3_fu_277_p1, zext_ln24_4_fu_311_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address1_local <= zext_ln24_4_fu_311_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address1_local <= zext_ln24_3_fu_277_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address1_local <= zext_ln24_1_fu_253_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address1_local <= zext_ln8_fu_228_p1(6 - 1 downto 0);
        else 
            src_address1_local <= "XXXXXX";
        end if; 
    end process;

    src_ce0 <= src_ce0_local;

    src_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            src_ce0_local <= ap_const_logic_1;
        else 
            src_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    src_ce1 <= src_ce1_local;

    src_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            src_ce1_local <= ap_const_logic_1;
        else 
            src_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln26_fu_601_p2 <= std_logic_vector(unsigned(tmp_16_reg_1081) - unsigned(p_shl_fu_594_p3));
        tmp11_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp11_fu_551_p2),18));

    tmp11_fu_551_p2 <= std_logic_vector(signed(sext_ln24_18_reg_1059) - signed(sext_ln24_19_reg_1065));
    tmp12_fu_559_p2 <= std_logic_vector(signed(tmp11_cast_fu_555_p1) - signed(sext_ln24_21_fu_512_p1));
    tmp15_fu_426_p3 <= (tmp5733_fu_422_p2 & ap_const_lv13_0);
        tmp17_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp17_fu_456_p2),18));

    tmp17_fu_456_p2 <= std_logic_vector(signed(sext_ln24_fu_362_p1) - signed(sext_ln24_20_reg_1009));
    tmp18_fu_465_p2 <= std_logic_vector(signed(tmp17_cast_fu_461_p1) - signed(sext_ln11_fu_373_p1));
        tmp19_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp19_reg_1098),29));

    tmp19_fu_471_p2 <= std_logic_vector(unsigned(tmp18_fu_465_p2) + unsigned(sext_ln24_26_fu_387_p1));
    tmp1_fu_403_p0 <= src_q1;
    tmp1_fu_403_p1 <= src_q0;
    tmp1_fu_403_p2 <= std_logic_vector(signed(tmp1_fu_403_p0) + signed(tmp1_fu_403_p1));
    tmp235_fu_409_p2 <= std_logic_vector(unsigned(tmp1_fu_403_p2) + unsigned(tmp_fu_397_p2));
        tmp25_cast17_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp25_fu_477_p2),29));

    tmp25_fu_477_p2 <= std_logic_vector(signed(sext_ln24_23_fu_380_p1) - signed(sext_ln24_18_fu_365_p1));
        tmp27_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp27_reg_1109),29));

    tmp27_fu_487_p2 <= std_logic_vector(signed(sext_ln24_23_fu_380_p1) + signed(sext_ln24_22_fu_376_p1));
    tmp28_fu_588_p2 <= std_logic_vector(signed(tmp27_cast_fu_578_p1) - signed(p_shl2_fu_581_p3));
    tmp33_fu_640_p0 <= tmp7_cast15_reg_1136(17 - 1 downto 0);
    tmp33_fu_640_p1 <= ap_const_lv29_8D4(13 - 1 downto 0);
    tmp35_fu_497_p2 <= std_logic_vector(signed(sext_ln24_fu_362_p1) - signed(sext_ln24_25_fu_384_p1));
        tmp39_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp39_fu_622_p2),18));

    tmp39_fu_622_p2 <= std_logic_vector(signed(sext_ln24_19_reg_1065) - signed(sext_ln24_18_reg_1059));
    tmp3_fu_516_p3 <= (tmp235_reg_1076 & ap_const_lv13_0);
    tmp40_fu_630_p2 <= std_logic_vector(signed(tmp39_cast_fu_626_p1) + signed(sext_ln24_21_fu_512_p1));
    tmp5733_fu_422_p2 <= std_logic_vector(signed(src_load_4_reg_1014) + signed(src_load_3_reg_972));
        tmp7_cast15_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_1093),29));

    tmp7_fu_450_p2 <= std_logic_vector(signed(sext_ln24_19_fu_369_p1) - signed(sext_ln24_22_fu_376_p1));
    tmp_10_fu_282_p3 <= (src_offset_read_reg_895 & ap_const_lv3_7);
    tmp_16_fu_440_p2 <= std_logic_vector(unsigned(add_ln24_fu_434_p2) + unsigned(tmp15_fu_426_p3));
    tmp_3_fu_233_p3 <= (src_offset & ap_const_lv3_1);
    tmp_4_fu_246_p3 <= (src_offset_read_reg_895 & ap_const_lv3_2);
    tmp_5_fu_258_p3 <= (src_offset_read_reg_895 & ap_const_lv3_3);
    tmp_6_fu_270_p3 <= (src_offset_read_reg_895 & ap_const_lv3_4);
    tmp_7_fu_304_p3 <= (src_offset_read_reg_895 & ap_const_lv3_5);
    tmp_8_fu_316_p3 <= (src_offset_read_reg_895 & ap_const_lv3_6);
    tmp_9_fu_415_p3 <= (src_load_reg_945 & ap_const_lv13_1000);
    tmp_fu_397_p2 <= std_logic_vector(signed(reg_215) + signed(reg_210));
    tmp_s_fu_220_p3 <= (src_offset & ap_const_lv3_0);
    trunc_ln26_3_fu_735_p1 <= grp_fu_887_p4;
    trunc_ln26_9_fu_688_p1 <= grp_fu_850_p4;
    zext_ln24_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_246_p3),64));
    zext_ln24_2_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_258_p3),64));
    zext_ln24_3_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_270_p3),64));
    zext_ln24_4_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_304_p3),64));
    zext_ln24_5_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_316_p3),64));
    zext_ln24_6_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_282_p3),64));
    zext_ln24_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_233_p3),64));
    zext_ln8_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_220_p3),64));
end behav;
