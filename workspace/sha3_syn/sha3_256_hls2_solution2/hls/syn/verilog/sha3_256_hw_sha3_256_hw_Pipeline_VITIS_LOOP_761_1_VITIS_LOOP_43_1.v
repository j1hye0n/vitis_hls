// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha3_256_hw_sha3_256_hw_Pipeline_VITIS_LOOP_761_1_VITIS_LOOP_43_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_q0,
        h_address0,
        h_ce0,
        h_we0,
        h_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
input  [63:0] s_q0;
output  [4:0] h_address0;
output   h_ce0;
output   h_we0;
output  [7:0] h_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln761_fu_104_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln45_fu_176_p1;
reg   [2:0] trunc_ln45_reg_257;
reg   [2:0] trunc_ln45_reg_257_pp0_iter2_reg;
wire   [4:0] add_ln45_fu_180_p2;
reg   [4:0] add_ln45_reg_262;
reg   [4:0] add_ln45_reg_262_pp0_iter2_reg;
reg   [63:0] s_load_reg_267;
wire   [63:0] zext_ln761_fu_155_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln45_1_fu_223_p1;
reg   [3:0] i_fu_48;
wire   [3:0] add_ln43_fu_186_p2;
wire    ap_loop_init;
reg   [2:0] i_1_fu_52;
wire   [2:0] select_ln761_fu_147_p3;
reg   [5:0] indvar_flatten6_fu_56;
wire   [5:0] add_ln761_fu_110_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    s_ce0_local;
reg    h_we0_local;
wire   [7:0] trunc_ln45_1_fu_218_p1;
reg    h_ce0_local;
wire   [0:0] icmp_ln43_fu_127_p2;
wire   [2:0] add_ln761_1_fu_141_p2;
wire   [1:0] trunc_ln762_fu_160_p1;
wire   [3:0] select_ln756_fu_133_p3;
wire   [4:0] zext_ln43_fu_172_p1;
wire   [4:0] shl_ln3_fu_164_p3;
wire   [5:0] shl_ln4_fu_202_p3;
wire   [63:0] zext_ln45_fu_209_p1;
wire   [63:0] lshr_ln45_fu_213_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i_fu_48 = 4'd0;
#0 i_1_fu_52 = 3'd0;
#0 indvar_flatten6_fu_56 = 6'd0;
#0 ap_done_reg = 1'b0;
end

sha3_256_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_52 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_1_fu_52 <= select_ln761_fu_147_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_48 <= add_ln43_fu_186_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln761_fu_104_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_56 <= add_ln761_fu_110_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_56 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln45_reg_262 <= add_ln45_fu_180_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        trunc_ln45_reg_257 <= trunc_ln45_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln45_reg_262_pp0_iter2_reg <= add_ln45_reg_262;
        s_load_reg_267 <= s_q0;
        trunc_ln45_reg_257_pp0_iter2_reg <= trunc_ln45_reg_257;
    end
end

always @ (*) begin
    if (((icmp_ln761_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        h_ce0_local = 1'b1;
    end else begin
        h_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        h_we0_local = 1'b1;
    end else begin
        h_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_ce0_local = 1'b1;
    end else begin
        s_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_186_p2 = (select_ln756_fu_133_p3 + 4'd1);

assign add_ln45_fu_180_p2 = (zext_ln43_fu_172_p1 + shl_ln3_fu_164_p3);

assign add_ln761_1_fu_141_p2 = (i_1_fu_52 + 3'd1);

assign add_ln761_fu_110_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign h_address0 = zext_ln45_1_fu_223_p1;

assign h_ce0 = h_ce0_local;

assign h_d0 = trunc_ln45_1_fu_218_p1;

assign h_we0 = h_we0_local;

assign icmp_ln43_fu_127_p2 = ((i_fu_48 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln761_fu_104_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 6'd32) ? 1'b1 : 1'b0);

assign lshr_ln45_fu_213_p2 = s_load_reg_267 >> zext_ln45_fu_209_p1;

assign s_address0 = zext_ln761_fu_155_p1;

assign s_ce0 = s_ce0_local;

assign select_ln756_fu_133_p3 = ((icmp_ln43_fu_127_p2[0:0] == 1'b1) ? 4'd0 : i_fu_48);

assign select_ln761_fu_147_p3 = ((icmp_ln43_fu_127_p2[0:0] == 1'b1) ? add_ln761_1_fu_141_p2 : i_1_fu_52);

assign shl_ln3_fu_164_p3 = {{trunc_ln762_fu_160_p1}, {3'd0}};

assign shl_ln4_fu_202_p3 = {{trunc_ln45_reg_257_pp0_iter2_reg}, {3'd0}};

assign trunc_ln45_1_fu_218_p1 = lshr_ln45_fu_213_p2[7:0];

assign trunc_ln45_fu_176_p1 = select_ln756_fu_133_p3[2:0];

assign trunc_ln762_fu_160_p1 = select_ln761_fu_147_p3[1:0];

assign zext_ln43_fu_172_p1 = select_ln756_fu_133_p3;

assign zext_ln45_1_fu_223_p1 = add_ln45_reg_262_pp0_iter2_reg;

assign zext_ln45_fu_209_p1 = shl_ln4_fu_202_p3;

assign zext_ln761_fu_155_p1 = select_ln761_fu_147_p3;

endmodule //sha3_256_hw_sha3_256_hw_Pipeline_VITIS_LOOP_761_1_VITIS_LOOP_43_1
