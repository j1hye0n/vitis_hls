-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hw_KeccakF1600_StatePermute_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sha3_256_hw_KeccakF1600_StatePermute_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_addr_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal Aba_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal state_addr_1_reg_708 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_addr_2_reg_713 : STD_LOGIC_VECTOR (4 downto 0);
    signal Abe_reg_718 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Abi_reg_723 : STD_LOGIC_VECTOR (63 downto 0);
    signal Abo_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Abu_reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal Aga_reg_762 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Age_reg_767 : STD_LOGIC_VECTOR (63 downto 0);
    signal Agi_reg_784 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Ago_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal Agu_reg_806 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal Aka_reg_811 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ake_reg_828 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Aki_reg_833 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ako_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Aku_reg_855 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ama_reg_872 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal Ame_reg_877 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ami_reg_894 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Amo_reg_899 : STD_LOGIC_VECTOR (63 downto 0);
    signal Amu_reg_916 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal Asa_reg_921 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ase_reg_938 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal Asi_reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_addr_24_reg_954 : STD_LOGIC_VECTOR (4 downto 0);
    signal Aso_reg_959 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal Asu_reg_964 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asu_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asu_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aba_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aba_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abe_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abe_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abi_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abi_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abo_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abo_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abu_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abu_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aga_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aga_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Age_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Age_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agi_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agi_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ago_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ago_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agu_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agu_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aka_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aka_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ake_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ake_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aki_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aki_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ako_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ako_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aku_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aku_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ama_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ama_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ame_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ame_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ami_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ami_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amo_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amo_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amu_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amu_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asa_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asa_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ase_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ase_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asi_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asi_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aso_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aso_1_out_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal state_ce0_local : STD_LOGIC;
    signal state_address0_local : STD_LOGIC_VECTOR (4 downto 0);
    signal state_ce1_local : STD_LOGIC;
    signal state_address1_local : STD_LOGIC_VECTOR (4 downto 0);
    signal state_we0_local : STD_LOGIC;
    signal state_d0_local : STD_LOGIC_VECTOR (63 downto 0);
    signal state_we1_local : STD_LOGIC;
    signal state_d1_local : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hw_KeccakF1600_StatePermute_1_Pipeline_state_permute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Asu : IN STD_LOGIC_VECTOR (63 downto 0);
        Aba : IN STD_LOGIC_VECTOR (63 downto 0);
        Abe : IN STD_LOGIC_VECTOR (63 downto 0);
        Abi : IN STD_LOGIC_VECTOR (63 downto 0);
        Abo : IN STD_LOGIC_VECTOR (63 downto 0);
        Abu : IN STD_LOGIC_VECTOR (63 downto 0);
        Aga : IN STD_LOGIC_VECTOR (63 downto 0);
        Age : IN STD_LOGIC_VECTOR (63 downto 0);
        Agi : IN STD_LOGIC_VECTOR (63 downto 0);
        Ago : IN STD_LOGIC_VECTOR (63 downto 0);
        Agu : IN STD_LOGIC_VECTOR (63 downto 0);
        Aka : IN STD_LOGIC_VECTOR (63 downto 0);
        Ake : IN STD_LOGIC_VECTOR (63 downto 0);
        Aki : IN STD_LOGIC_VECTOR (63 downto 0);
        Ako : IN STD_LOGIC_VECTOR (63 downto 0);
        Aku : IN STD_LOGIC_VECTOR (63 downto 0);
        Ama : IN STD_LOGIC_VECTOR (63 downto 0);
        Ame : IN STD_LOGIC_VECTOR (63 downto 0);
        Ami : IN STD_LOGIC_VECTOR (63 downto 0);
        Amo : IN STD_LOGIC_VECTOR (63 downto 0);
        Amu : IN STD_LOGIC_VECTOR (63 downto 0);
        Asa : IN STD_LOGIC_VECTOR (63 downto 0);
        Ase : IN STD_LOGIC_VECTOR (63 downto 0);
        Asi : IN STD_LOGIC_VECTOR (63 downto 0);
        Aso : IN STD_LOGIC_VECTOR (63 downto 0);
        Asu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Asu_1_out_ap_vld : OUT STD_LOGIC;
        Aba_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Aba_1_out_ap_vld : OUT STD_LOGIC;
        Abe_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Abe_1_out_ap_vld : OUT STD_LOGIC;
        Abi_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Abi_1_out_ap_vld : OUT STD_LOGIC;
        Abo_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Abo_1_out_ap_vld : OUT STD_LOGIC;
        Abu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Abu_1_out_ap_vld : OUT STD_LOGIC;
        Aga_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Aga_1_out_ap_vld : OUT STD_LOGIC;
        Age_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Age_1_out_ap_vld : OUT STD_LOGIC;
        Agi_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Agi_1_out_ap_vld : OUT STD_LOGIC;
        Ago_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ago_1_out_ap_vld : OUT STD_LOGIC;
        Agu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Agu_1_out_ap_vld : OUT STD_LOGIC;
        Aka_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Aka_1_out_ap_vld : OUT STD_LOGIC;
        Ake_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ake_1_out_ap_vld : OUT STD_LOGIC;
        Aki_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Aki_1_out_ap_vld : OUT STD_LOGIC;
        Ako_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ako_1_out_ap_vld : OUT STD_LOGIC;
        Aku_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Aku_1_out_ap_vld : OUT STD_LOGIC;
        Ama_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ama_1_out_ap_vld : OUT STD_LOGIC;
        Ame_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ame_1_out_ap_vld : OUT STD_LOGIC;
        Ami_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ami_1_out_ap_vld : OUT STD_LOGIC;
        Amo_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Amo_1_out_ap_vld : OUT STD_LOGIC;
        Amu_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Amu_1_out_ap_vld : OUT STD_LOGIC;
        Asa_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Asa_1_out_ap_vld : OUT STD_LOGIC;
        Ase_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Ase_1_out_ap_vld : OUT STD_LOGIC;
        Asi_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Asi_1_out_ap_vld : OUT STD_LOGIC;
        Aso_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        Aso_1_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390 : component sha3_256_hw_KeccakF1600_StatePermute_1_Pipeline_state_permute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_ready,
        Asu => Asu_reg_964,
        Aba => Aba_reg_703,
        Abe => Abe_reg_718,
        Abi => Abi_reg_723,
        Abo => Abo_reg_740,
        Abu => Abu_reg_745,
        Aga => Aga_reg_762,
        Age => Age_reg_767,
        Agi => Agi_reg_784,
        Ago => Ago_reg_789,
        Agu => Agu_reg_806,
        Aka => Aka_reg_811,
        Ake => Ake_reg_828,
        Aki => Aki_reg_833,
        Ako => Ako_reg_850,
        Aku => Aku_reg_855,
        Ama => Ama_reg_872,
        Ame => Ame_reg_877,
        Ami => Ami_reg_894,
        Amo => Amo_reg_899,
        Amu => Amu_reg_916,
        Asa => Asa_reg_921,
        Ase => Ase_reg_938,
        Asi => Asi_reg_943,
        Aso => Aso_reg_959,
        Asu_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asu_1_out,
        Asu_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asu_1_out_ap_vld,
        Aba_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aba_1_out,
        Aba_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aba_1_out_ap_vld,
        Abe_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abe_1_out,
        Abe_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abe_1_out_ap_vld,
        Abi_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abi_1_out,
        Abi_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abi_1_out_ap_vld,
        Abo_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abo_1_out,
        Abo_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abo_1_out_ap_vld,
        Abu_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abu_1_out,
        Abu_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abu_1_out_ap_vld,
        Aga_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aga_1_out,
        Aga_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aga_1_out_ap_vld,
        Age_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Age_1_out,
        Age_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Age_1_out_ap_vld,
        Agi_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agi_1_out,
        Agi_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agi_1_out_ap_vld,
        Ago_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ago_1_out,
        Ago_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ago_1_out_ap_vld,
        Agu_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agu_1_out,
        Agu_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agu_1_out_ap_vld,
        Aka_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aka_1_out,
        Aka_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aka_1_out_ap_vld,
        Ake_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ake_1_out,
        Ake_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ake_1_out_ap_vld,
        Aki_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aki_1_out,
        Aki_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aki_1_out_ap_vld,
        Ako_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ako_1_out,
        Ako_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ako_1_out_ap_vld,
        Aku_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aku_1_out,
        Aku_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aku_1_out_ap_vld,
        Ama_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ama_1_out,
        Ama_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ama_1_out_ap_vld,
        Ame_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ame_1_out,
        Ame_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ame_1_out_ap_vld,
        Ami_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ami_1_out,
        Ami_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ami_1_out_ap_vld,
        Amo_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amo_1_out,
        Amo_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amo_1_out_ap_vld,
        Amu_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amu_1_out,
        Amu_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amu_1_out_ap_vld,
        Asa_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asa_1_out,
        Asa_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asa_1_out_ap_vld,
        Ase_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ase_1_out,
        Ase_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ase_1_out_ap_vld,
        Asi_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asi_1_out,
        Asi_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asi_1_out_ap_vld,
        Aso_1_out => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aso_1_out,
        Aso_1_out_ap_vld => grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aso_1_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Aba_reg_703 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Abe_reg_718 <= state_q1;
                Abi_reg_723 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Abo_reg_740 <= state_q0;
                Abu_reg_745 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Aga_reg_762 <= state_q0;
                Age_reg_767 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Agi_reg_784 <= state_q0;
                Ago_reg_789 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Agu_reg_806 <= state_q0;
                Aka_reg_811 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Ake_reg_828 <= state_q0;
                Aki_reg_833 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Ako_reg_850 <= state_q0;
                Aku_reg_855 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Ama_reg_872 <= state_q0;
                Ame_reg_877 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Ami_reg_894 <= state_q0;
                Amo_reg_899 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Amu_reg_916 <= state_q0;
                Asa_reg_921 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Ase_reg_938 <= state_q0;
                Asi_reg_943 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                Aso_reg_959 <= state_q0;
                Asu_reg_964 <= state_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_done, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_ap_start_reg;
    state_addr_1_reg_708 <= ap_const_lv64_1(5 - 1 downto 0);
    state_addr_24_reg_954 <= ap_const_lv64_18(5 - 1 downto 0);
    state_addr_2_reg_713 <= ap_const_lv64_2(5 - 1 downto 0);
    state_addr_reg_698 <= ap_const_lv64_0(5 - 1 downto 0);
    state_address0 <= state_address0_local;

    state_address0_local_assign_proc : process(ap_CS_fsm_state1, state_addr_reg_698, ap_CS_fsm_state2, state_addr_2_reg_713, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_address0_local <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_address0_local <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_address0_local <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_address0_local <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_address0_local <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address0_local <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address0_local <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_address0_local <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address0_local <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address0_local <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address0_local <= state_addr_2_reg_713;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0_local <= state_addr_reg_698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0_local <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0_local <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0_local <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0_local <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0_local <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0_local <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0_local <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0_local <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0_local <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0_local <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0_local <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0_local <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0_local <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            state_address0_local <= "XXXXX";
        end if; 
    end process;

    state_address1 <= state_address1_local;

    state_address1_local_assign_proc : process(ap_CS_fsm_state2, state_addr_1_reg_708, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, state_addr_24_reg_954, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            state_address1_local <= state_addr_24_reg_954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_address1_local <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_address1_local <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_address1_local <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_address1_local <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_address1_local <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address1_local <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address1_local <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_address1_local <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address1_local <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address1_local <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address1_local <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address1_local <= state_addr_1_reg_708;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1_local <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1_local <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1_local <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1_local <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1_local <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1_local <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1_local <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1_local <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1_local <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1_local <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1_local <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1_local <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            state_address1_local <= "XXXXX";
        end if; 
    end process;

    state_ce0 <= state_ce0_local;

    state_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) 
    and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0_local <= ap_const_logic_1;
        else 
            state_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    state_ce1 <= state_ce1_local;

    state_ce1_local_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ce1_local <= ap_const_logic_1;
        else 
            state_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= state_d0_local;

    state_d0_local_assign_proc : process(grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aba_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abi_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abu_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Age_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ago_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aka_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aki_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aku_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ame_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amo_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asa_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asi_1_out, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asi_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asa_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amo_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ame_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aku_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aki_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aka_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ago_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Age_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abu_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abi_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d0_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aba_1_out;
        else 
            state_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    state_d1 <= state_d1_local;

    state_d1_local_assign_proc : process(grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asu_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abe_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abo_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aga_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agi_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agu_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ake_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ako_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ama_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ami_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amu_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ase_1_out, grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aso_1_out, ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Asu_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aso_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ase_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Amu_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ami_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ama_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ako_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Ake_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agu_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Agi_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Aga_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abo_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d1_local <= grp_KeccakF1600_StatePermute_1_Pipeline_state_permute_fu_390_Abe_1_out;
        else 
            state_d1_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    state_we0 <= state_we0_local;

    state_we0_local_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_we0_local <= ap_const_logic_1;
        else 
            state_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    state_we1 <= state_we1_local;

    state_we1_local_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            state_we1_local <= ap_const_logic_1;
        else 
            state_we1_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
