// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        h,
        in_r,
        inlen
);

parameter    ap_ST_fsm_state1 = 115'd1;
parameter    ap_ST_fsm_state2 = 115'd2;
parameter    ap_ST_fsm_state3 = 115'd4;
parameter    ap_ST_fsm_state4 = 115'd8;
parameter    ap_ST_fsm_state5 = 115'd16;
parameter    ap_ST_fsm_state6 = 115'd32;
parameter    ap_ST_fsm_state7 = 115'd64;
parameter    ap_ST_fsm_state8 = 115'd128;
parameter    ap_ST_fsm_state9 = 115'd256;
parameter    ap_ST_fsm_state10 = 115'd512;
parameter    ap_ST_fsm_state11 = 115'd1024;
parameter    ap_ST_fsm_state12 = 115'd2048;
parameter    ap_ST_fsm_state13 = 115'd4096;
parameter    ap_ST_fsm_state14 = 115'd8192;
parameter    ap_ST_fsm_state15 = 115'd16384;
parameter    ap_ST_fsm_state16 = 115'd32768;
parameter    ap_ST_fsm_state17 = 115'd65536;
parameter    ap_ST_fsm_state18 = 115'd131072;
parameter    ap_ST_fsm_state19 = 115'd262144;
parameter    ap_ST_fsm_state20 = 115'd524288;
parameter    ap_ST_fsm_state21 = 115'd1048576;
parameter    ap_ST_fsm_state22 = 115'd2097152;
parameter    ap_ST_fsm_state23 = 115'd4194304;
parameter    ap_ST_fsm_state24 = 115'd8388608;
parameter    ap_ST_fsm_state25 = 115'd16777216;
parameter    ap_ST_fsm_state26 = 115'd33554432;
parameter    ap_ST_fsm_state27 = 115'd67108864;
parameter    ap_ST_fsm_state28 = 115'd134217728;
parameter    ap_ST_fsm_state29 = 115'd268435456;
parameter    ap_ST_fsm_state30 = 115'd536870912;
parameter    ap_ST_fsm_state31 = 115'd1073741824;
parameter    ap_ST_fsm_state32 = 115'd2147483648;
parameter    ap_ST_fsm_state33 = 115'd4294967296;
parameter    ap_ST_fsm_state34 = 115'd8589934592;
parameter    ap_ST_fsm_state35 = 115'd17179869184;
parameter    ap_ST_fsm_state36 = 115'd34359738368;
parameter    ap_ST_fsm_state37 = 115'd68719476736;
parameter    ap_ST_fsm_state38 = 115'd137438953472;
parameter    ap_ST_fsm_state39 = 115'd274877906944;
parameter    ap_ST_fsm_state40 = 115'd549755813888;
parameter    ap_ST_fsm_state41 = 115'd1099511627776;
parameter    ap_ST_fsm_state42 = 115'd2199023255552;
parameter    ap_ST_fsm_state43 = 115'd4398046511104;
parameter    ap_ST_fsm_state44 = 115'd8796093022208;
parameter    ap_ST_fsm_state45 = 115'd17592186044416;
parameter    ap_ST_fsm_state46 = 115'd35184372088832;
parameter    ap_ST_fsm_state47 = 115'd70368744177664;
parameter    ap_ST_fsm_state48 = 115'd140737488355328;
parameter    ap_ST_fsm_state49 = 115'd281474976710656;
parameter    ap_ST_fsm_state50 = 115'd562949953421312;
parameter    ap_ST_fsm_state51 = 115'd1125899906842624;
parameter    ap_ST_fsm_state52 = 115'd2251799813685248;
parameter    ap_ST_fsm_state53 = 115'd4503599627370496;
parameter    ap_ST_fsm_state54 = 115'd9007199254740992;
parameter    ap_ST_fsm_state55 = 115'd18014398509481984;
parameter    ap_ST_fsm_state56 = 115'd36028797018963968;
parameter    ap_ST_fsm_state57 = 115'd72057594037927936;
parameter    ap_ST_fsm_state58 = 115'd144115188075855872;
parameter    ap_ST_fsm_state59 = 115'd288230376151711744;
parameter    ap_ST_fsm_state60 = 115'd576460752303423488;
parameter    ap_ST_fsm_state61 = 115'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 115'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 115'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 115'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 115'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 115'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 115'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 115'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 115'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 115'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 115'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 115'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 115'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 115'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 115'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 115'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 115'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 115'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 115'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 115'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 115'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 115'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 115'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 115'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 115'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 115'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 115'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 115'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 115'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 115'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 115'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 115'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 115'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 115'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 115'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 115'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 115'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 115'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 115'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 115'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 115'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 115'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 115'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 115'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 115'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 115'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 115'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 115'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 115'd324518553658426726783156020576256;
parameter    ap_ST_fsm_pp0_stage0 = 115'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state114 = 115'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state115 = 115'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state116 = 115'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state117 = 115'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state118 = 115'd20769187434139310514121985316880384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [7:0] m_axi_gmem_0_WDATA;
output  [0:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [7:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [10:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [63:0] h;
input  [63:0] in_r;
input  [31:0] inlen;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_0_AWVALID;
reg m_axi_gmem_0_WVALID;
reg m_axi_gmem_0_ARVALID;
reg[63:0] m_axi_gmem_0_ARADDR;
reg[31:0] m_axi_gmem_0_ARLEN;
reg m_axi_gmem_0_RREADY;
reg m_axi_gmem_0_BREADY;

(* fsm_encoding = "none" *) reg   [114:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state72;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state100;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state103;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state118;
wire   [7:0] empty_fu_282_p1;
reg   [7:0] empty_reg_742;
wire   [0:0] empty_27_fu_286_p2;
reg   [0:0] empty_27_reg_747;
wire  signed [31:0] select_ln480_fu_302_p3;
reg  signed [31:0] select_ln480_reg_752;
wire    ap_CS_fsm_state2;
wire   [7:0] trunc_ln480_fu_312_p1;
reg   [7:0] trunc_ln480_reg_762;
wire   [32:0] grp_fu_316_p2;
reg   [32:0] urem_ln480_reg_767;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire  signed [63:0] sext_ln471_fu_337_p1;
reg  signed [63:0] sext_ln471_reg_789;
wire  signed [33:0] sub_ln471_fu_345_p2;
reg  signed [33:0] sub_ln471_reg_794;
wire  signed [63:0] sext_ln471_2_fu_351_p1;
reg  signed [63:0] sext_ln471_2_reg_799;
reg   [63:0] gmem_addr_reg_807;
wire    ap_CS_fsm_state71;
reg   [63:0] gmem_addr_1_reg_820;
wire   [7:0] i_2_fu_423_p2;
reg   [7:0] i_2_reg_826;
reg   [7:0] gmem_addr_read_reg_832;
reg   [7:0] gmem_addr_read_1_reg_837;
reg   [7:0] gmem_addr_read_2_reg_842;
reg   [7:0] gmem_addr_read_3_reg_847;
reg   [7:0] gmem_addr_read_4_reg_852;
reg   [7:0] gmem_addr_read_5_reg_857;
reg   [7:0] gmem_addr_read_6_reg_862;
reg   [7:0] gmem_addr_read_7_reg_867;
reg   [63:0] s_load_reg_872;
wire   [2:0] trunc_ln493_fu_470_p1;
reg   [2:0] trunc_ln493_reg_880;
wire    ap_CS_fsm_state99;
reg   [4:0] lshr_ln_reg_885;
wire   [2:0] trunc_ln495_fu_489_p1;
reg   [2:0] trunc_ln495_reg_917;
reg   [4:0] s_addr_2_reg_922;
reg   [63:0] gmem_addr_2_reg_927;
reg   [7:0] gmem_addr_1_read_reg_933;
reg   [4:0] s_addr_1_reg_938;
wire   [63:0] xor_ln493_fu_550_p2;
reg   [63:0] xor_ln493_reg_943;
wire    ap_CS_fsm_state101;
wire   [63:0] xor_ln495_fu_577_p2;
reg   [63:0] xor_ln495_reg_948;
wire   [4:0] s_addr_3_reg_953;
wire    ap_CS_fsm_state105;
reg   [0:0] bit_sel_reg_958;
wire    ap_CS_fsm_state106;
wire   [62:0] trunc_ln496_fu_591_p1;
reg   [62:0] trunc_ln496_reg_963;
wire   [0:0] first_iter_0_fu_657_p2;
reg   [0:0] first_iter_0_reg_971;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln47_fu_668_p1;
reg   [2:0] trunc_ln47_reg_980;
reg   [2:0] trunc_ln47_reg_980_pp0_iter1_reg;
wire   [7:0] trunc_ln47_1_fu_718_p1;
reg   [7:0] trunc_ln47_1_reg_985;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state109;
wire    grp_KeccakF1600_StatePermute_1_fu_271_ap_done;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln764_fu_611_p2;
reg    ap_condition_pp0_exit_iter0_state110;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] s_address0;
reg    s_ce0;
reg    s_we0;
reg   [63:0] s_d0;
wire   [63:0] s_q0;
reg   [4:0] s_address1;
reg    s_ce1;
reg    s_we1;
reg   [63:0] s_d1;
wire   [63:0] s_q1;
wire    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start;
wire    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done;
wire    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_idle;
wire    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_ready;
wire   [4:0] grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0;
wire    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0;
wire    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0;
wire   [63:0] grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0;
wire    grp_KeccakF1600_StatePermute_fu_264_ap_start;
wire    grp_KeccakF1600_StatePermute_fu_264_ap_done;
wire    grp_KeccakF1600_StatePermute_fu_264_ap_idle;
wire    grp_KeccakF1600_StatePermute_fu_264_ap_ready;
wire   [4:0] grp_KeccakF1600_StatePermute_fu_264_state_address0;
wire    grp_KeccakF1600_StatePermute_fu_264_state_ce0;
wire    grp_KeccakF1600_StatePermute_fu_264_state_we0;
wire   [63:0] grp_KeccakF1600_StatePermute_fu_264_state_d0;
wire   [4:0] grp_KeccakF1600_StatePermute_fu_264_state_address1;
wire    grp_KeccakF1600_StatePermute_fu_264_state_ce1;
wire    grp_KeccakF1600_StatePermute_fu_264_state_we1;
wire   [63:0] grp_KeccakF1600_StatePermute_fu_264_state_d1;
wire    grp_KeccakF1600_StatePermute_1_fu_271_ap_start;
wire    grp_KeccakF1600_StatePermute_1_fu_271_ap_idle;
wire    grp_KeccakF1600_StatePermute_1_fu_271_ap_ready;
wire   [4:0] grp_KeccakF1600_StatePermute_1_fu_271_state_address0;
wire    grp_KeccakF1600_StatePermute_1_fu_271_state_ce0;
wire    grp_KeccakF1600_StatePermute_1_fu_271_state_we0;
wire   [63:0] grp_KeccakF1600_StatePermute_1_fu_271_state_d0;
wire   [4:0] grp_KeccakF1600_StatePermute_1_fu_271_state_address1;
wire    grp_KeccakF1600_StatePermute_1_fu_271_state_ce1;
wire    grp_KeccakF1600_StatePermute_1_fu_271_state_we1;
wire   [63:0] grp_KeccakF1600_StatePermute_1_fu_271_state_d1;
reg    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg;
wire    s_we0_out;
reg    grp_KeccakF1600_StatePermute_fu_264_ap_start_reg;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
reg    grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg;
wire    ap_CS_fsm_state108;
wire   [63:0] zext_ln495_1_fu_501_p1;
wire   [0:0] icmp_ln490_fu_459_p2;
wire   [63:0] zext_ln493_2_fu_526_p1;
wire   [63:0] zext_ln764_fu_663_p1;
wire   [63:0] add_ln484_1_fu_373_p2;
wire   [0:0] icmp_ln480_fu_358_p2;
wire   [63:0] add_ln490_fu_406_p2;
wire    ap_block_pp0_stage0_01001;
reg   [63:0] idx_fu_128;
wire   [63:0] add_ln480_fu_390_p2;
reg   [63:0] inlen_assign_1_fu_132;
wire   [63:0] add_ln486_fu_384_p2;
wire  signed [63:0] inlen_cast7_fu_278_p1;
reg   [31:0] i_fu_140;
wire   [31:0] i_6_fu_464_p2;
reg   [3:0] i_5_fu_144;
wire   [3:0] add_ln44_fu_672_p2;
reg   [2:0] i_4_fu_148;
wire   [2:0] select_ln764_fu_649_p3;
reg   [5:0] indvar_flatten_fu_152;
wire   [5:0] add_ln764_fu_617_p2;
reg   [63:0] u_assign1_fu_156;
reg    s_ce0_local;
reg   [4:0] s_address0_local;
reg    s_we0_local;
wire    ap_CS_fsm_state88;
reg   [63:0] s_d0_local;
wire   [63:0] xor_ln484_fu_446_p2;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state107;
wire   [63:0] xor_ln_fu_600_p3;
wire  signed [31:0] inlen_cast7_fu_278_p0;
wire  signed [31:0] empty_fu_282_p0;
wire  signed [31:0] empty_27_fu_286_p0;
wire  signed [31:0] select_ln480_fu_302_p2;
wire  signed [63:0] grp_fu_316_p0;
wire   [8:0] grp_fu_316_p1;
wire  signed [31:0] inlen_cast1_fu_322_p0;
wire  signed [32:0] sext_ln480_1_fu_325_p1;
wire   [32:0] trunc_ln480_1_fu_328_p1;
wire  signed [32:0] sub_ln480_fu_331_p2;
wire  signed [33:0] inlen_cast1_fu_322_p1;
wire  signed [33:0] sext_ln471_1_fu_341_p1;
wire   [63:0] add_ln484_fu_367_p2;
wire   [7:0] sub_ln490_fu_416_p2;
wire   [7:0] trunc_ln490_fu_420_p1;
wire   [63:0] or_ln484_6_fu_434_p9;
wire   [33:0] zext_ln490_fu_455_p1;
wire   [4:0] lshr_ln1_fu_492_p4;
wire   [5:0] shl_ln_fu_533_p3;
wire   [63:0] zext_ln493_fu_530_p1;
wire   [63:0] zext_ln493_1_fu_540_p1;
wire   [63:0] shl_ln493_fu_544_p2;
wire   [5:0] shl_ln1_fu_556_p3;
wire   [58:0] zext_ln495_fu_563_p1;
wire   [58:0] shl_ln495_fu_567_p2;
wire   [63:0] zext_ln495_2_fu_573_p1;
wire   [0:0] xor_ln496_fu_595_p2;
wire   [0:0] icmp_ln44_fu_629_p2;
wire   [2:0] add_ln764_1_fu_643_p2;
wire   [3:0] select_ln765_fu_635_p3;
wire   [5:0] shl_ln2_fu_701_p3;
wire   [63:0] zext_ln47_fu_708_p1;
wire   [63:0] lshr_ln47_fu_712_p2;
reg    grp_fu_316_ap_start;
wire    grp_fu_316_ap_done;
reg    grp_fu_316_ce;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state117;
reg   [114:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
reg    ap_ST_fsm_state80_blk;
reg    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
reg    ap_ST_fsm_state83_blk;
reg    ap_ST_fsm_state84_blk;
reg    ap_ST_fsm_state85_blk;
reg    ap_ST_fsm_state86_blk;
reg    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
reg    ap_ST_fsm_state90_blk;
reg    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
reg    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
reg    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
reg    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
reg    ap_ST_fsm_state118_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 115'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg = 1'b0;
#0 grp_KeccakF1600_StatePermute_fu_264_ap_start_reg = 1'b0;
#0 grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg = 1'b0;
#0 idx_fu_128 = 64'd0;
#0 inlen_assign_1_fu_132 = 64'd0;
#0 i_fu_140 = 32'd0;
#0 i_5_fu_144 = 4'd0;
#0 i_4_fu_148 = 3'd0;
#0 indvar_flatten_fu_152 = 6'd0;
#0 u_assign1_fu_156 = 64'd0;
end

sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1_s_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(s_address0),
    .ce0(s_ce0),
    .we0(s_we0),
    .d0(s_d0),
    .q0(s_q0),
    .address1(s_address1),
    .ce1(s_ce1),
    .we1(s_we1),
    .d1(s_d1),
    .q1(s_q1)
);

sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1 grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start),
    .ap_done(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done),
    .ap_idle(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_idle),
    .ap_ready(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_ready),
    .s_address0(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0),
    .s_ce0(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0),
    .s_we0(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0),
    .s_d0(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0)
);

sha3_256_hw_KeccakF1600_StatePermute grp_KeccakF1600_StatePermute_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePermute_fu_264_ap_start),
    .ap_done(grp_KeccakF1600_StatePermute_fu_264_ap_done),
    .ap_idle(grp_KeccakF1600_StatePermute_fu_264_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePermute_fu_264_ap_ready),
    .state_address0(grp_KeccakF1600_StatePermute_fu_264_state_address0),
    .state_ce0(grp_KeccakF1600_StatePermute_fu_264_state_ce0),
    .state_we0(grp_KeccakF1600_StatePermute_fu_264_state_we0),
    .state_d0(grp_KeccakF1600_StatePermute_fu_264_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePermute_fu_264_state_address1),
    .state_ce1(grp_KeccakF1600_StatePermute_fu_264_state_ce1),
    .state_we1(grp_KeccakF1600_StatePermute_fu_264_state_we1),
    .state_d1(grp_KeccakF1600_StatePermute_fu_264_state_d1),
    .state_q1(s_q1)
);

sha3_256_hw_KeccakF1600_StatePermute_1 grp_KeccakF1600_StatePermute_1_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePermute_1_fu_271_ap_start),
    .ap_done(grp_KeccakF1600_StatePermute_1_fu_271_ap_done),
    .ap_idle(grp_KeccakF1600_StatePermute_1_fu_271_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePermute_1_fu_271_ap_ready),
    .state_address0(grp_KeccakF1600_StatePermute_1_fu_271_state_address0),
    .state_ce0(grp_KeccakF1600_StatePermute_1_fu_271_state_ce0),
    .state_we0(grp_KeccakF1600_StatePermute_1_fu_271_state_we0),
    .state_d0(grp_KeccakF1600_StatePermute_1_fu_271_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePermute_1_fu_271_state_address1),
    .state_ce1(grp_KeccakF1600_StatePermute_1_fu_271_state_ce1),
    .state_we1(grp_KeccakF1600_StatePermute_1_fu_271_state_we1),
    .state_d1(grp_KeccakF1600_StatePermute_1_fu_271_state_d1),
    .state_q1(s_q1)
);

sha3_256_hw_urem_64s_9ns_33_68_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 33 ))
urem_64s_9ns_33_68_seq_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_316_ap_start),
    .done(grp_fu_316_ap_done),
    .din0(grp_fu_316_p0),
    .din1(grp_fu_316_p1),
    .ce(grp_fu_316_ce),
    .dout(grp_fu_316_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state110) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_KeccakF1600_StatePermute_1_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state110)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state110);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((grp_KeccakF1600_StatePermute_1_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state108)) begin
            grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePermute_1_fu_271_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePermute_fu_264_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state89)) begin
            grp_KeccakF1600_StatePermute_fu_264_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePermute_fu_264_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePermute_fu_264_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg <= 1'b1;
        end else if ((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_ready == 1'b1)) begin
            grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
        i_4_fu_148 <= 3'd0;
    end else if (((icmp_ln764_fu_611_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_4_fu_148 <= select_ln764_fu_649_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
        i_5_fu_144 <= 4'd0;
    end else if (((icmp_ln764_fu_611_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_5_fu_144 <= add_ln44_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln480_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
        i_fu_140 <= 32'd0;
    end else if (((icmp_ln490_fu_459_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state99))) begin
        i_fu_140 <= i_6_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_fu_128 <= 64'd0;
    end else if (((icmp_ln480_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        idx_fu_128 <= add_ln480_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
        indvar_flatten_fu_152 <= 6'd0;
    end else if (((icmp_ln764_fu_611_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_152 <= add_ln764_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inlen_assign_1_fu_132 <= inlen_cast7_fu_278_p1;
    end else if (((icmp_ln480_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        inlen_assign_1_fu_132 <= add_ln486_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        bit_sel_reg_958 <= s_q0[64'd63];
        trunc_ln496_reg_963 <= trunc_ln496_fu_591_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_27_reg_747 <= empty_27_fu_286_p2;
        empty_reg_742 <= empty_fu_282_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_971 <= first_iter_0_fu_657_p2;
        trunc_ln47_reg_980 <= trunc_ln47_fu_668_p1;
        trunc_ln47_reg_980_pp0_iter1_reg <= trunc_ln47_reg_980;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        gmem_addr_1_read_reg_933 <= m_axi_gmem_0_RDATA;
        s_addr_1_reg_938 <= zext_ln493_2_fu_526_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_addr_1_reg_820 <= add_ln490_fu_406_p2;
        gmem_addr_reg_807 <= add_ln484_1_fu_373_p2;
        i_2_reg_826 <= i_2_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        gmem_addr_2_reg_927 <= h;
        lshr_ln_reg_885 <= {{i_fu_140[7:3]}};
        s_addr_2_reg_922 <= zext_ln495_1_fu_501_p1;
        trunc_ln493_reg_880 <= trunc_ln493_fu_470_p1;
        trunc_ln495_reg_917 <= trunc_ln495_fu_489_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        gmem_addr_read_1_reg_837 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        gmem_addr_read_2_reg_842 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        gmem_addr_read_3_reg_847 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        gmem_addr_read_4_reg_852 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        gmem_addr_read_5_reg_857 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        gmem_addr_read_6_reg_862 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        gmem_addr_read_7_reg_867 <= m_axi_gmem_0_RDATA;
        s_load_reg_872 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        gmem_addr_read_reg_832 <= m_axi_gmem_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln480_reg_752 <= select_ln480_fu_302_p3;
        trunc_ln480_reg_762 <= trunc_ln480_fu_312_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        sext_ln471_2_reg_799 <= sext_ln471_2_fu_351_p1;
        sext_ln471_reg_789 <= sext_ln471_fu_337_p1;
        sub_ln471_reg_794 <= sub_ln471_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        trunc_ln47_1_reg_985 <= trunc_ln47_1_fu_718_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (first_iter_0_reg_971 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        u_assign1_fu_156 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        urem_ln480_reg_767 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        xor_ln493_reg_943 <= xor_ln493_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        xor_ln495_reg_948 <= xor_ln495_fu_577_p2;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state100_blk = 1'b1;
    end else begin
        ap_ST_fsm_state100_blk = 1'b0;
    end
end

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state103_blk = 1'b1;
    end else begin
        ap_ST_fsm_state103_blk = 1'b0;
    end
end

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

always @ (*) begin
    if ((grp_KeccakF1600_StatePermute_1_fu_271_ap_done == 1'b0)) begin
        ap_ST_fsm_state109_blk = 1'b1;
    end else begin
        ap_ST_fsm_state109_blk = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state118_blk = 1'b1;
    end else begin
        ap_ST_fsm_state118_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state81_blk = 1'b1;
    end else begin
        ap_ST_fsm_state81_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state83_blk = 1'b1;
    end else begin
        ap_ST_fsm_state83_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state84_blk = 1'b1;
    end else begin
        ap_ST_fsm_state84_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state85_blk = 1'b1;
    end else begin
        ap_ST_fsm_state85_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state86_blk = 1'b1;
    end else begin
        ap_ST_fsm_state86_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state87_blk = 1'b1;
    end else begin
        ap_ST_fsm_state87_blk = 1'b0;
    end
end

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_KeccakF1600_StatePermute_fu_264_ap_done == 1'b0)) begin
        ap_ST_fsm_state90_blk = 1'b1;
    end else begin
        ap_ST_fsm_state90_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state91_blk = 1'b1;
    end else begin
        ap_ST_fsm_state91_blk = 1'b0;
    end
end

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln764_fu_611_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state110 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state110 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state118) & (m_axi_gmem_0_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) & (m_axi_gmem_0_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state72))) begin
        gmem_blk_n_AR = m_axi_gmem_0_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        gmem_blk_n_AW = m_axi_gmem_0_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        gmem_blk_n_B = m_axi_gmem_0_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_0_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_316_ap_start = 1'b1;
    end else begin
        grp_fu_316_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state98) 
    | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        grp_fu_316_ce = 1'b0;
    end else begin
        grp_fu_316_ce = 1'b1;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state91)) begin
            m_axi_gmem_0_ARADDR = gmem_addr_1_reg_820;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            m_axi_gmem_0_ARADDR = gmem_addr_reg_807;
        end else begin
            m_axi_gmem_0_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_gmem_0_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state91)) begin
            m_axi_gmem_0_ARLEN = sext_ln471_2_reg_799;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            m_axi_gmem_0_ARLEN = 64'd8;
        end else begin
            m_axi_gmem_0_ARLEN = 'bx;
        end
    end else begin
        m_axi_gmem_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state91) & (m_axi_gmem_0_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_0_ARREADY == 1'b1)))) begin
        m_axi_gmem_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) & (m_axi_gmem_0_AWREADY == 1'b1))) begin
        m_axi_gmem_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) & (m_axi_gmem_0_BVALID == 1'b1))) begin
        m_axi_gmem_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state100) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state87) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state86) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state85) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state84) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state83) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state82) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state81) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_0_RVALID == 1'b1)))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_gmem_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_address0 = grp_KeccakF1600_StatePermute_1_fu_271_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_address0 = grp_KeccakF1600_StatePermute_fu_264_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0;
    end else begin
        s_address0 = s_address0_local;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_address0_local = zext_ln764_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        s_address0_local = s_addr_3_reg_953;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        s_address0_local = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        s_address0_local = s_addr_2_reg_922;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        s_address0_local = s_addr_1_reg_938;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        s_address0_local = zext_ln493_2_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        s_address0_local = zext_ln495_1_fu_501_p1;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86))) begin
        s_address0_local = 64'd25;
    end else begin
        s_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_address1 = grp_KeccakF1600_StatePermute_1_fu_271_state_address1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_address1 = grp_KeccakF1600_StatePermute_fu_264_state_address1;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_ce0 = grp_KeccakF1600_StatePermute_1_fu_271_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_ce0 = grp_KeccakF1600_StatePermute_fu_264_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_ce0 = grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0;
    end else begin
        s_ce0 = s_ce0_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state99) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_state100) & (m_axi_gmem_0_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state86) & (m_axi_gmem_0_RVALID == 1'b1)))) begin
        s_ce0_local = 1'b1;
    end else begin
        s_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_ce1 = grp_KeccakF1600_StatePermute_1_fu_271_state_ce1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_ce1 = grp_KeccakF1600_StatePermute_fu_264_state_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_d0 = grp_KeccakF1600_StatePermute_1_fu_271_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_d0 = grp_KeccakF1600_StatePermute_fu_264_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_d0 = grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0;
    end else begin
        s_d0 = s_d0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        s_d0_local = xor_ln_fu_600_p3;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        s_d0_local = xor_ln495_reg_948;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        s_d0_local = xor_ln493_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        s_d0_local = xor_ln484_fu_446_p2;
    end else begin
        s_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_d1 = grp_KeccakF1600_StatePermute_1_fu_271_state_d1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_d1 = grp_KeccakF1600_StatePermute_fu_264_state_d1;
    end else begin
        s_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_we0 = grp_KeccakF1600_StatePermute_1_fu_271_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_we0 = grp_KeccakF1600_StatePermute_fu_264_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_we0 = grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0;
    end else begin
        s_we0 = (s_we0_out | 1'b0);
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state88))) begin
        s_we0_local = 1'b1;
    end else begin
        s_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        s_we1 = grp_KeccakF1600_StatePermute_1_fu_271_state_we1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        s_we1 = grp_KeccakF1600_StatePermute_fu_264_state_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((icmp_ln480_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_0_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((1'b1 == ap_CS_fsm_state80) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((1'b1 == ap_CS_fsm_state81) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((1'b1 == ap_CS_fsm_state83) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((1'b1 == ap_CS_fsm_state85) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((1'b1 == ap_CS_fsm_state86) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((1'b1 == ap_CS_fsm_state87) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((grp_KeccakF1600_StatePermute_fu_264_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            if (((1'b1 == ap_CS_fsm_state91) & (m_axi_gmem_0_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if (((icmp_ln490_fu_459_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state100 : begin
            if (((1'b1 == ap_CS_fsm_state100) & (m_axi_gmem_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state103 : begin
            if (((1'b1 == ap_CS_fsm_state103) & (m_axi_gmem_0_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            if (((grp_KeccakF1600_StatePermute_1_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln764_fu_611_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln764_fu_611_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            if (((1'b1 == ap_CS_fsm_state118) & (m_axi_gmem_0_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_672_p2 = (select_ln765_fu_635_p3 + 4'd1);

assign add_ln480_fu_390_p2 = (idx_fu_128 + 64'd136);

assign add_ln484_1_fu_373_p2 = (add_ln484_fu_367_p2 + in_r);

assign add_ln484_fu_367_p2 = (idx_fu_128 + 64'd200);

assign add_ln486_fu_384_p2 = ($signed(inlen_assign_1_fu_132) + $signed(64'd18446744073709551480));

assign add_ln490_fu_406_p2 = ($signed(sext_ln471_reg_789) + $signed(in_r));

assign add_ln764_1_fu_643_p2 = (i_4_fu_148 + 3'd1);

assign add_ln764_fu_617_p2 = (indvar_flatten_fu_152 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_gmem_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_gmem_0_WREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_27_fu_286_p0 = inlen;

assign empty_27_fu_286_p2 = ((empty_27_fu_286_p0 < 32'd135) ? 1'b1 : 1'b0);

assign empty_fu_282_p0 = inlen;

assign empty_fu_282_p1 = empty_fu_282_p0[7:0];

assign first_iter_0_fu_657_p2 = ((select_ln765_fu_635_p3 == 4'd0) ? 1'b1 : 1'b0);

assign grp_KeccakF1600_StatePermute_1_fu_271_ap_start = grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg;

assign grp_KeccakF1600_StatePermute_fu_264_ap_start = grp_KeccakF1600_StatePermute_fu_264_ap_start_reg;

assign grp_fu_316_p0 = select_ln480_fu_302_p3;

assign grp_fu_316_p1 = 64'd136;

assign grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start = grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg;

assign i_2_fu_423_p2 = (sub_ln490_fu_416_p2 + trunc_ln490_fu_420_p1);

assign i_6_fu_464_p2 = (i_fu_140 + 32'd1);

assign icmp_ln44_fu_629_p2 = ((i_5_fu_144 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln480_fu_358_p2 = ((inlen_assign_1_fu_132 > 64'd135) ? 1'b1 : 1'b0);

assign icmp_ln490_fu_459_p2 = ((sub_ln471_reg_794 > zext_ln490_fu_455_p1) ? 1'b1 : 1'b0);

assign icmp_ln764_fu_611_p2 = ((indvar_flatten_fu_152 == 6'd32) ? 1'b1 : 1'b0);

assign inlen_cast1_fu_322_p0 = inlen;

assign inlen_cast1_fu_322_p1 = inlen_cast1_fu_322_p0;

assign inlen_cast7_fu_278_p0 = inlen;

assign inlen_cast7_fu_278_p1 = inlen_cast7_fu_278_p0;

assign lshr_ln1_fu_492_p4 = {{i_2_reg_826[7:3]}};

assign lshr_ln47_fu_712_p2 = u_assign1_fu_156 >> zext_ln47_fu_708_p1;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_AWADDR = gmem_addr_2_reg_927;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 64'd32;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_WDATA = trunc_ln47_1_reg_985;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 1'd1;

assign m_axi_gmem_0_WUSER = 1'd0;

assign or_ln484_6_fu_434_p9 = {{{{{{{{gmem_addr_read_7_reg_867}, {gmem_addr_read_6_reg_862}}, {gmem_addr_read_5_reg_857}}, {gmem_addr_read_4_reg_852}}, {gmem_addr_read_3_reg_847}}, {gmem_addr_read_2_reg_842}}, {gmem_addr_read_1_reg_837}}, {gmem_addr_read_reg_832}};

assign s_addr_3_reg_953 = 64'd16;

assign s_we0_out = s_we0_local;

assign select_ln480_fu_302_p2 = inlen;

assign select_ln480_fu_302_p3 = ((empty_27_reg_747[0:0] == 1'b1) ? 32'd135 : select_ln480_fu_302_p2);

assign select_ln764_fu_649_p3 = ((icmp_ln44_fu_629_p2[0:0] == 1'b1) ? add_ln764_1_fu_643_p2 : i_4_fu_148);

assign select_ln765_fu_635_p3 = ((icmp_ln44_fu_629_p2[0:0] == 1'b1) ? 4'd0 : i_5_fu_144);

assign sext_ln471_1_fu_341_p1 = sub_ln480_fu_331_p2;

assign sext_ln471_2_fu_351_p1 = sub_ln471_fu_345_p2;

assign sext_ln471_fu_337_p1 = sub_ln480_fu_331_p2;

assign sext_ln480_1_fu_325_p1 = select_ln480_reg_752;

assign shl_ln1_fu_556_p3 = {{trunc_ln495_reg_917}, {3'd0}};

assign shl_ln2_fu_701_p3 = {{trunc_ln47_reg_980_pp0_iter1_reg}, {3'd0}};

assign shl_ln493_fu_544_p2 = zext_ln493_fu_530_p1 << zext_ln493_1_fu_540_p1;

assign shl_ln495_fu_567_p2 = 59'd6 << zext_ln495_fu_563_p1;

assign shl_ln_fu_533_p3 = {{trunc_ln493_reg_880}, {3'd0}};

assign sub_ln471_fu_345_p2 = ($signed(inlen_cast1_fu_322_p1) - $signed(sext_ln471_1_fu_341_p1));

assign sub_ln480_fu_331_p2 = ($signed(sext_ln480_1_fu_325_p1) - $signed(trunc_ln480_1_fu_328_p1));

assign sub_ln490_fu_416_p2 = (empty_reg_742 - trunc_ln480_reg_762);

assign trunc_ln47_1_fu_718_p1 = lshr_ln47_fu_712_p2[7:0];

assign trunc_ln47_fu_668_p1 = select_ln765_fu_635_p3[2:0];

assign trunc_ln480_1_fu_328_p1 = urem_ln480_reg_767[32:0];

assign trunc_ln480_fu_312_p1 = select_ln480_fu_302_p3[7:0];

assign trunc_ln490_fu_420_p1 = urem_ln480_reg_767[7:0];

assign trunc_ln493_fu_470_p1 = i_fu_140[2:0];

assign trunc_ln495_fu_489_p1 = i_2_reg_826[2:0];

assign trunc_ln496_fu_591_p1 = s_q0[62:0];

assign xor_ln484_fu_446_p2 = (s_load_reg_872 ^ or_ln484_6_fu_434_p9);

assign xor_ln493_fu_550_p2 = (shl_ln493_fu_544_p2 ^ s_q0);

assign xor_ln495_fu_577_p2 = (zext_ln495_2_fu_573_p1 ^ s_q0);

assign xor_ln496_fu_595_p2 = (bit_sel_reg_958 ^ 1'd1);

assign xor_ln_fu_600_p3 = {{xor_ln496_fu_595_p2}, {trunc_ln496_reg_963}};

assign zext_ln47_fu_708_p1 = shl_ln2_fu_701_p3;

assign zext_ln490_fu_455_p1 = i_fu_140;

assign zext_ln493_1_fu_540_p1 = shl_ln_fu_533_p3;

assign zext_ln493_2_fu_526_p1 = lshr_ln_reg_885;

assign zext_ln493_fu_530_p1 = gmem_addr_1_read_reg_933;

assign zext_ln495_1_fu_501_p1 = lshr_ln1_fu_492_p4;

assign zext_ln495_2_fu_573_p1 = shl_ln495_fu_567_p2;

assign zext_ln495_fu_563_p1 = shl_ln1_fu_556_p3;

assign zext_ln764_fu_663_p1 = select_ln764_fu_649_p3;

endmodule //sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1
