-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    h : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    inlen : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (114 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (114 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (114 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (114 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (114 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (114 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (114 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (114 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (114 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (114 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv64_C8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011001000";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv59_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal empty_fu_282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_27_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln480_fu_302_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln480_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln480_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln480_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal urem_ln480_reg_767 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal sext_ln471_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln471_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln471_fu_345_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln471_reg_794 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln471_2_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln471_2_reg_799 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_807 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal gmem_addr_1_reg_820 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_826 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_reg_832 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_1_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_2_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_3_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_4_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_5_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_6_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_7_reg_867 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_load_reg_872 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln493_fu_470_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln493_reg_880 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal lshr_ln_reg_885 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln495_fu_489_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln495_reg_917 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_2_reg_922 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_2_reg_927 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_read_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_addr_1_reg_938 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln493_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln493_reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal xor_ln495_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln495_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_addr_3_reg_953 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal bit_sel_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal trunc_ln496_fu_591_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln496_reg_963 : STD_LOGIC_VECTOR (62 downto 0);
    signal first_iter_0_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln47_fu_668_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_reg_980 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_reg_980_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln47_1_fu_718_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_1_reg_985 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal grp_KeccakF1600_StatePermute_1_fu_271_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln764_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_pp0_exit_iter0_state110 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start : STD_LOGIC;
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done : STD_LOGIC;
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_idle : STD_LOGIC;
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_ready : STD_LOGIC;
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0 : STD_LOGIC;
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0 : STD_LOGIC;
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_264_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_264_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_264_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_264_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_fu_271_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_1_fu_271_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal s_we0_out : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_264_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal zext_ln495_1_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln490_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln493_2_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln764_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln484_1_fu_373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln480_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln490_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal idx_fu_128 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln480_fu_390_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_assign_1_fu_132 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln486_fu_384_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_cast7_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_6_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_144 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln44_fu_672_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_148 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln764_fu_649_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_152 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln764_fu_617_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal u_assign1_fu_156 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_ce0_local : STD_LOGIC;
    signal s_address0_local : STD_LOGIC_VECTOR (4 downto 0);
    signal s_we0_local : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal s_d0_local : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln484_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal xor_ln_fu_600_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_cast7_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln480_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal inlen_cast1_fu_322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln480_1_fu_325_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln480_1_fu_328_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln480_fu_331_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal inlen_cast1_fu_322_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln471_1_fu_341_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln484_fu_367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln490_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln490_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln484_6_fu_434_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln490_fu_455_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln1_fu_492_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_533_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln493_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln493_1_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln493_fu_544_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_556_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln495_fu_563_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln495_fu_567_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln495_2_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln496_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln764_1_fu_643_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln765_fu_635_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_701_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln47_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln47_fu_712_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_316_ap_start : STD_LOGIC;
    signal grp_fu_316_ap_done : STD_LOGIC;
    signal grp_fu_316_ce : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (114 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_KeccakF1600_StatePermute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_KeccakF1600_StatePermute_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_urem_64s_9ns_33_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1_s_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    s_U : component sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1_s_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => s_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => s_d1,
        q1 => s_q1);

    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258 : component sha3_256_hw_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start,
        ap_done => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done,
        ap_idle => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_idle,
        ap_ready => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_ready,
        s_address0 => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0,
        s_ce0 => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0,
        s_we0 => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0,
        s_d0 => grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0);

    grp_KeccakF1600_StatePermute_fu_264 : component sha3_256_hw_KeccakF1600_StatePermute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_fu_264_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_fu_264_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_fu_264_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_fu_264_ap_ready,
        state_address0 => grp_KeccakF1600_StatePermute_fu_264_state_address0,
        state_ce0 => grp_KeccakF1600_StatePermute_fu_264_state_ce0,
        state_we0 => grp_KeccakF1600_StatePermute_fu_264_state_we0,
        state_d0 => grp_KeccakF1600_StatePermute_fu_264_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePermute_fu_264_state_address1,
        state_ce1 => grp_KeccakF1600_StatePermute_fu_264_state_ce1,
        state_we1 => grp_KeccakF1600_StatePermute_fu_264_state_we1,
        state_d1 => grp_KeccakF1600_StatePermute_fu_264_state_d1,
        state_q1 => s_q1);

    grp_KeccakF1600_StatePermute_1_fu_271 : component sha3_256_hw_KeccakF1600_StatePermute_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_1_fu_271_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_1_fu_271_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_1_fu_271_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_1_fu_271_ap_ready,
        state_address0 => grp_KeccakF1600_StatePermute_1_fu_271_state_address0,
        state_ce0 => grp_KeccakF1600_StatePermute_1_fu_271_state_ce0,
        state_we0 => grp_KeccakF1600_StatePermute_1_fu_271_state_we0,
        state_d0 => grp_KeccakF1600_StatePermute_1_fu_271_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePermute_1_fu_271_state_address1,
        state_ce1 => grp_KeccakF1600_StatePermute_1_fu_271_state_ce1,
        state_we1 => grp_KeccakF1600_StatePermute_1_fu_271_state_we1,
        state_d1 => grp_KeccakF1600_StatePermute_1_fu_271_state_d1,
        state_q1 => s_q1);

    urem_64s_9ns_33_68_seq_1_U105 : component sha3_256_hw_urem_64s_9ns_33_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 9,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_316_ap_start,
        done => grp_fu_316_ap_done,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => grp_fu_316_ce,
        dout => grp_fu_316_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state110) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_KeccakF1600_StatePermute_1_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state110)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state110);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((grp_KeccakF1600_StatePermute_1_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                    grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_1_fu_271_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_fu_264_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_fu_264_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                    grp_KeccakF1600_StatePermute_fu_264_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_fu_264_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_fu_264_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln490_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                i_4_fu_148 <= ap_const_lv3_0;
            elsif (((icmp_ln764_fu_611_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_4_fu_148 <= select_ln764_fu_649_p3;
            end if; 
        end if;
    end process;

    i_5_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln490_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                i_5_fu_144 <= ap_const_lv4_0;
            elsif (((icmp_ln764_fu_611_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_5_fu_144 <= add_ln44_fu_672_p2;
            end if; 
        end if;
    end process;

    i_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln480_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                i_fu_140 <= ap_const_lv32_0;
            elsif (((icmp_ln490_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                i_fu_140 <= i_6_fu_464_p2;
            end if; 
        end if;
    end process;

    idx_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_fu_128 <= ap_const_lv64_0;
            elsif (((icmp_ln480_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                idx_fu_128 <= add_ln480_fu_390_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln490_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                indvar_flatten_fu_152 <= ap_const_lv6_0;
            elsif (((icmp_ln764_fu_611_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_152 <= add_ln764_fu_617_p2;
            end if; 
        end if;
    end process;

    inlen_assign_1_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                inlen_assign_1_fu_132 <= inlen_cast7_fu_278_p1;
            elsif (((icmp_ln480_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                inlen_assign_1_fu_132 <= add_ln486_fu_384_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                bit_sel_reg_958 <= s_q0(63 downto 63);
                trunc_ln496_reg_963 <= trunc_ln496_fu_591_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_27_reg_747 <= empty_27_fu_286_p2;
                empty_reg_742 <= empty_fu_282_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                first_iter_0_reg_971 <= first_iter_0_fu_657_p2;
                trunc_ln47_reg_980 <= trunc_ln47_fu_668_p1;
                trunc_ln47_reg_980_pp0_iter1_reg <= trunc_ln47_reg_980;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                gmem_addr_1_read_reg_933 <= m_axi_gmem_0_RDATA;
                s_addr_1_reg_938 <= zext_ln493_2_fu_526_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                gmem_addr_1_reg_820 <= add_ln490_fu_406_p2;
                gmem_addr_reg_807 <= add_ln484_1_fu_373_p2;
                i_2_reg_826 <= i_2_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                gmem_addr_2_reg_927 <= h;
                lshr_ln_reg_885 <= i_fu_140(7 downto 3);
                s_addr_2_reg_922 <= zext_ln495_1_fu_501_p1(5 - 1 downto 0);
                trunc_ln493_reg_880 <= trunc_ln493_fu_470_p1;
                trunc_ln495_reg_917 <= trunc_ln495_fu_489_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                gmem_addr_read_1_reg_837 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                gmem_addr_read_2_reg_842 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                gmem_addr_read_3_reg_847 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                gmem_addr_read_4_reg_852 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                gmem_addr_read_5_reg_857 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                gmem_addr_read_6_reg_862 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                gmem_addr_read_7_reg_867 <= m_axi_gmem_0_RDATA;
                s_load_reg_872 <= s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                gmem_addr_read_reg_832 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln480_reg_752 <= select_ln480_fu_302_p3;
                trunc_ln480_reg_762 <= trunc_ln480_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                sext_ln471_2_reg_799 <= sext_ln471_2_fu_351_p1;
                sext_ln471_reg_789 <= sext_ln471_fu_337_p1;
                sub_ln471_reg_794 <= sub_ln471_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln47_1_reg_985 <= trunc_ln47_1_fu_718_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (first_iter_0_reg_971 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                u_assign1_fu_156 <= s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                urem_ln480_reg_767 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                xor_ln493_reg_943 <= xor_ln493_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                xor_ln495_reg_948 <= xor_ln495_fu_577_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_0_AWREADY, m_axi_gmem_0_ARREADY, m_axi_gmem_0_RVALID, m_axi_gmem_0_BVALID, ap_CS_fsm_state72, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state100, ap_CS_fsm_state103, ap_enable_reg_pp0_iter3, ap_CS_fsm_state118, ap_CS_fsm_state2, ap_CS_fsm_state71, ap_CS_fsm_state99, ap_enable_reg_pp0_iter0, ap_CS_fsm_state109, grp_KeccakF1600_StatePermute_1_fu_271_ap_done, ap_block_pp0_stage0_subdone, icmp_ln764_fu_611_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done, grp_KeccakF1600_StatePermute_fu_264_ap_done, ap_CS_fsm_state90, icmp_ln490_fu_459_p2, icmp_ln480_fu_358_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((icmp_ln480_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state83) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((grp_KeccakF1600_StatePermute_fu_264_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state91) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((icmp_ln490_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state100) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                if (((grp_KeccakF1600_StatePermute_1_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln764_fu_611_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln764_fu_611_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state114;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state118) and (m_axi_gmem_0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln44_fu_672_p2 <= std_logic_vector(unsigned(select_ln765_fu_635_p3) + unsigned(ap_const_lv4_1));
    add_ln480_fu_390_p2 <= std_logic_vector(unsigned(idx_fu_128) + unsigned(ap_const_lv64_88));
    add_ln484_1_fu_373_p2 <= std_logic_vector(unsigned(add_ln484_fu_367_p2) + unsigned(in_r));
    add_ln484_fu_367_p2 <= std_logic_vector(unsigned(idx_fu_128) + unsigned(ap_const_lv64_C8));
    add_ln486_fu_384_p2 <= std_logic_vector(unsigned(inlen_assign_1_fu_132) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    add_ln490_fu_406_p2 <= std_logic_vector(signed(sext_ln471_reg_789) + signed(in_r));
    add_ln764_1_fu_643_p2 <= std_logic_vector(unsigned(i_4_fu_148) + unsigned(ap_const_lv3_1));
    add_ln764_fu_617_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_152) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(109);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state114 <= ap_CS_fsm(110);
    ap_CS_fsm_state115 <= ap_CS_fsm(111);
    ap_CS_fsm_state116 <= ap_CS_fsm(112);
    ap_CS_fsm_state117 <= ap_CS_fsm(113);
    ap_CS_fsm_state118 <= ap_CS_fsm(114);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_ST_fsm_state100_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state100_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state100_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;

    ap_ST_fsm_state103_blk_assign_proc : process(m_axi_gmem_0_AWREADY)
    begin
        if ((m_axi_gmem_0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state103_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state103_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;

    ap_ST_fsm_state109_blk_assign_proc : process(grp_KeccakF1600_StatePermute_1_fu_271_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_1_fu_271_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state109_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state109_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;

    ap_ST_fsm_state118_blk_assign_proc : process(m_axi_gmem_0_BVALID)
    begin
        if ((m_axi_gmem_0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state118_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state118_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done)
    begin
        if ((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;

    ap_ST_fsm_state72_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state80_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state81_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state81_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state81_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state82_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state83_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state83_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state83_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state84_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state85_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state85_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state85_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state86_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state87_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state90_blk_assign_proc : process(grp_KeccakF1600_StatePermute_fu_264_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_fu_264_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state90_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state90_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state91_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state91_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state91_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem_0_WREADY, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_gmem_0_WREADY = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem_0_WREADY, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_gmem_0_WREADY = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state110_assign_proc : process(icmp_ln764_fu_611_p2)
    begin
        if ((icmp_ln764_fu_611_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state110 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state110 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_0_BVALID, ap_CS_fsm_state118)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state118) and (m_axi_gmem_0_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_0_BVALID, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) and (m_axi_gmem_0_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_27_fu_286_p0 <= inlen;
    empty_27_fu_286_p2 <= "1" when (unsigned(empty_27_fu_286_p0) < unsigned(ap_const_lv32_87)) else "0";
    empty_fu_282_p0 <= inlen;
    empty_fu_282_p1 <= empty_fu_282_p0(8 - 1 downto 0);
    first_iter_0_fu_657_p2 <= "1" when (select_ln765_fu_635_p3 = ap_const_lv4_0) else "0";

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state72, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            gmem_blk_n_AR <= m_axi_gmem_0_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            gmem_blk_n_AW <= m_axi_gmem_0_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_0_BVALID, ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            gmem_blk_n_B <= m_axi_gmem_0_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            gmem_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_0_WREADY, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_0_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_KeccakF1600_StatePermute_1_fu_271_ap_start <= grp_KeccakF1600_StatePermute_1_fu_271_ap_start_reg;
    grp_KeccakF1600_StatePermute_fu_264_ap_start <= grp_KeccakF1600_StatePermute_fu_264_ap_start_reg;

    grp_fu_316_ap_start_assign_proc : process(ap_CS_fsm_state2, grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done)
    begin
        if (((grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_316_ap_start <= ap_const_logic_1;
        else 
            grp_fu_316_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_316_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state72, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state100, ap_CS_fsm_state103, ap_CS_fsm_state118, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state99, ap_CS_fsm_state101, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state109, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state108, ap_CS_fsm_state88, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state107, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 
    = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_316_ce <= ap_const_logic_0;
        else 
            grp_fu_316_ce <= ap_const_logic_1;
        end if; 
    end process;

        grp_fu_316_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln480_fu_302_p3),64));

    grp_fu_316_p1 <= ap_const_lv64_88(9 - 1 downto 0);
    grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start <= grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_ap_start_reg;
    i_2_fu_423_p2 <= std_logic_vector(unsigned(sub_ln490_fu_416_p2) + unsigned(trunc_ln490_fu_420_p1));
    i_6_fu_464_p2 <= std_logic_vector(unsigned(i_fu_140) + unsigned(ap_const_lv32_1));
    icmp_ln44_fu_629_p2 <= "1" when (i_5_fu_144 = ap_const_lv4_8) else "0";
    icmp_ln480_fu_358_p2 <= "1" when (unsigned(inlen_assign_1_fu_132) > unsigned(ap_const_lv64_87)) else "0";
    icmp_ln490_fu_459_p2 <= "1" when (unsigned(sub_ln471_reg_794) > unsigned(zext_ln490_fu_455_p1)) else "0";
    icmp_ln764_fu_611_p2 <= "1" when (indvar_flatten_fu_152 = ap_const_lv6_20) else "0";
    inlen_cast1_fu_322_p0 <= inlen;
        inlen_cast1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inlen_cast1_fu_322_p0),34));

    inlen_cast7_fu_278_p0 <= inlen;
        inlen_cast7_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inlen_cast7_fu_278_p0),64));

    lshr_ln1_fu_492_p4 <= i_2_reg_826(7 downto 3);
    lshr_ln47_fu_712_p2 <= std_logic_vector(shift_right(unsigned(u_assign1_fu_156),to_integer(unsigned('0' & zext_ln47_fu_708_p1(31-1 downto 0)))));

    m_axi_gmem_0_ARADDR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state72, ap_CS_fsm_state91, gmem_addr_reg_807, gmem_addr_1_reg_820)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_1_reg_820;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_reg_807;
            else 
                m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;

    m_axi_gmem_0_ARLEN_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state72, ap_CS_fsm_state91, sext_ln471_2_reg_799)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                m_axi_gmem_0_ARLEN <= sext_ln471_2_reg_799(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                m_axi_gmem_0_ARLEN <= ap_const_lv64_8(32 - 1 downto 0);
            else 
                m_axi_gmem_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_0_ARVALID_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state72, ap_CS_fsm_state91)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state91) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state72) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_AWADDR <= gmem_addr_2_reg_927;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv64_20(32 - 1 downto 0);
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_0_AWVALID_assign_proc : process(m_axi_gmem_0_AWREADY, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_0_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_0_BREADY_assign_proc : process(m_axi_gmem_0_BVALID, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) and (m_axi_gmem_0_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_0_RREADY_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state100)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state100) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state87) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state81) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (m_axi_gmem_0_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= trunc_ln47_1_reg_985;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv1_1;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem_0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            m_axi_gmem_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln484_6_fu_434_p9 <= (((((((gmem_addr_read_7_reg_867 & gmem_addr_read_6_reg_862) & gmem_addr_read_5_reg_857) & gmem_addr_read_4_reg_852) & gmem_addr_read_3_reg_847) & gmem_addr_read_2_reg_842) & gmem_addr_read_1_reg_837) & gmem_addr_read_reg_832);
    s_addr_3_reg_953 <= ap_const_lv64_10(5 - 1 downto 0);

    s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state109, grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0, grp_KeccakF1600_StatePermute_fu_264_state_address0, grp_KeccakF1600_StatePermute_1_fu_271_state_address0, ap_CS_fsm_state90, s_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_address0 <= grp_KeccakF1600_StatePermute_1_fu_271_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_address0 <= grp_KeccakF1600_StatePermute_fu_264_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_address0;
        else 
            s_address0 <= s_address0_local;
        end if; 
    end process;


    s_address0_local_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state100, ap_block_pp0_stage0, ap_CS_fsm_state99, s_addr_2_reg_922, s_addr_1_reg_938, s_addr_3_reg_953, ap_CS_fsm_state105, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln495_1_fu_501_p1, zext_ln493_2_fu_526_p1, zext_ln764_fu_663_p1, ap_CS_fsm_state88, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state107)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_address0_local <= zext_ln764_fu_663_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            s_address0_local <= s_addr_3_reg_953;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            s_address0_local <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            s_address0_local <= s_addr_2_reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            s_address0_local <= s_addr_1_reg_938;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            s_address0_local <= zext_ln493_2_fu_526_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            s_address0_local <= zext_ln495_1_fu_501_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            s_address0_local <= ap_const_lv64_19(5 - 1 downto 0);
        else 
            s_address0_local <= "XXXXX";
        end if; 
    end process;


    s_address1_assign_proc : process(ap_CS_fsm_state109, grp_KeccakF1600_StatePermute_fu_264_state_address1, grp_KeccakF1600_StatePermute_1_fu_271_state_address1, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_address1 <= grp_KeccakF1600_StatePermute_1_fu_271_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_address1 <= grp_KeccakF1600_StatePermute_fu_264_state_address1;
        else 
            s_address1 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state109, grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0, grp_KeccakF1600_StatePermute_fu_264_state_ce0, grp_KeccakF1600_StatePermute_1_fu_271_state_ce0, ap_CS_fsm_state90, s_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_ce0 <= grp_KeccakF1600_StatePermute_1_fu_271_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_ce0 <= grp_KeccakF1600_StatePermute_fu_264_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_ce0 <= grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_ce0;
        else 
            s_ce0 <= s_ce0_local;
        end if; 
    end process;


    s_ce0_local_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state86, ap_CS_fsm_state100, ap_CS_fsm_state99, ap_CS_fsm_state105, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state88, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state99) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state100) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (m_axi_gmem_0_RVALID = ap_const_logic_1)))) then 
            s_ce0_local <= ap_const_logic_1;
        else 
            s_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state109, grp_KeccakF1600_StatePermute_fu_264_state_ce1, grp_KeccakF1600_StatePermute_1_fu_271_state_ce1, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_ce1 <= grp_KeccakF1600_StatePermute_1_fu_271_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_ce1 <= grp_KeccakF1600_StatePermute_fu_264_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state109, grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0, grp_KeccakF1600_StatePermute_fu_264_state_d0, grp_KeccakF1600_StatePermute_1_fu_271_state_d0, ap_CS_fsm_state90, s_d0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_d0 <= grp_KeccakF1600_StatePermute_1_fu_271_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_d0 <= grp_KeccakF1600_StatePermute_fu_264_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_d0 <= grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_d0;
        else 
            s_d0 <= s_d0_local;
        end if; 
    end process;


    s_d0_local_assign_proc : process(xor_ln493_reg_943, xor_ln495_reg_948, ap_CS_fsm_state88, xor_ln484_fu_446_p2, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state107, xor_ln_fu_600_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            s_d0_local <= xor_ln_fu_600_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            s_d0_local <= xor_ln495_reg_948;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            s_d0_local <= xor_ln493_reg_943;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            s_d0_local <= xor_ln484_fu_446_p2;
        else 
            s_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(ap_CS_fsm_state109, grp_KeccakF1600_StatePermute_fu_264_state_d1, grp_KeccakF1600_StatePermute_1_fu_271_state_d1, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_d1 <= grp_KeccakF1600_StatePermute_1_fu_271_state_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_d1 <= grp_KeccakF1600_StatePermute_fu_264_state_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state109, grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0, grp_KeccakF1600_StatePermute_fu_264_state_we0, grp_KeccakF1600_StatePermute_1_fu_271_state_we0, s_we0_out, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_we0 <= grp_KeccakF1600_StatePermute_1_fu_271_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_we0 <= grp_KeccakF1600_StatePermute_fu_264_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_we0 <= grp_pqcrystals_kyber_fips202_ref_sha3_256_1_Pipeline_VITIS_LOOP_476_1_fu_258_s_we0;
        else 
            s_we0 <= (s_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_we0_local_assign_proc : process(ap_CS_fsm_state88, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            s_we0_local <= ap_const_logic_1;
        else 
            s_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_we0_out <= s_we0_local;

    s_we1_assign_proc : process(ap_CS_fsm_state109, grp_KeccakF1600_StatePermute_fu_264_state_we1, grp_KeccakF1600_StatePermute_1_fu_271_state_we1, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            s_we1 <= grp_KeccakF1600_StatePermute_1_fu_271_state_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            s_we1 <= grp_KeccakF1600_StatePermute_fu_264_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln480_fu_302_p2 <= inlen;
    select_ln480_fu_302_p3 <= 
        ap_const_lv32_87 when (empty_27_reg_747(0) = '1') else 
        select_ln480_fu_302_p2;
    select_ln764_fu_649_p3 <= 
        add_ln764_1_fu_643_p2 when (icmp_ln44_fu_629_p2(0) = '1') else 
        i_4_fu_148;
    select_ln765_fu_635_p3 <= 
        ap_const_lv4_0 when (icmp_ln44_fu_629_p2(0) = '1') else 
        i_5_fu_144;
        sext_ln471_1_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln480_fu_331_p2),34));

        sext_ln471_2_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln471_fu_345_p2),64));

        sext_ln471_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln480_fu_331_p2),64));

        sext_ln480_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln480_reg_752),33));

    shl_ln1_fu_556_p3 <= (trunc_ln495_reg_917 & ap_const_lv3_0);
    shl_ln2_fu_701_p3 <= (trunc_ln47_reg_980_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln493_fu_544_p2 <= std_logic_vector(shift_left(unsigned(zext_ln493_fu_530_p1),to_integer(unsigned('0' & zext_ln493_1_fu_540_p1(31-1 downto 0)))));
    shl_ln495_fu_567_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv59_6),to_integer(unsigned('0' & zext_ln495_fu_563_p1(31-1 downto 0)))));
    shl_ln_fu_533_p3 <= (trunc_ln493_reg_880 & ap_const_lv3_0);
    sub_ln471_fu_345_p2 <= std_logic_vector(signed(inlen_cast1_fu_322_p1) - signed(sext_ln471_1_fu_341_p1));
    sub_ln480_fu_331_p2 <= std_logic_vector(signed(sext_ln480_1_fu_325_p1) - signed(trunc_ln480_1_fu_328_p1));
    sub_ln490_fu_416_p2 <= std_logic_vector(unsigned(empty_reg_742) - unsigned(trunc_ln480_reg_762));
    trunc_ln47_1_fu_718_p1 <= lshr_ln47_fu_712_p2(8 - 1 downto 0);
    trunc_ln47_fu_668_p1 <= select_ln765_fu_635_p3(3 - 1 downto 0);
    trunc_ln480_1_fu_328_p1 <= urem_ln480_reg_767(33 - 1 downto 0);
    trunc_ln480_fu_312_p1 <= select_ln480_fu_302_p3(8 - 1 downto 0);
    trunc_ln490_fu_420_p1 <= urem_ln480_reg_767(8 - 1 downto 0);
    trunc_ln493_fu_470_p1 <= i_fu_140(3 - 1 downto 0);
    trunc_ln495_fu_489_p1 <= i_2_reg_826(3 - 1 downto 0);
    trunc_ln496_fu_591_p1 <= s_q0(63 - 1 downto 0);
    xor_ln484_fu_446_p2 <= (s_load_reg_872 xor or_ln484_6_fu_434_p9);
    xor_ln493_fu_550_p2 <= (shl_ln493_fu_544_p2 xor s_q0);
    xor_ln495_fu_577_p2 <= (zext_ln495_2_fu_573_p1 xor s_q0);
    xor_ln496_fu_595_p2 <= (bit_sel_reg_958 xor ap_const_lv1_1);
    xor_ln_fu_600_p3 <= (xor_ln496_fu_595_p2 & trunc_ln496_reg_963);
    zext_ln47_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_701_p3),64));
    zext_ln490_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_140),34));
    zext_ln493_1_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_533_p3),64));
    zext_ln493_2_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_885),64));
    zext_ln493_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_1_read_reg_933),64));
    zext_ln495_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_492_p4),64));
    zext_ln495_2_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln495_fu_567_p2),64));
    zext_ln495_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_556_p3),59));
    zext_ln764_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln764_fu_649_p3),64));
end behav;
