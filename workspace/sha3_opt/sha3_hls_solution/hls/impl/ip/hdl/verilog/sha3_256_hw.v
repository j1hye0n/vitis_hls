// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha3_256_hw_sha3_256_hw,hls_ip_2024_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=18606,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=13785,HLS_SYN_LUT=39077,HLS_VERSION=2024_2}" *)

module sha3_256_hw (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_pp0_stage0 = 11'd32;
parameter    ap_ST_fsm_state10 = 11'd64;
parameter    ap_ST_fsm_state11 = 11'd128;
parameter    ap_ST_fsm_state12 = 11'd256;
parameter    ap_ST_fsm_state13 = 11'd512;
parameter    ap_ST_fsm_state14 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 6;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] out_r;
wire   [63:0] in_r;
wire   [31:0] inlen;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state14;
reg   [0:0] icmp_ln448_reg_172;
reg   [31:0] inlen_read_reg_383;
reg   [63:0] in_r_read_reg_388;
reg   [63:0] gmem_addr_reg_393;
wire   [0:0] first_iter_0_fu_255_p2;
reg   [0:0] first_iter_0_reg_399;
wire    ap_CS_fsm_pp0_stage0;
reg    gmem_0_AWVALID;
wire    gmem_0_AWREADY;
wire   [31:0] gmem_0_AWLEN;
reg    gmem_0_WVALID;
wire    gmem_0_WREADY;
reg    gmem_0_ARVALID;
wire    gmem_0_ARREADY;
wire    gmem_0_RVALID;
reg    gmem_0_RREADY;
wire   [7:0] gmem_0_RDATA;
wire   [10:0] gmem_0_RFIFONUM;
wire    gmem_0_BVALID;
reg    gmem_0_BREADY;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln46_fu_272_p1;
reg   [2:0] trunc_ln46_reg_408;
reg   [2:0] trunc_ln46_reg_408_pp0_iter1_reg;
wire   [0:0] icmp_ln44_fu_282_p2;
reg   [0:0] icmp_ln44_reg_413;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln790_fu_294_p2;
reg   [0:0] icmp_ln790_reg_418;
wire   [7:0] trunc_ln46_1_fu_345_p1;
reg   [7:0] trunc_ln46_1_reg_422;
wire    ap_CS_fsm_state5;
wire    grp_KeccakF1600_StatePermute_fu_194_ap_done;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] s_address0;
reg    s_ce0;
reg    s_we0;
reg   [63:0] s_d0;
wire   [63:0] s_q0;
reg   [4:0] s_address1;
reg    s_ce1;
reg    s_we1;
reg   [63:0] s_d1;
wire   [63:0] s_q1;
wire    grp_keccak_absorb_once_1_fu_183_ap_start;
wire    grp_keccak_absorb_once_1_fu_183_ap_done;
wire    grp_keccak_absorb_once_1_fu_183_ap_idle;
wire    grp_keccak_absorb_once_1_fu_183_ap_ready;
wire   [4:0] grp_keccak_absorb_once_1_fu_183_s_address0;
wire    grp_keccak_absorb_once_1_fu_183_s_ce0;
wire    grp_keccak_absorb_once_1_fu_183_s_we0;
wire   [63:0] grp_keccak_absorb_once_1_fu_183_s_d0;
wire   [4:0] grp_keccak_absorb_once_1_fu_183_s_address1;
wire    grp_keccak_absorb_once_1_fu_183_s_ce1;
wire    grp_keccak_absorb_once_1_fu_183_s_we1;
wire   [63:0] grp_keccak_absorb_once_1_fu_183_s_d1;
wire    grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWVALID;
wire   [63:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWADDR;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWID;
wire   [31:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLEN;
wire   [2:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWSIZE;
wire   [1:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWBURST;
wire   [1:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLOCK;
wire   [3:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWCACHE;
wire   [2:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWPROT;
wire   [3:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWQOS;
wire   [3:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWREGION;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWUSER;
wire    grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WVALID;
wire   [7:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WDATA;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WSTRB;
wire    grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WLAST;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WID;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WUSER;
wire    grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID;
wire   [63:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARADDR;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARID;
wire   [31:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLEN;
wire   [2:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARSIZE;
wire   [1:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARBURST;
wire   [1:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLOCK;
wire   [3:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARCACHE;
wire   [2:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARPROT;
wire   [3:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARQOS;
wire   [3:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARREGION;
wire   [0:0] grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARUSER;
wire    grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY;
wire    grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_BREADY;
wire    grp_KeccakF1600_StatePermute_fu_194_ap_start;
wire    grp_KeccakF1600_StatePermute_fu_194_ap_idle;
wire    grp_KeccakF1600_StatePermute_fu_194_ap_ready;
wire   [4:0] grp_KeccakF1600_StatePermute_fu_194_state_address0;
wire    grp_KeccakF1600_StatePermute_fu_194_state_ce0;
wire    grp_KeccakF1600_StatePermute_fu_194_state_we0;
wire   [63:0] grp_KeccakF1600_StatePermute_fu_194_state_d0;
wire   [4:0] grp_KeccakF1600_StatePermute_fu_194_state_address1;
wire    grp_KeccakF1600_StatePermute_fu_194_state_ce1;
wire    grp_KeccakF1600_StatePermute_fu_194_state_we1;
wire   [63:0] grp_KeccakF1600_StatePermute_fu_194_state_d1;
reg   [0:0] ap_phi_mux_icmp_ln448_phi_fu_176_p4;
reg    grp_keccak_absorb_once_1_fu_183_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_KeccakF1600_StatePermute_fu_194_ap_start_reg;
wire   [63:0] zext_ln790_fu_261_p1;
wire    ap_block_pp0_stage0_01001;
reg   [4:0] indvar_flatten4_fu_102;
wire   [4:0] add_ln790_1_fu_266_p2;
reg   [2:0] i5_fu_106;
wire   [2:0] i_fu_247_p3;
reg   [3:0] i_17_fu_110;
wire   [3:0] i_1_fu_276_p2;
reg   [2:0] add_ln7909_fu_114;
wire   [2:0] add_ln790_fu_288_p2;
reg   [63:0] u_assign16_fu_118;
reg    s_ce0_local;
wire   [3:0] select_ln791_fu_239_p3;
wire   [5:0] shl_ln_fu_328_p3;
wire   [63:0] zext_ln46_fu_335_p1;
wire   [63:0] lshr_ln46_fu_339_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_keccak_absorb_once_1_fu_183_ap_start_reg = 1'b0;
#0 grp_KeccakF1600_StatePermute_fu_194_ap_start_reg = 1'b0;
#0 indvar_flatten4_fu_102 = 5'd0;
#0 i5_fu_106 = 3'd0;
#0 i_17_fu_110 = 4'd0;
#0 add_ln7909_fu_114 = 3'd0;
#0 u_assign16_fu_118 = 64'd0;
end

sha3_256_hw_s_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(s_address0),
    .ce0(s_ce0),
    .we0(s_we0),
    .d0(s_d0),
    .q0(s_q0),
    .address1(s_address1),
    .ce1(s_ce1),
    .we1(s_we1),
    .d1(s_d1),
    .q1(s_q1)
);

sha3_256_hw_keccak_absorb_once_1 grp_keccak_absorb_once_1_fu_183(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_keccak_absorb_once_1_fu_183_ap_start),
    .ap_done(grp_keccak_absorb_once_1_fu_183_ap_done),
    .ap_idle(grp_keccak_absorb_once_1_fu_183_ap_idle),
    .ap_ready(grp_keccak_absorb_once_1_fu_183_ap_ready),
    .s_address0(grp_keccak_absorb_once_1_fu_183_s_address0),
    .s_ce0(grp_keccak_absorb_once_1_fu_183_s_ce0),
    .s_we0(grp_keccak_absorb_once_1_fu_183_s_we0),
    .s_d0(grp_keccak_absorb_once_1_fu_183_s_d0),
    .s_q0(s_q0),
    .s_address1(grp_keccak_absorb_once_1_fu_183_s_address1),
    .s_ce1(grp_keccak_absorb_once_1_fu_183_s_ce1),
    .s_we1(grp_keccak_absorb_once_1_fu_183_s_we1),
    .s_d1(grp_keccak_absorb_once_1_fu_183_s_d1),
    .s_q1(s_q1),
    .m_axi_gmem_0_AWVALID(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .in_r(in_r_read_reg_388),
    .inlen(inlen_read_reg_383)
);

sha3_256_hw_KeccakF1600_StatePermute grp_KeccakF1600_StatePermute_fu_194(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_KeccakF1600_StatePermute_fu_194_ap_start),
    .ap_done(grp_KeccakF1600_StatePermute_fu_194_ap_done),
    .ap_idle(grp_KeccakF1600_StatePermute_fu_194_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePermute_fu_194_ap_ready),
    .state_address0(grp_KeccakF1600_StatePermute_fu_194_state_address0),
    .state_ce0(grp_KeccakF1600_StatePermute_fu_194_state_ce0),
    .state_we0(grp_KeccakF1600_StatePermute_fu_194_state_we0),
    .state_d0(grp_KeccakF1600_StatePermute_fu_194_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePermute_fu_194_state_address1),
    .state_ce1(grp_KeccakF1600_StatePermute_fu_194_state_ce1),
    .state_we1(grp_KeccakF1600_StatePermute_fu_194_state_we1),
    .state_d1(grp_KeccakF1600_StatePermute_fu_194_state_d1),
    .state_q1(s_q1)
);

sha3_256_hw_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .inlen(inlen),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

sha3_256_hw_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .out_r(out_r),
    .in_r(in_r)
);

sha3_256_hw_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 11 ),
    .CH0_USER_DW( 8 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_0_ARVALID),
    .I_CH0_ARREADY(gmem_0_ARREADY),
    .I_CH0_ARADDR(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARADDR),
    .I_CH0_ARLEN(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLEN),
    .I_CH0_RVALID(gmem_0_RVALID),
    .I_CH0_RREADY(gmem_0_RREADY),
    .I_CH0_RDATA(gmem_0_RDATA),
    .I_CH0_RFIFONUM(gmem_0_RFIFONUM),
    .I_CH0_AWVALID(gmem_0_AWVALID),
    .I_CH0_AWREADY(gmem_0_AWREADY),
    .I_CH0_AWADDR(gmem_addr_reg_393),
    .I_CH0_AWLEN(gmem_0_AWLEN),
    .I_CH0_WVALID(gmem_0_WVALID),
    .I_CH0_WREADY(gmem_0_WREADY),
    .I_CH0_WDATA(trunc_ln46_1_reg_422),
    .I_CH0_WSTRB(1'd1),
    .I_CH0_BVALID(gmem_0_BVALID),
    .I_CH0_BREADY(gmem_0_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_KeccakF1600_StatePermute_fu_194_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((grp_KeccakF1600_StatePermute_fu_194_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_KeccakF1600_StatePermute_fu_194_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (gmem_0_AWREADY == 1'b1))) begin
            grp_KeccakF1600_StatePermute_fu_194_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePermute_fu_194_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePermute_fu_194_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_keccak_absorb_once_1_fu_183_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_keccak_absorb_once_1_fu_183_ap_start_reg <= 1'b1;
        end else if ((grp_keccak_absorb_once_1_fu_183_ap_ready == 1'b1)) begin
            grp_keccak_absorb_once_1_fu_183_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln7909_fu_114 <= 3'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln7909_fu_114 <= add_ln790_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i5_fu_106 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i5_fu_106 <= i_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_17_fu_110 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_17_fu_110 <= i_1_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln790_reg_418 == 1'd0))) begin
        icmp_ln448_reg_172 <= icmp_ln44_reg_413;
    end else if (((grp_KeccakF1600_StatePermute_fu_194_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln448_reg_172 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten4_fu_102 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten4_fu_102 <= add_ln790_1_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_399 <= first_iter_0_fu_255_p2;
        icmp_ln790_reg_418 <= icmp_ln790_fu_294_p2;
        trunc_ln46_reg_408 <= trunc_ln46_fu_272_p1;
        trunc_ln46_reg_408_pp0_iter1_reg <= trunc_ln46_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_reg_393 <= out_r;
        in_r_read_reg_388 <= in_r;
        inlen_read_reg_383 <= inlen;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        icmp_ln44_reg_413 <= icmp_ln44_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        trunc_ln46_1_reg_422 <= trunc_ln46_1_fu_345_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (first_iter_0_reg_399 == 1'd1))) begin
        u_assign16_fu_118 <= s_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((gmem_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_keccak_absorb_once_1_fu_183_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_KeccakF1600_StatePermute_fu_194_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln790_fu_294_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (gmem_0_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln790_reg_418 == 1'd0))) begin
        ap_phi_mux_icmp_ln448_phi_fu_176_p4 = icmp_ln44_reg_413;
    end else begin
        ap_phi_mux_icmp_ln448_phi_fu_176_p4 = icmp_ln448_reg_172;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (gmem_0_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_0_ARVALID = grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID;
    end else begin
        gmem_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (gmem_0_AWREADY == 1'b1))) begin
        gmem_0_AWVALID = 1'b1;
    end else begin
        gmem_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (gmem_0_BVALID == 1'b1))) begin
        gmem_0_BREADY = 1'b1;
    end else begin
        gmem_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_0_RREADY = grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY;
    end else begin
        gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        gmem_0_WVALID = 1'b1;
    end else begin
        gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = grp_KeccakF1600_StatePermute_fu_194_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = grp_keccak_absorb_once_1_fu_183_s_address0;
    end else begin
        s_address0 = zext_ln790_fu_261_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address1 = grp_KeccakF1600_StatePermute_fu_194_state_address1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address1 = grp_keccak_absorb_once_1_fu_183_s_address1;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_ce0 = grp_KeccakF1600_StatePermute_fu_194_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_ce0 = grp_keccak_absorb_once_1_fu_183_s_ce0;
    end else begin
        s_ce0 = s_ce0_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        s_ce0_local = 1'b1;
    end else begin
        s_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_ce1 = grp_KeccakF1600_StatePermute_fu_194_state_ce1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_ce1 = grp_keccak_absorb_once_1_fu_183_s_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_d0 = grp_KeccakF1600_StatePermute_fu_194_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_d0 = grp_keccak_absorb_once_1_fu_183_s_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_d1 = grp_KeccakF1600_StatePermute_fu_194_state_d1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_d1 = grp_keccak_absorb_once_1_fu_183_s_d1;
    end else begin
        s_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_we0 = grp_KeccakF1600_StatePermute_fu_194_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_we0 = grp_keccak_absorb_once_1_fu_183_s_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_we1 = grp_KeccakF1600_StatePermute_fu_194_state_we1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_we1 = grp_keccak_absorb_once_1_fu_183_s_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_keccak_absorb_once_1_fu_183_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (gmem_0_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_KeccakF1600_StatePermute_fu_194_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (gmem_0_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln790_1_fu_266_p2 = (indvar_flatten4_fu_102 + 5'd1);

assign add_ln790_fu_288_p2 = (i_fu_247_p3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (gmem_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (gmem_0_WREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign first_iter_0_fu_255_p2 = ((select_ln791_fu_239_p3 == 4'd0) ? 1'b1 : 1'b0);

assign gmem_0_AWLEN = 64'd32;

assign grp_KeccakF1600_StatePermute_fu_194_ap_start = grp_KeccakF1600_StatePermute_fu_194_ap_start_reg;

assign grp_keccak_absorb_once_1_fu_183_ap_start = grp_keccak_absorb_once_1_fu_183_ap_start_reg;

assign i_1_fu_276_p2 = (select_ln791_fu_239_p3 + 4'd1);

assign i_fu_247_p3 = ((ap_phi_mux_icmp_ln448_phi_fu_176_p4[0:0] == 1'b1) ? add_ln7909_fu_114 : i5_fu_106);

assign icmp_ln44_fu_282_p2 = ((i_1_fu_276_p2 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln790_fu_294_p2 = ((indvar_flatten4_fu_102 == 5'd31) ? 1'b1 : 1'b0);

assign lshr_ln46_fu_339_p2 = u_assign16_fu_118 >> zext_ln46_fu_335_p1;

assign select_ln791_fu_239_p3 = ((ap_phi_mux_icmp_ln448_phi_fu_176_p4[0:0] == 1'b1) ? 4'd0 : i_17_fu_110);

assign shl_ln_fu_328_p3 = {{trunc_ln46_reg_408_pp0_iter1_reg}, {3'd0}};

assign trunc_ln46_1_fu_345_p1 = lshr_ln46_fu_339_p2[7:0];

assign trunc_ln46_fu_272_p1 = select_ln791_fu_239_p3[2:0];

assign zext_ln46_fu_335_p1 = shl_ln_fu_328_p3;

assign zext_ln790_fu_261_p1 = i_fu_247_p3;

endmodule //sha3_256_hw
