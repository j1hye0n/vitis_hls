-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hw is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sha3_256_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha3_256_hw_sha3_256_hw,hls_ip_2024_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z010-clg400-1I,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=18606,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=13785,HLS_SYN_LUT=39077,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln448_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal inlen_read_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_read_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal first_iter_0_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal gmem_0_AWVALID : STD_LOGIC;
    signal gmem_0_AWREADY : STD_LOGIC;
    signal gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_0_WVALID : STD_LOGIC;
    signal gmem_0_WREADY : STD_LOGIC;
    signal gmem_0_ARVALID : STD_LOGIC;
    signal gmem_0_ARREADY : STD_LOGIC;
    signal gmem_0_RVALID : STD_LOGIC;
    signal gmem_0_RREADY : STD_LOGIC;
    signal gmem_0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem_0_BVALID : STD_LOGIC;
    signal gmem_0_BREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln46_fu_272_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln46_reg_408 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln46_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln44_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln790_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln790_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_1_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_1_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_KeccakF1600_StatePermute_fu_194_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWVALID : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WVALID : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WLAST : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY : STD_LOGIC;
    signal grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_BREADY : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_194_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_194_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_194_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_194_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_icmp_ln448_phi_fu_176_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_fu_183_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_KeccakF1600_StatePermute_fu_194_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln790_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal indvar_flatten4_fu_102 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln790_1_fu_266_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i5_fu_106 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_fu_247_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_17_fu_110 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_1_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7909_fu_114 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln790_fu_288_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal u_assign16_fu_118 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_ce0_local : STD_LOGIC;
    signal select_ln791_fu_239_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_328_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln46_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hw_keccak_absorb_once_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem_0_WREADY : IN STD_LOGIC;
        m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RVALID : IN STD_LOGIC;
        m_axi_gmem_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_0_RLAST : IN STD_LOGIC;
        m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BVALID : IN STD_LOGIC;
        m_axi_gmem_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        inlen : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha3_256_hw_KeccakF1600_StatePermute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_s_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        inlen : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component sha3_256_hw_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;



begin
    s_U : component sha3_256_hw_s_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => s_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => s_d1,
        q1 => s_q1);

    grp_keccak_absorb_once_1_fu_183 : component sha3_256_hw_keccak_absorb_once_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_keccak_absorb_once_1_fu_183_ap_start,
        ap_done => grp_keccak_absorb_once_1_fu_183_ap_done,
        ap_idle => grp_keccak_absorb_once_1_fu_183_ap_idle,
        ap_ready => grp_keccak_absorb_once_1_fu_183_ap_ready,
        s_address0 => grp_keccak_absorb_once_1_fu_183_s_address0,
        s_ce0 => grp_keccak_absorb_once_1_fu_183_s_ce0,
        s_we0 => grp_keccak_absorb_once_1_fu_183_s_we0,
        s_d0 => grp_keccak_absorb_once_1_fu_183_s_d0,
        s_q0 => s_q0,
        s_address1 => grp_keccak_absorb_once_1_fu_183_s_address1,
        s_ce1 => grp_keccak_absorb_once_1_fu_183_s_ce1,
        s_we1 => grp_keccak_absorb_once_1_fu_183_s_we1,
        s_d1 => grp_keccak_absorb_once_1_fu_183_s_d1,
        s_q1 => s_q1,
        m_axi_gmem_0_AWVALID => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY => ap_const_logic_0,
        m_axi_gmem_0_AWADDR => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY => ap_const_logic_0,
        m_axi_gmem_0_WDATA => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY => gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID => gmem_0_RVALID,
        m_axi_gmem_0_RREADY => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA => gmem_0_RDATA,
        m_axi_gmem_0_RLAST => ap_const_logic_0,
        m_axi_gmem_0_RID => ap_const_lv1_0,
        m_axi_gmem_0_RFIFONUM => gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER => ap_const_lv1_0,
        m_axi_gmem_0_RRESP => ap_const_lv2_0,
        m_axi_gmem_0_BVALID => ap_const_logic_0,
        m_axi_gmem_0_BREADY => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP => ap_const_lv2_0,
        m_axi_gmem_0_BID => ap_const_lv1_0,
        m_axi_gmem_0_BUSER => ap_const_lv1_0,
        in_r => in_r_read_reg_388,
        inlen => inlen_read_reg_383);

    grp_KeccakF1600_StatePermute_fu_194 : component sha3_256_hw_KeccakF1600_StatePermute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_KeccakF1600_StatePermute_fu_194_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_fu_194_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_fu_194_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_fu_194_ap_ready,
        state_address0 => grp_KeccakF1600_StatePermute_fu_194_state_address0,
        state_ce0 => grp_KeccakF1600_StatePermute_fu_194_state_ce0,
        state_we0 => grp_KeccakF1600_StatePermute_fu_194_state_we0,
        state_d0 => grp_KeccakF1600_StatePermute_fu_194_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePermute_fu_194_state_address1,
        state_ce1 => grp_KeccakF1600_StatePermute_fu_194_state_ce1,
        state_we1 => grp_KeccakF1600_StatePermute_fu_194_state_we1,
        state_d1 => grp_KeccakF1600_StatePermute_fu_194_state_d1,
        state_q1 => s_q1);

    control_s_axi_U : component sha3_256_hw_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        inlen => inlen,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_r_s_axi_U : component sha3_256_hw_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        out_r => out_r,
        in_r => in_r);

    gmem_m_axi_U : component sha3_256_hw_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 8,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem_0_ARVALID,
        I_CH0_ARREADY => gmem_0_ARREADY,
        I_CH0_ARADDR => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARADDR,
        I_CH0_ARLEN => grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARLEN,
        I_CH0_RVALID => gmem_0_RVALID,
        I_CH0_RREADY => gmem_0_RREADY,
        I_CH0_RDATA => gmem_0_RDATA,
        I_CH0_RFIFONUM => gmem_0_RFIFONUM,
        I_CH0_AWVALID => gmem_0_AWVALID,
        I_CH0_AWREADY => gmem_0_AWREADY,
        I_CH0_AWADDR => gmem_addr_reg_393,
        I_CH0_AWLEN => gmem_0_AWLEN,
        I_CH0_WVALID => gmem_0_WVALID,
        I_CH0_WREADY => gmem_0_WREADY,
        I_CH0_WDATA => trunc_ln46_1_reg_422,
        I_CH0_WSTRB => ap_const_lv1_1,
        I_CH0_BVALID => gmem_0_BVALID,
        I_CH0_BREADY => gmem_0_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_KeccakF1600_StatePermute_fu_194_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((grp_KeccakF1600_StatePermute_fu_194_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_fu_194_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_KeccakF1600_StatePermute_fu_194_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (gmem_0_AWREADY = ap_const_logic_1))) then 
                    grp_KeccakF1600_StatePermute_fu_194_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_fu_194_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_fu_194_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_once_1_fu_183_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_keccak_absorb_once_1_fu_183_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_keccak_absorb_once_1_fu_183_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_once_1_fu_183_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_once_1_fu_183_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_ln7909_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                add_ln7909_fu_114 <= ap_const_lv3_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                add_ln7909_fu_114 <= add_ln790_fu_288_p2;
            end if; 
        end if;
    end process;

    i5_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i5_fu_106 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i5_fu_106 <= i_fu_247_p3;
            end if; 
        end if;
    end process;

    i_17_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_17_fu_110 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_17_fu_110 <= i_1_fu_276_p2;
            end if; 
        end if;
    end process;

    icmp_ln448_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln790_reg_418 = ap_const_lv1_0))) then 
                icmp_ln448_reg_172 <= icmp_ln44_reg_413;
            elsif (((grp_KeccakF1600_StatePermute_fu_194_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                icmp_ln448_reg_172 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten4_fu_102 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten4_fu_102 <= add_ln790_1_fu_266_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                first_iter_0_reg_399 <= first_iter_0_fu_255_p2;
                icmp_ln790_reg_418 <= icmp_ln790_fu_294_p2;
                trunc_ln46_reg_408 <= trunc_ln46_fu_272_p1;
                trunc_ln46_reg_408_pp0_iter1_reg <= trunc_ln46_reg_408;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_393 <= out_r;
                in_r_read_reg_388 <= in_r;
                inlen_read_reg_383 <= inlen;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                icmp_ln44_reg_413 <= icmp_ln44_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln46_1_reg_422 <= trunc_ln46_1_fu_345_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_399 = ap_const_lv1_1))) then
                u_assign16_fu_118 <= s_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_enable_reg_pp0_iter3, ap_CS_fsm_state14, gmem_0_AWREADY, gmem_0_BVALID, ap_CS_fsm_state5, grp_KeccakF1600_StatePermute_fu_194_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, grp_keccak_absorb_once_1_fu_183_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_keccak_absorb_once_1_fu_183_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (gmem_0_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_KeccakF1600_StatePermute_fu_194_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem_0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln790_1_fu_266_p2 <= std_logic_vector(unsigned(indvar_flatten4_fu_102) + unsigned(ap_const_lv5_1));
    add_ln790_fu_288_p2 <= std_logic_vector(unsigned(i_fu_247_p3) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(gmem_0_BVALID)
    begin
        if ((gmem_0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_keccak_absorb_once_1_fu_183_ap_done)
    begin
        if ((grp_keccak_absorb_once_1_fu_183_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(gmem_0_AWREADY)
    begin
        if ((gmem_0_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(grp_KeccakF1600_StatePermute_fu_194_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_fu_194_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, gmem_0_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (gmem_0_WREADY = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, gmem_0_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (gmem_0_WREADY = ap_const_logic_0));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln790_fu_294_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln790_fu_294_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14, gmem_0_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem_0_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln448_phi_fu_176_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln448_reg_172, ap_CS_fsm_pp0_stage0, icmp_ln44_reg_413, icmp_ln790_reg_418, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln790_reg_418 = ap_const_lv1_0))) then 
            ap_phi_mux_icmp_ln448_phi_fu_176_p4 <= icmp_ln44_reg_413;
        else 
            ap_phi_mux_icmp_ln448_phi_fu_176_p4 <= icmp_ln448_reg_172;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, gmem_0_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem_0_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    first_iter_0_fu_255_p2 <= "1" when (select_ln791_fu_239_p3 = ap_const_lv4_0) else "0";

    gmem_0_ARVALID_assign_proc : process(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_0_ARVALID <= grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_ARVALID;
        else 
            gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_0_AWLEN <= ap_const_lv64_20(32 - 1 downto 0);

    gmem_0_AWVALID_assign_proc : process(ap_CS_fsm_state4, gmem_0_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (gmem_0_AWREADY = ap_const_logic_1))) then 
            gmem_0_AWVALID <= ap_const_logic_1;
        else 
            gmem_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_BREADY_assign_proc : process(ap_CS_fsm_state14, gmem_0_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem_0_BVALID = ap_const_logic_1))) then 
            gmem_0_BREADY <= ap_const_logic_1;
        else 
            gmem_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_RREADY_assign_proc : process(grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_0_RREADY <= grp_keccak_absorb_once_1_fu_183_m_axi_gmem_0_RREADY;
        else 
            gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gmem_0_WVALID <= ap_const_logic_1;
        else 
            gmem_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_KeccakF1600_StatePermute_fu_194_ap_start <= grp_KeccakF1600_StatePermute_fu_194_ap_start_reg;
    grp_keccak_absorb_once_1_fu_183_ap_start <= grp_keccak_absorb_once_1_fu_183_ap_start_reg;
    i_1_fu_276_p2 <= std_logic_vector(unsigned(select_ln791_fu_239_p3) + unsigned(ap_const_lv4_1));
    i_fu_247_p3 <= 
        add_ln7909_fu_114 when (ap_phi_mux_icmp_ln448_phi_fu_176_p4(0) = '1') else 
        i5_fu_106;
    icmp_ln44_fu_282_p2 <= "1" when (i_1_fu_276_p2 = ap_const_lv4_8) else "0";
    icmp_ln790_fu_294_p2 <= "1" when (indvar_flatten4_fu_102 = ap_const_lv5_1F) else "0";
    lshr_ln46_fu_339_p2 <= std_logic_vector(shift_right(unsigned(u_assign16_fu_118),to_integer(unsigned('0' & zext_ln46_fu_335_p1(31-1 downto 0)))));

    s_address0_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_address0, grp_KeccakF1600_StatePermute_fu_194_state_address0, ap_CS_fsm_state3, zext_ln790_fu_261_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= grp_KeccakF1600_StatePermute_fu_194_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= grp_keccak_absorb_once_1_fu_183_s_address0;
        else 
            s_address0 <= zext_ln790_fu_261_p1(5 - 1 downto 0);
        end if; 
    end process;


    s_address1_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_address1, grp_KeccakF1600_StatePermute_fu_194_state_address1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address1 <= grp_KeccakF1600_StatePermute_fu_194_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address1 <= grp_keccak_absorb_once_1_fu_183_s_address1;
        else 
            s_address1 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_ce0, grp_KeccakF1600_StatePermute_fu_194_state_ce0, ap_CS_fsm_state3, s_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_ce0 <= grp_KeccakF1600_StatePermute_fu_194_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_ce0 <= grp_keccak_absorb_once_1_fu_183_s_ce0;
        else 
            s_ce0 <= s_ce0_local;
        end if; 
    end process;


    s_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            s_ce0_local <= ap_const_logic_1;
        else 
            s_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_ce1, grp_KeccakF1600_StatePermute_fu_194_state_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_ce1 <= grp_KeccakF1600_StatePermute_fu_194_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_ce1 <= grp_keccak_absorb_once_1_fu_183_s_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_d0, grp_KeccakF1600_StatePermute_fu_194_state_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_d0 <= grp_KeccakF1600_StatePermute_fu_194_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_d0 <= grp_keccak_absorb_once_1_fu_183_s_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_d1, grp_KeccakF1600_StatePermute_fu_194_state_d1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_d1 <= grp_KeccakF1600_StatePermute_fu_194_state_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_d1 <= grp_keccak_absorb_once_1_fu_183_s_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_we0, grp_KeccakF1600_StatePermute_fu_194_state_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_we0 <= grp_KeccakF1600_StatePermute_fu_194_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_we0 <= grp_keccak_absorb_once_1_fu_183_s_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_once_1_fu_183_s_we1, grp_KeccakF1600_StatePermute_fu_194_state_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_we1 <= grp_KeccakF1600_StatePermute_fu_194_state_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_we1 <= grp_keccak_absorb_once_1_fu_183_s_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln791_fu_239_p3 <= 
        ap_const_lv4_0 when (ap_phi_mux_icmp_ln448_phi_fu_176_p4(0) = '1') else 
        i_17_fu_110;
    shl_ln_fu_328_p3 <= (trunc_ln46_reg_408_pp0_iter1_reg & ap_const_lv3_0);
    trunc_ln46_1_fu_345_p1 <= lshr_ln46_fu_339_p2(8 - 1 downto 0);
    trunc_ln46_fu_272_p1 <= select_ln791_fu_239_p3(3 - 1 downto 0);
    zext_ln46_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_328_p3),64));
    zext_ln790_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_247_p3),64));
end behav;
