-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha3_256_hw_keccak_absorb_once_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    inlen : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha3_256_hw_keccak_absorb_once_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (109 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (109 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (109 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (109 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (109 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (109 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (109 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (109 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (109 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (109 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (109 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv33_1FFFFFF78 : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111101111000";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv59_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal empty_fu_256_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal inlen_cast_fu_260_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal inlen_cast_reg_631 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln482_fu_264_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln482_reg_636 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_32_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln482_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln482_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln482_1_fu_299_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln482_1_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal urem_ln482_reg_666 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal empty_30_fu_322_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_30_reg_671 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal sext_ln482_1_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal urem_ln482_1_reg_692 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal sext_ln471_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln471_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal sub_ln471_fu_364_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln471_reg_703 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln471_2_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln471_2_reg_708 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_726 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal i_4_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_732 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln487_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln487_reg_741 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal gmem_addr_read_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_1_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_2_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_3_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_4_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_5_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_6_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_read_7_reg_781 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln494_fu_447_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln494_reg_789 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal s_addr_3_reg_799 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln496_fu_469_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln496_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal trunc_ln518_fu_493_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln518_reg_812 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal lshr_ln_reg_817 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln520_fu_512_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln520_reg_822 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_1_reg_827 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem_addr_1_read_reg_832 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_addr_reg_837 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln518_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln518_reg_842 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal xor_ln520_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln520_reg_847 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal s_addr_2_reg_852 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal bit_sel_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal trunc_ln521_fu_594_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln521_reg_862 : STD_LOGIC_VECTOR (62 downto 0);
    signal local_block_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_244_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_244_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_244_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePermute_fu_244_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_reg_215 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln482_1_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal i_6_reg_227 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal icmp_ln487_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start_reg : STD_LOGIC := '0';
    signal s_we0_out : STD_LOGIC;
    signal grp_KeccakF1600_StatePermute_fu_244_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln494_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal zext_ln487_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln494_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln520_1_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln515_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln518_2_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln515_fu_383_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_assign_1_fu_112 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln502_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_cast7_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_7_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_block_we0_local : STD_LOGIC;
    signal r_fu_428_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_block_ce0_local : STD_LOGIC;
    signal local_block_address0_local : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce0_local : STD_LOGIC;
    signal s_address0_local : STD_LOGIC_VECTOR (4 downto 0);
    signal s_we0_local : STD_LOGIC;
    signal s_d0_local : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal xor_ln_fu_603_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_cast7_fu_252_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inlen_cast_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_fu_284_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln482_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln482_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln482_fu_314_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln482_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln482_fu_317_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal inlen_cast1_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln482_3_fu_344_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln482_2_fu_347_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln482_1_fu_350_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal inlen_cast1_fu_341_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln471_1_fu_360_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln515_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln515_fu_397_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln515_fu_478_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln1_fu_515_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_536_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln518_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln518_1_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln518_fu_547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_559_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln520_fu_566_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln520_fu_570_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln520_2_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln521_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_278_ap_start : STD_LOGIC;
    signal grp_fu_278_ap_done : STD_LOGIC;
    signal grp_fu_278_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_fu_303_ap_start : STD_LOGIC;
    signal grp_fu_303_ap_done : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha3_256_hw_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_KeccakF1600_StatePermute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha3_256_hw_urem_64s_9ns_33_68_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sha3_256_hw_keccak_absorb_once_1_local_block_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    local_block_U : component sha3_256_hw_keccak_absorb_once_1_local_block_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 17,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_block_address0_local,
        ce0 => local_block_ce0_local,
        we0 => local_block_we0_local,
        d0 => r_fu_428_p9,
        q0 => local_block_q0);

    grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238 : component sha3_256_hw_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start,
        ap_done => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done,
        ap_idle => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_idle,
        ap_ready => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_ready,
        s_address0 => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_address0,
        s_ce0 => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_ce0,
        s_we0 => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_we0,
        s_d0 => grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_d0);

    grp_KeccakF1600_StatePermute_fu_244 : component sha3_256_hw_KeccakF1600_StatePermute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePermute_fu_244_ap_start,
        ap_done => grp_KeccakF1600_StatePermute_fu_244_ap_done,
        ap_idle => grp_KeccakF1600_StatePermute_fu_244_ap_idle,
        ap_ready => grp_KeccakF1600_StatePermute_fu_244_ap_ready,
        state_address0 => grp_KeccakF1600_StatePermute_fu_244_state_address0,
        state_ce0 => grp_KeccakF1600_StatePermute_fu_244_state_ce0,
        state_we0 => grp_KeccakF1600_StatePermute_fu_244_state_we0,
        state_d0 => grp_KeccakF1600_StatePermute_fu_244_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePermute_fu_244_state_address1,
        state_ce1 => grp_KeccakF1600_StatePermute_fu_244_state_ce1,
        state_we1 => grp_KeccakF1600_StatePermute_fu_244_state_we1,
        state_d1 => grp_KeccakF1600_StatePermute_fu_244_state_d1,
        state_q1 => s_q1);

    urem_64s_9ns_33_68_seq_1_U54 : component sha3_256_hw_urem_64s_9ns_33_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 9,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_278_ap_start,
        done => grp_fu_278_ap_done,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => grp_fu_278_ce,
        dout => grp_fu_278_p2);

    urem_64s_9ns_33_68_seq_1_U55 : component sha3_256_hw_urem_64s_9ns_33_68_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 9,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_303_ap_start,
        done => grp_fu_303_ap_done,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePermute_fu_244_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePermute_fu_244_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln494_fu_441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                    grp_KeccakF1600_StatePermute_fu_244_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePermute_fu_244_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePermute_fu_244_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_3_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                i_3_reg_215 <= add_ln487_reg_741;
            elsif (((icmp_ln482_1_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                i_3_reg_215 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_6_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln487_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                i_6_reg_227 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                i_6_reg_227 <= add_ln494_reg_789;
            end if; 
        end if;
    end process;

    i_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln482_1_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                i_fu_120 <= ap_const_lv32_0;
            elsif (((icmp_ln515_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                i_fu_120 <= i_7_fu_487_p2;
            end if; 
        end if;
    end process;

    inlen_assign_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                inlen_assign_1_fu_112 <= inlen_cast7_fu_252_p1;
            elsif (((icmp_ln494_fu_441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                inlen_assign_1_fu_112 <= add_ln502_fu_459_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln482_reg_636 <= add_ln482_fu_264_p2;
                empty_reg_626 <= empty_fu_256_p1;
                inlen_cast_reg_631 <= inlen_cast_fu_260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                add_ln487_reg_741 <= add_ln487_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                add_ln494_reg_789 <= add_ln494_fu_447_p2;
                s_addr_3_reg_799 <= zext_ln494_fu_453_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                bit_sel_reg_857 <= s_q0(63 downto 63);
                trunc_ln521_reg_862 <= trunc_ln521_fu_594_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                empty_30_reg_671 <= empty_30_fu_322_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                empty_32_reg_646 <= empty_32_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                gmem_addr_1_read_reg_832 <= m_axi_gmem_0_RDATA;
                s_addr_reg_837 <= zext_ln518_2_fu_529_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                gmem_addr_1_reg_726 <= add_ln515_fu_383_p2;
                i_4_reg_732 <= i_4_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                gmem_addr_read_1_reg_751 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                gmem_addr_read_2_reg_756 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                gmem_addr_read_3_reg_761 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                gmem_addr_read_4_reg_766 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                gmem_addr_read_5_reg_771 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                gmem_addr_read_6_reg_776 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                gmem_addr_read_7_reg_781 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                gmem_addr_read_reg_746 <= m_axi_gmem_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                lshr_ln_reg_817 <= i_fu_120(7 downto 3);
                s_addr_1_reg_827 <= zext_ln520_1_fu_524_p1(5 - 1 downto 0);
                trunc_ln518_reg_812 <= trunc_ln518_fu_493_p1;
                trunc_ln520_reg_822 <= trunc_ln520_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                select_ln482_reg_651 <= select_ln482_fu_289_p3;
                trunc_ln482_1_reg_661 <= trunc_ln482_1_fu_299_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                sext_ln471_2_reg_708 <= sext_ln471_2_fu_370_p1;
                sext_ln471_reg_698 <= sext_ln471_fu_356_p1;
                sub_ln471_reg_703 <= sub_ln471_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                urem_ln482_1_reg_692 <= grp_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                urem_ln482_reg_666 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                xor_ln496_reg_804 <= xor_ln496_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                xor_ln518_reg_842 <= xor_ln518_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                xor_ln520_reg_847 <= xor_ln520_fu_580_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_0_ARREADY, m_axi_gmem_0_RVALID, ap_CS_fsm_state71, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state103, ap_CS_fsm_state2, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state90, ap_CS_fsm_state102, grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done, grp_KeccakF1600_StatePermute_fu_244_ap_done, icmp_ln482_1_fu_377_p2, icmp_ln487_fu_411_p2, icmp_ln494_fu_441_p2, ap_CS_fsm_state93, icmp_ln515_fu_482_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((icmp_ln482_1_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state80 => 
                if (((icmp_ln487_fu_411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state83) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state90 => 
                if (((icmp_ln494_fu_441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state93 => 
                if (((grp_KeccakF1600_StatePermute_fu_244_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (m_axi_gmem_0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                if (((icmp_ln515_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln482_fu_264_p2 <= std_logic_vector(signed(inlen_cast_fu_260_p1) + signed(ap_const_lv33_1FFFFFF78));
    add_ln487_fu_417_p2 <= std_logic_vector(unsigned(i_3_reg_215) + unsigned(ap_const_lv5_1));
    add_ln494_fu_447_p2 <= std_logic_vector(unsigned(i_6_reg_227) + unsigned(ap_const_lv5_1));
    add_ln502_fu_459_p2 <= std_logic_vector(unsigned(inlen_assign_1_fu_112) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    add_ln515_fu_383_p2 <= std_logic_vector(signed(sext_ln471_reg_698) + signed(in_r));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;

    ap_ST_fsm_state103_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state103_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state103_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done)
    begin
        if ((grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;

    ap_ST_fsm_state71_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;

    ap_ST_fsm_state81_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state81_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state81_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state82_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state83_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state83_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state83_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state84_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state85_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state85_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state85_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state86_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state87_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state88_blk_assign_proc : process(m_axi_gmem_0_RVALID)
    begin
        if ((m_axi_gmem_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;

    ap_ST_fsm_state93_blk_assign_proc : process(grp_KeccakF1600_StatePermute_fu_244_ap_done)
    begin
        if ((grp_KeccakF1600_StatePermute_fu_244_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state94_blk_assign_proc : process(m_axi_gmem_0_ARREADY)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state94_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state94_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_30_fu_322_p3 <= 
        sub_ln482_fu_317_p2 when (icmp_ln482_fu_309_p2(0) = '1') else 
        ap_const_lv33_0;
    empty_32_fu_284_p0 <= inlen;
    empty_32_fu_284_p2 <= "1" when (unsigned(empty_32_fu_284_p0) < unsigned(ap_const_lv32_87)) else "0";
    empty_fu_256_p0 <= inlen;
    empty_fu_256_p1 <= empty_fu_256_p0(8 - 1 downto 0);

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state71, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            gmem_blk_n_AR <= m_axi_gmem_0_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            gmem_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_KeccakF1600_StatePermute_fu_244_ap_start <= grp_KeccakF1600_StatePermute_fu_244_ap_start_reg;

    grp_fu_278_ap_start_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done)
    begin
        if (((grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_278_ap_start <= ap_const_logic_1;
        else 
            grp_fu_278_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_278_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state71, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state103, ap_CS_fsm_state70, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state106, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state89, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state110, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 
    = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            grp_fu_278_ce <= ap_const_logic_0;
        else 
            grp_fu_278_ce <= ap_const_logic_1;
        end if; 
    end process;

        grp_fu_278_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln482_reg_636),64));

    grp_fu_278_p1 <= ap_const_lv64_88(9 - 1 downto 0);

    grp_fu_303_ap_start_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_303_ap_start <= ap_const_logic_1;
        else 
            grp_fu_303_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state103, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state102, ap_CS_fsm_state104, ap_CS_fsm_state106, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state89, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state110, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 
    = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            grp_fu_303_ce <= ap_const_logic_0;
        else 
            grp_fu_303_ce <= ap_const_logic_1;
        end if; 
    end process;

        grp_fu_303_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln482_fu_289_p3),64));

    grp_fu_303_p1 <= ap_const_lv64_88(9 - 1 downto 0);
    grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start <= grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_ap_start_reg;
    i_4_fu_400_p2 <= std_logic_vector(unsigned(sub_ln515_fu_393_p2) + unsigned(trunc_ln515_fu_397_p1));
    i_7_fu_487_p2 <= std_logic_vector(unsigned(i_fu_120) + unsigned(ap_const_lv32_1));
    icmp_ln482_1_fu_377_p2 <= "1" when (unsigned(inlen_assign_1_fu_112) > unsigned(ap_const_lv64_87)) else "0";
    icmp_ln482_fu_309_p0 <= inlen;
    icmp_ln482_fu_309_p2 <= "1" when (unsigned(icmp_ln482_fu_309_p0) > unsigned(ap_const_lv32_87)) else "0";
    icmp_ln487_fu_411_p2 <= "1" when (i_3_reg_215 = ap_const_lv5_11) else "0";
    icmp_ln494_fu_441_p2 <= "1" when (i_6_reg_227 = ap_const_lv5_11) else "0";
    icmp_ln515_fu_482_p2 <= "1" when (unsigned(sub_ln471_reg_703) > unsigned(zext_ln515_fu_478_p1)) else "0";
    inlen_cast1_fu_341_p0 <= inlen;
        inlen_cast1_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inlen_cast1_fu_341_p0),34));

    inlen_cast7_fu_252_p0 <= inlen;
        inlen_cast7_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inlen_cast7_fu_252_p0),64));

    inlen_cast_fu_260_p0 <= inlen;
        inlen_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inlen_cast_fu_260_p0),33));


    local_block_address0_local_assign_proc : process(ap_CS_fsm_state90, ap_CS_fsm_state89, zext_ln487_fu_423_p1, zext_ln494_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            local_block_address0_local <= zext_ln494_fu_453_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            local_block_address0_local <= zext_ln487_fu_423_p1(5 - 1 downto 0);
        else 
            local_block_address0_local <= "XXXXX";
        end if; 
    end process;


    local_block_ce0_local_assign_proc : process(ap_CS_fsm_state90, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            local_block_ce0_local <= ap_const_logic_1;
        else 
            local_block_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    local_block_we0_local_assign_proc : process(ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            local_block_we0_local <= ap_const_logic_1;
        else 
            local_block_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_515_p4 <= i_4_reg_732(7 downto 3);

    m_axi_gmem_0_ARADDR_assign_proc : process(m_axi_gmem_0_ARREADY, in_r, ap_CS_fsm_state71, ap_CS_fsm_state94, gmem_addr_1_reg_726)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                m_axi_gmem_0_ARADDR <= gmem_addr_1_reg_726;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                m_axi_gmem_0_ARADDR <= in_r;
            else 
                m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;

    m_axi_gmem_0_ARLEN_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state71, ap_CS_fsm_state94, sext_ln482_1_fu_337_p1, sext_ln471_2_reg_708)
    begin
        if ((m_axi_gmem_0_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                m_axi_gmem_0_ARLEN <= sext_ln471_2_reg_708(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                m_axi_gmem_0_ARLEN <= sext_ln482_1_fu_337_p1(32 - 1 downto 0);
            else 
                m_axi_gmem_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_0_ARVALID_assign_proc : process(m_axi_gmem_0_ARREADY, ap_CS_fsm_state71, ap_CS_fsm_state94)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state94) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (m_axi_gmem_0_ARREADY = ap_const_logic_1)))) then 
            m_axi_gmem_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_0_RREADY_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state103)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state87) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state84) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_gmem_0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state81) and (m_axi_gmem_0_RVALID = ap_const_logic_1)))) then 
            m_axi_gmem_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= ap_const_lv8_0;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_0_WVALID <= ap_const_logic_0;
    r_fu_428_p9 <= (((((((gmem_addr_read_7_reg_781 & gmem_addr_read_6_reg_776) & gmem_addr_read_5_reg_771) & gmem_addr_read_4_reg_766) & gmem_addr_read_3_reg_761) & gmem_addr_read_2_reg_756) & gmem_addr_read_1_reg_751) & gmem_addr_read_reg_746);
    s_addr_2_reg_852 <= ap_const_lv64_10(5 - 1 downto 0);

    s_address0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_address0, grp_KeccakF1600_StatePermute_fu_244_state_address0, ap_CS_fsm_state93, s_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            s_address0 <= grp_KeccakF1600_StatePermute_fu_244_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_address0;
        else 
            s_address0 <= s_address0_local;
        end if; 
    end process;


    s_address0_local_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state90, s_addr_3_reg_799, ap_CS_fsm_state102, s_addr_1_reg_827, s_addr_reg_837, s_addr_2_reg_852, ap_CS_fsm_state108, ap_CS_fsm_state92, icmp_ln494_fu_441_p2, zext_ln494_fu_453_p1, zext_ln520_1_fu_524_p1, zext_ln518_2_fu_529_p1, ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            s_address0_local <= s_addr_2_reg_852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            s_address0_local <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            s_address0_local <= s_addr_1_reg_827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            s_address0_local <= s_addr_reg_837;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            s_address0_local <= zext_ln518_2_fu_529_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            s_address0_local <= zext_ln520_1_fu_524_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            s_address0_local <= s_addr_3_reg_799;
        elsif (((icmp_ln494_fu_441_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
            s_address0_local <= zext_ln494_fu_453_p1(5 - 1 downto 0);
        else 
            s_address0_local <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePermute_fu_244_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_ce0, grp_KeccakF1600_StatePermute_fu_244_state_ce0, ap_CS_fsm_state93, s_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            s_ce0 <= grp_KeccakF1600_StatePermute_fu_244_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_ce0 <= grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_ce0;
        else 
            s_ce0 <= s_ce0_local;
        end if; 
    end process;


    s_ce0_local_assign_proc : process(m_axi_gmem_0_RVALID, ap_CS_fsm_state103, ap_CS_fsm_state90, ap_CS_fsm_state102, ap_CS_fsm_state108, ap_CS_fsm_state92, icmp_ln494_fu_441_p2, ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state102) or ((icmp_ln494_fu_441_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90)) or ((ap_const_logic_1 = ap_CS_fsm_state103) and (m_axi_gmem_0_RVALID = ap_const_logic_1)))) then 
            s_ce0_local <= ap_const_logic_1;
        else 
            s_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_KeccakF1600_StatePermute_fu_244_state_ce1, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            s_ce1 <= grp_KeccakF1600_StatePermute_fu_244_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_d0, grp_KeccakF1600_StatePermute_fu_244_state_d0, ap_CS_fsm_state93, s_d0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            s_d0 <= grp_KeccakF1600_StatePermute_fu_244_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_d0 <= grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_d0;
        else 
            s_d0 <= s_d0_local;
        end if; 
    end process;


    s_d0_local_assign_proc : process(xor_ln496_reg_804, xor_ln518_reg_842, xor_ln520_reg_847, ap_CS_fsm_state92, ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state110, xor_ln_fu_603_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            s_d0_local <= xor_ln_fu_603_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            s_d0_local <= xor_ln520_reg_847;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            s_d0_local <= xor_ln518_reg_842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            s_d0_local <= xor_ln496_reg_804;
        else 
            s_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePermute_fu_244_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_we0, grp_KeccakF1600_StatePermute_fu_244_state_we0, s_we0_out, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            s_we0 <= grp_KeccakF1600_StatePermute_fu_244_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_we0 <= grp_keccak_absorb_once_1_Pipeline_VITIS_LOOP_477_1_fu_238_s_we0;
        else 
            s_we0 <= (s_we0_out or ap_const_logic_0);
        end if; 
    end process;


    s_we0_local_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            s_we0_local <= ap_const_logic_1;
        else 
            s_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_we0_out <= s_we0_local;

    s_we1_assign_proc : process(grp_KeccakF1600_StatePermute_fu_244_state_we1, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            s_we1 <= grp_KeccakF1600_StatePermute_fu_244_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln482_fu_289_p2 <= inlen;
    select_ln482_fu_289_p3 <= 
        ap_const_lv32_87 when (empty_32_reg_646(0) = '1') else 
        select_ln482_fu_289_p2;
        sext_ln471_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln482_1_fu_350_p2),34));

        sext_ln471_2_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln471_fu_364_p2),64));

        sext_ln471_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln482_1_fu_350_p2),64));

        sext_ln482_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_30_reg_671),64));

        sext_ln482_3_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln482_reg_651),33));

    shl_ln1_fu_559_p3 <= (trunc_ln520_reg_822 & ap_const_lv3_0);
    shl_ln518_fu_547_p2 <= std_logic_vector(shift_left(unsigned(zext_ln518_fu_533_p1),to_integer(unsigned('0' & zext_ln518_1_fu_543_p1(31-1 downto 0)))));
    shl_ln520_fu_570_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv59_6),to_integer(unsigned('0' & zext_ln520_fu_566_p1(31-1 downto 0)))));
    shl_ln_fu_536_p3 <= (trunc_ln518_reg_812 & ap_const_lv3_0);
    sub_ln471_fu_364_p2 <= std_logic_vector(signed(inlen_cast1_fu_341_p1) - signed(sext_ln471_1_fu_360_p1));
    sub_ln482_1_fu_350_p2 <= std_logic_vector(signed(sext_ln482_3_fu_344_p1) - signed(trunc_ln482_2_fu_347_p1));
    sub_ln482_fu_317_p2 <= std_logic_vector(signed(inlen_cast_reg_631) - signed(trunc_ln482_fu_314_p1));
    sub_ln515_fu_393_p2 <= std_logic_vector(unsigned(empty_reg_626) - unsigned(trunc_ln482_1_reg_661));
    trunc_ln482_1_fu_299_p1 <= select_ln482_fu_289_p3(8 - 1 downto 0);
    trunc_ln482_2_fu_347_p1 <= urem_ln482_1_reg_692(33 - 1 downto 0);
    trunc_ln482_fu_314_p1 <= urem_ln482_reg_666(33 - 1 downto 0);
    trunc_ln515_fu_397_p1 <= urem_ln482_1_reg_692(8 - 1 downto 0);
    trunc_ln518_fu_493_p1 <= i_fu_120(3 - 1 downto 0);
    trunc_ln520_fu_512_p1 <= i_4_reg_732(3 - 1 downto 0);
    trunc_ln521_fu_594_p1 <= s_q0(63 - 1 downto 0);
    xor_ln496_fu_469_p2 <= (s_q0 xor local_block_q0);
    xor_ln518_fu_553_p2 <= (shl_ln518_fu_547_p2 xor s_q0);
    xor_ln520_fu_580_p2 <= (zext_ln520_2_fu_576_p1 xor s_q0);
    xor_ln521_fu_598_p2 <= (bit_sel_reg_857 xor ap_const_lv1_1);
    xor_ln_fu_603_p3 <= (xor_ln521_fu_598_p2 & trunc_ln521_reg_862);
    zext_ln487_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_215),64));
    zext_ln494_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_227),64));
    zext_ln515_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_120),34));
    zext_ln518_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_536_p3),64));
    zext_ln518_2_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_817),64));
    zext_ln518_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem_addr_1_read_reg_832),64));
    zext_ln520_1_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_515_p4),64));
    zext_ln520_2_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln520_fu_570_p2),64));
    zext_ln520_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_559_p3),59));
end behav;
